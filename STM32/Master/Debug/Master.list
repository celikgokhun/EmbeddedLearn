
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a00c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800a11c  0800a11c  0001a11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a19c  0800a19c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a19c  0800a19c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a19c  0800a19c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a19c  0800a19c  0001a19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1a0  0800a1a0  0001a1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800a1a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  20000180  0800a320  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001470  0800a320  00021470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011481  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302b  00000000  00000000  00031626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00034658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  000354c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6b6  00000000  00000000  000361e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001335d  00000000  00000000  0005089e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c151  00000000  00000000  00063bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efd4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b80  00000000  00000000  000efd9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a104 	.word	0x0800a104

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800a104 	.word	0x0800a104

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_frsub>:
 800092c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000930:	e002      	b.n	8000938 <__addsf3>
 8000932:	bf00      	nop

08000934 <__aeabi_fsub>:
 8000934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000938 <__addsf3>:
 8000938:	0042      	lsls	r2, r0, #1
 800093a:	bf1f      	itttt	ne
 800093c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000940:	ea92 0f03 	teqne	r2, r3
 8000944:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000948:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094c:	d06a      	beq.n	8000a24 <__addsf3+0xec>
 800094e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000952:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000956:	bfc1      	itttt	gt
 8000958:	18d2      	addgt	r2, r2, r3
 800095a:	4041      	eorgt	r1, r0
 800095c:	4048      	eorgt	r0, r1
 800095e:	4041      	eorgt	r1, r0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	2b19      	cmp	r3, #25
 8000966:	bf88      	it	hi
 8000968:	4770      	bxhi	lr
 800096a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000982:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4249      	negne	r1, r1
 800098a:	ea92 0f03 	teq	r2, r3
 800098e:	d03f      	beq.n	8000a10 <__addsf3+0xd8>
 8000990:	f1a2 0201 	sub.w	r2, r2, #1
 8000994:	fa41 fc03 	asr.w	ip, r1, r3
 8000998:	eb10 000c 	adds.w	r0, r0, ip
 800099c:	f1c3 0320 	rsb	r3, r3, #32
 80009a0:	fa01 f103 	lsl.w	r1, r1, r3
 80009a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__addsf3+0x78>
 80009aa:	4249      	negs	r1, r1
 80009ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b4:	d313      	bcc.n	80009de <__addsf3+0xa6>
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ba:	d306      	bcc.n	80009ca <__addsf3+0x92>
 80009bc:	0840      	lsrs	r0, r0, #1
 80009be:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c2:	f102 0201 	add.w	r2, r2, #1
 80009c6:	2afe      	cmp	r2, #254	; 0xfe
 80009c8:	d251      	bcs.n	8000a6e <__addsf3+0x136>
 80009ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d2:	bf08      	it	eq
 80009d4:	f020 0001 	biceq.w	r0, r0, #1
 80009d8:	ea40 0003 	orr.w	r0, r0, r3
 80009dc:	4770      	bx	lr
 80009de:	0049      	lsls	r1, r1, #1
 80009e0:	eb40 0000 	adc.w	r0, r0, r0
 80009e4:	3a01      	subs	r2, #1
 80009e6:	bf28      	it	cs
 80009e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009ec:	d2ed      	bcs.n	80009ca <__addsf3+0x92>
 80009ee:	fab0 fc80 	clz	ip, r0
 80009f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f6:	ebb2 020c 	subs.w	r2, r2, ip
 80009fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fe:	bfaa      	itet	ge
 8000a00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a04:	4252      	neglt	r2, r2
 8000a06:	4318      	orrge	r0, r3
 8000a08:	bfbc      	itt	lt
 8000a0a:	40d0      	lsrlt	r0, r2
 8000a0c:	4318      	orrlt	r0, r3
 8000a0e:	4770      	bx	lr
 8000a10:	f092 0f00 	teq	r2, #0
 8000a14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a18:	bf06      	itte	eq
 8000a1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1e:	3201      	addeq	r2, #1
 8000a20:	3b01      	subne	r3, #1
 8000a22:	e7b5      	b.n	8000990 <__addsf3+0x58>
 8000a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	bf18      	it	ne
 8000a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a32:	d021      	beq.n	8000a78 <__addsf3+0x140>
 8000a34:	ea92 0f03 	teq	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__addsf3+0x10c>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	bf08      	it	eq
 8000a40:	4608      	moveq	r0, r1
 8000a42:	4770      	bx	lr
 8000a44:	ea90 0f01 	teq	r0, r1
 8000a48:	bf1c      	itt	ne
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	4770      	bxne	lr
 8000a4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a52:	d104      	bne.n	8000a5e <__addsf3+0x126>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	bf28      	it	cs
 8000a58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a5c:	4770      	bx	lr
 8000a5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a62:	bf3c      	itt	cc
 8000a64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bxcc	lr
 8000a6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a76:	4770      	bx	lr
 8000a78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a7c:	bf16      	itet	ne
 8000a7e:	4608      	movne	r0, r1
 8000a80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a84:	4601      	movne	r1, r0
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	bf06      	itte	eq
 8000a8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8e:	ea90 0f01 	teqeq	r0, r1
 8000a92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_ui2f>:
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e004      	b.n	8000aa8 <__aeabi_i2f+0x8>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_i2f>:
 8000aa0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	ea5f 0c00 	movs.w	ip, r0
 8000aac:	bf08      	it	eq
 8000aae:	4770      	bxeq	lr
 8000ab0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	e01c      	b.n	8000af6 <__aeabi_l2f+0x2a>

08000abc <__aeabi_ul2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e00a      	b.n	8000ae0 <__aeabi_l2f+0x14>
 8000aca:	bf00      	nop

08000acc <__aeabi_l2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_l2f+0x14>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	ea5f 0c01 	movs.w	ip, r1
 8000ae4:	bf02      	ittt	eq
 8000ae6:	4684      	moveq	ip, r0
 8000ae8:	4601      	moveq	r1, r0
 8000aea:	2000      	moveq	r0, #0
 8000aec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af0:	bf08      	it	eq
 8000af2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afa:	fabc f28c 	clz	r2, ip
 8000afe:	3a08      	subs	r2, #8
 8000b00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b04:	db10      	blt.n	8000b28 <__aeabi_l2f+0x5c>
 8000b06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f102 0220 	add.w	r2, r2, #32
 8000b2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b38:	fa21 f202 	lsr.w	r2, r1, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_fmul>:
 8000b48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b50:	bf1e      	ittt	ne
 8000b52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b56:	ea92 0f0c 	teqne	r2, ip
 8000b5a:	ea93 0f0c 	teqne	r3, ip
 8000b5e:	d06f      	beq.n	8000c40 <__aeabi_fmul+0xf8>
 8000b60:	441a      	add	r2, r3
 8000b62:	ea80 0c01 	eor.w	ip, r0, r1
 8000b66:	0240      	lsls	r0, r0, #9
 8000b68:	bf18      	it	ne
 8000b6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b6e:	d01e      	beq.n	8000bae <__aeabi_fmul+0x66>
 8000b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b88:	bf3e      	ittt	cc
 8000b8a:	0049      	lslcc	r1, r1, #1
 8000b8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b90:	005b      	lslcc	r3, r3, #1
 8000b92:	ea40 0001 	orr.w	r0, r0, r1
 8000b96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b9a:	2afd      	cmp	r2, #253	; 0xfd
 8000b9c:	d81d      	bhi.n	8000bda <__aeabi_fmul+0x92>
 8000b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	4770      	bx	lr
 8000bae:	f090 0f00 	teq	r0, #0
 8000bb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bb6:	bf08      	it	eq
 8000bb8:	0249      	lsleq	r1, r1, #9
 8000bba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bc2:	3a7f      	subs	r2, #127	; 0x7f
 8000bc4:	bfc2      	ittt	gt
 8000bc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bce:	4770      	bxgt	lr
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	dc5d      	bgt.n	8000c98 <__aeabi_fmul+0x150>
 8000bdc:	f112 0f19 	cmn.w	r2, #25
 8000be0:	bfdc      	itt	le
 8000be2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000be6:	4770      	bxle	lr
 8000be8:	f1c2 0200 	rsb	r2, r2, #0
 8000bec:	0041      	lsls	r1, r0, #1
 8000bee:	fa21 f102 	lsr.w	r1, r1, r2
 8000bf2:	f1c2 0220 	rsb	r2, r2, #32
 8000bf6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bfe:	f140 0000 	adc.w	r0, r0, #0
 8000c02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c06:	bf08      	it	eq
 8000c08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c0c:	4770      	bx	lr
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c16:	bf02      	ittt	eq
 8000c18:	0040      	lsleq	r0, r0, #1
 8000c1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c1e:	3a01      	subeq	r2, #1
 8000c20:	d0f9      	beq.n	8000c16 <__aeabi_fmul+0xce>
 8000c22:	ea40 000c 	orr.w	r0, r0, ip
 8000c26:	f093 0f00 	teq	r3, #0
 8000c2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0049      	lsleq	r1, r1, #1
 8000c32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c36:	3b01      	subeq	r3, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c3a:	ea41 010c 	orr.w	r1, r1, ip
 8000c3e:	e78f      	b.n	8000b60 <__aeabi_fmul+0x18>
 8000c40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c44:	ea92 0f0c 	teq	r2, ip
 8000c48:	bf18      	it	ne
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d00a      	beq.n	8000c66 <__aeabi_fmul+0x11e>
 8000c50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c54:	bf18      	it	ne
 8000c56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	d1d8      	bne.n	8000c0e <__aeabi_fmul+0xc6>
 8000c5c:	ea80 0001 	eor.w	r0, r0, r1
 8000c60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f090 0f00 	teq	r0, #0
 8000c6a:	bf17      	itett	ne
 8000c6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c70:	4608      	moveq	r0, r1
 8000c72:	f091 0f00 	teqne	r1, #0
 8000c76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c7a:	d014      	beq.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c7c:	ea92 0f0c 	teq	r2, ip
 8000c80:	d101      	bne.n	8000c86 <__aeabi_fmul+0x13e>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d10f      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c86:	ea93 0f0c 	teq	r3, ip
 8000c8a:	d103      	bne.n	8000c94 <__aeabi_fmul+0x14c>
 8000c8c:	024b      	lsls	r3, r1, #9
 8000c8e:	bf18      	it	ne
 8000c90:	4608      	movne	r0, r1
 8000c92:	d108      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c94:	ea80 0001 	eor.w	r0, r0, r1
 8000c98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fdiv>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d069      	beq.n	8000d9c <__aeabi_fdiv+0xec>
 8000cc8:	eba2 0203 	sub.w	r2, r2, r3
 8000ccc:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd0:	0249      	lsls	r1, r1, #9
 8000cd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cd6:	d037      	beq.n	8000d48 <__aeabi_fdiv+0x98>
 8000cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cdc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ce0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	bf38      	it	cc
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cf2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	bf24      	itt	cs
 8000cfa:	1a5b      	subcs	r3, r3, r1
 8000cfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d04:	bf24      	itt	cs
 8000d06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d12:	bf24      	itt	cs
 8000d14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d20:	bf24      	itt	cs
 8000d22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	bf18      	it	ne
 8000d2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d32:	d1e0      	bne.n	8000cf6 <__aeabi_fdiv+0x46>
 8000d34:	2afd      	cmp	r2, #253	; 0xfd
 8000d36:	f63f af50 	bhi.w	8000bda <__aeabi_fmul+0x92>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d50:	327f      	adds	r2, #127	; 0x7f
 8000d52:	bfc2      	ittt	gt
 8000d54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5c:	4770      	bxgt	lr
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	3a01      	subs	r2, #1
 8000d68:	e737      	b.n	8000bda <__aeabi_fmul+0x92>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fdiv+0xc2>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xda>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e795      	b.n	8000cc8 <__aeabi_fdiv+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	d108      	bne.n	8000db8 <__aeabi_fdiv+0x108>
 8000da6:	0242      	lsls	r2, r0, #9
 8000da8:	f47f af7d 	bne.w	8000ca6 <__aeabi_fmul+0x15e>
 8000dac:	ea93 0f0c 	teq	r3, ip
 8000db0:	f47f af70 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e776      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	d104      	bne.n	8000dc8 <__aeabi_fdiv+0x118>
 8000dbe:	024b      	lsls	r3, r1, #9
 8000dc0:	f43f af4c 	beq.w	8000c5c <__aeabi_fmul+0x114>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e76e      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000dc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dcc:	bf18      	it	ne
 8000dce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd2:	d1ca      	bne.n	8000d6a <__aeabi_fdiv+0xba>
 8000dd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dd8:	f47f af5c 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000ddc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000de0:	f47f af3c 	bne.w	8000c5c <__aeabi_fmul+0x114>
 8000de4:	e75f      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000de6:	bf00      	nop

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dec:	f000 fc3a 	bl	8001664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df0:	f000 f8e8 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df4:	f000 fa1c 	bl	8001230 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000df8:	f000 f9be 	bl	8001178 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000dfc:	f000 f940 	bl	8001080 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000e00:	f008 fcde 	bl	80097c0 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8000e04:	f000 f97a 	bl	80010fc <MX_ADC2_Init>
  MX_I2C2_Init();
 8000e08:	f000 f9e4 	bl	80011d4 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // read flow sensor One
	  SFM3300_Read_Current(&hi2c1, receivedData_SensorOne); // 3 byte veri okuyacak ve "receivedData_SensorOne" içine atayacak.
 8000e0c:	495e      	ldr	r1, [pc, #376]	; (8000f88 <main+0x1a0>)
 8000e0e:	485f      	ldr	r0, [pc, #380]	; (8000f8c <main+0x1a4>)
 8000e10:	f000 fba3 	bl	800155a <SFM3300_Read_Current>
	  result = SMF3300_CheckCrc(receivedData_SensorOne, 2, receivedData_SensorOne[2]);
 8000e14:	4b5c      	ldr	r3, [pc, #368]	; (8000f88 <main+0x1a0>)
 8000e16:	789b      	ldrb	r3, [r3, #2]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	485a      	ldr	r0, [pc, #360]	; (8000f88 <main+0x1a0>)
 8000e1e:	f000 fbb2 	bl	8001586 <SMF3300_CheckCrc>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b5a      	ldr	r3, [pc, #360]	; (8000f90 <main+0x1a8>)
 8000e28:	701a      	strb	r2, [r3, #0]
	  if(result == 0x00)
 8000e2a:	4b59      	ldr	r3, [pc, #356]	; (8000f90 <main+0x1a8>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d107      	bne.n	8000e42 <main+0x5a>
	  {
		  airflow_sensorOne = SFM3300_ConvertRawData_to_FlowValue(receivedData_SensorOne);
 8000e32:	4855      	ldr	r0, [pc, #340]	; (8000f88 <main+0x1a0>)
 8000e34:	f000 fbe6 	bl	8001604 <SFM3300_ConvertRawData_to_FlowValue>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4955      	ldr	r1, [pc, #340]	; (8000f94 <main+0x1ac>)
 8000e3e:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  // read flow sensor Two
	  SFM3300_Read_Current(&hi2c2, receivedData_SensorTwo); // 3 byte veri okuyacak ve "receivedData_SensorOne" içine atayacak.
 8000e42:	4955      	ldr	r1, [pc, #340]	; (8000f98 <main+0x1b0>)
 8000e44:	4855      	ldr	r0, [pc, #340]	; (8000f9c <main+0x1b4>)
 8000e46:	f000 fb88 	bl	800155a <SFM3300_Read_Current>
	  result1 = SMF3300_CheckCrc(receivedData_SensorTwo, 2, receivedData_SensorTwo[2]);
 8000e4a:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <main+0x1b0>)
 8000e4c:	789b      	ldrb	r3, [r3, #2]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2102      	movs	r1, #2
 8000e52:	4851      	ldr	r0, [pc, #324]	; (8000f98 <main+0x1b0>)
 8000e54:	f000 fb97 	bl	8001586 <SMF3300_CheckCrc>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b50      	ldr	r3, [pc, #320]	; (8000fa0 <main+0x1b8>)
 8000e5e:	701a      	strb	r2, [r3, #0]
	  if(result1 == 0x00)
 8000e60:	4b4f      	ldr	r3, [pc, #316]	; (8000fa0 <main+0x1b8>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d107      	bne.n	8000e78 <main+0x90>
	  {
		  airflow_sensorTwo = SFM3300_ConvertRawData_to_FlowValue(receivedData_SensorTwo);
 8000e68:	484b      	ldr	r0, [pc, #300]	; (8000f98 <main+0x1b0>)
 8000e6a:	f000 fbcb 	bl	8001604 <SFM3300_ConvertRawData_to_FlowValue>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	494c      	ldr	r1, [pc, #304]	; (8000fa4 <main+0x1bc>)
 8000e74:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  // read pressure sensor one
	  HAL_ADC_Start(&hadc1);
 8000e78:	484b      	ldr	r0, [pc, #300]	; (8000fa8 <main+0x1c0>)
 8000e7a:	f000 fd2d 	bl	80018d8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1); // timeout 1ms
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4849      	ldr	r0, [pc, #292]	; (8000fa8 <main+0x1c0>)
 8000e82:	f000 fdd7 	bl	8001a34 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000e86:	4848      	ldr	r0, [pc, #288]	; (8000fa8 <main+0x1c0>)
 8000e88:	f000 feda 	bl	8001c40 <HAL_ADC_GetValue>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b46      	ldr	r3, [pc, #280]	; (8000fac <main+0x1c4>)
 8000e92:	801a      	strh	r2, [r3, #0]
	  pressureSens1_kPa = (uint16_t)(((((float)adc_value / 4096) -0.04 ) / 0.09)*100);
 8000e94:	4b45      	ldr	r3, [pc, #276]	; (8000fac <main+0x1c4>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fdfd 	bl	8000a98 <__aeabi_ui2f>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff03 	bl	8000cb0 <__aeabi_fdiv>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fab3 	bl	8000418 <__aeabi_f2d>
 8000eb2:	a331      	add	r3, pc, #196	; (adr r3, 8000f78 <main+0x190>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff f94e 	bl	8000158 <__aeabi_dsub>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	a32e      	add	r3, pc, #184	; (adr r3, 8000f80 <main+0x198>)
 8000ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eca:	f7ff fc27 	bl	800071c <__aeabi_ddiv>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <main+0x1c8>)
 8000edc:	f7ff faf4 	bl	80004c8 <__aeabi_dmul>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff fd00 	bl	80008ec <__aeabi_d2uiz>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <main+0x1cc>)
 8000ef2:	801a      	strh	r2, [r3, #0]

	  // read pressure sensor two
	  HAL_ADC_Start(&hadc2);
 8000ef4:	4830      	ldr	r0, [pc, #192]	; (8000fb8 <main+0x1d0>)
 8000ef6:	f000 fcef 	bl	80018d8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 1); // timeout 1ms
 8000efa:	2101      	movs	r1, #1
 8000efc:	482e      	ldr	r0, [pc, #184]	; (8000fb8 <main+0x1d0>)
 8000efe:	f000 fd99 	bl	8001a34 <HAL_ADC_PollForConversion>
	  adc_value1 = HAL_ADC_GetValue(&hadc2);
 8000f02:	482d      	ldr	r0, [pc, #180]	; (8000fb8 <main+0x1d0>)
 8000f04:	f000 fe9c 	bl	8001c40 <HAL_ADC_GetValue>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <main+0x1d4>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	  pressureSens2_kPa = (uint16_t)(((((float)adc_value1 / 4096) -0.04 ) / 0.09)*100);
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <main+0x1d4>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fdbf 	bl	8000a98 <__aeabi_ui2f>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fec5 	bl	8000cb0 <__aeabi_fdiv>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fa75 	bl	8000418 <__aeabi_f2d>
 8000f2e:	a312      	add	r3, pc, #72	; (adr r3, 8000f78 <main+0x190>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff f910 	bl	8000158 <__aeabi_dsub>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	a30f      	add	r3, pc, #60	; (adr r3, 8000f80 <main+0x198>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fbe9 	bl	800071c <__aeabi_ddiv>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <main+0x1c8>)
 8000f58:	f7ff fab6 	bl	80004c8 <__aeabi_dmul>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fcc2 	bl	80008ec <__aeabi_d2uiz>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <main+0x1d8>)
 8000f6e:	801a      	strh	r2, [r3, #0]
	  SFM3300_Read_Current(&hi2c1, receivedData_SensorOne); // 3 byte veri okuyacak ve "receivedData_SensorOne" içine atayacak.
 8000f70:	e74c      	b.n	8000e0c <main+0x24>
 8000f72:	bf00      	nop
 8000f74:	f3af 8000 	nop.w
 8000f78:	47ae147b 	.word	0x47ae147b
 8000f7c:	3fa47ae1 	.word	0x3fa47ae1
 8000f80:	70a3d70a 	.word	0x70a3d70a
 8000f84:	3fb70a3d 	.word	0x3fb70a3d
 8000f88:	200002a4 	.word	0x200002a4
 8000f8c:	200001fc 	.word	0x200001fc
 8000f90:	200002ab 	.word	0x200002ab
 8000f94:	200002b0 	.word	0x200002b0
 8000f98:	200002a8 	.word	0x200002a8
 8000f9c:	20000250 	.word	0x20000250
 8000fa0:	200002ac 	.word	0x200002ac
 8000fa4:	200002b8 	.word	0x200002b8
 8000fa8:	2000019c 	.word	0x2000019c
 8000fac:	200002c4 	.word	0x200002c4
 8000fb0:	40590000 	.word	0x40590000
 8000fb4:	200002c0 	.word	0x200002c0
 8000fb8:	200001cc 	.word	0x200001cc
 8000fbc:	200002c6 	.word	0x200002c6
 8000fc0:	200002c2 	.word	0x200002c2

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fce:	2228      	movs	r2, #40	; 0x28
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f009 f88e 	bl	800a0f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001002:	2301      	movs	r3, #1
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001010:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101a:	4618      	mov	r0, r3
 800101c:	f003 fd34 	bl	8004a88 <HAL_RCC_OscConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001026:	f000 f931 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	230f      	movs	r3, #15
 800102c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2102      	movs	r1, #2
 8001046:	4618      	mov	r0, r3
 8001048:	f003 ffa0 	bl	8004f8c <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001052:	f000 f91b 	bl	800128c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001056:	2312      	movs	r3, #18
 8001058:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800105a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800105e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f004 f928 	bl	80052bc <HAL_RCCEx_PeriphCLKConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001072:	f000 f90b 	bl	800128c <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3750      	adds	r7, #80	; 0x50
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_ADC1_Init+0x74>)
 8001092:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <MX_ADC1_Init+0x78>)
 8001094:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_ADC1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_ADC1_Init+0x74>)
 800109e:	2201      	movs	r2, #1
 80010a0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_ADC1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_ADC1_Init+0x74>)
 80010aa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MX_ADC1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_ADC1_Init+0x74>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_ADC1_Init+0x74>)
 80010be:	f000 fb33 	bl	8001728 <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010c8:	f000 f8e0 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d0:	2301      	movs	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_ADC1_Init+0x74>)
 80010de:	f000 fdbb 	bl	8001c58 <HAL_ADC_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010e8:	f000 f8d0 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000019c 	.word	0x2000019c
 80010f8:	40012400 	.word	0x40012400

080010fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <MX_ADC2_Init+0x74>)
 800110e:	4a19      	ldr	r2, [pc, #100]	; (8001174 <MX_ADC2_Init+0x78>)
 8001110:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_ADC2_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_ADC2_Init+0x74>)
 800111a:	2201      	movs	r2, #1
 800111c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_ADC2_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_ADC2_Init+0x74>)
 8001126:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800112a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_ADC2_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_ADC2_Init+0x74>)
 8001134:	2201      	movs	r2, #1
 8001136:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_ADC2_Init+0x74>)
 800113a:	f000 faf5 	bl	8001728 <HAL_ADC_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001144:	f000 f8a2 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001148:	2302      	movs	r3, #2
 800114a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800114c:	2301      	movs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_ADC2_Init+0x74>)
 800115a:	f000 fd7d 	bl	8001c58 <HAL_ADC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001164:	f000 f892 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200001cc 	.word	0x200001cc
 8001174:	40012800 	.word	0x40012800

08001178 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_I2C1_Init+0x50>)
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <MX_I2C1_Init+0x54>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_I2C1_Init+0x58>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011b6:	f001 f975 	bl	80024a4 <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c0:	f000 f864 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200001fc 	.word	0x200001fc
 80011cc:	40005400 	.word	0x40005400
 80011d0:	000186a0 	.word	0x000186a0

080011d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_I2C2_Init+0x50>)
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <MX_I2C2_Init+0x54>)
 80011dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_I2C2_Init+0x50>)
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_I2C2_Init+0x58>)
 80011e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_I2C2_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_I2C2_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_I2C2_Init+0x50>)
 80011f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_I2C2_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_I2C2_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_I2C2_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_I2C2_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_I2C2_Init+0x50>)
 8001212:	f001 f947 	bl	80024a4 <HAL_I2C_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800121c:	f000 f836 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000250 	.word	0x20000250
 8001228:	40005800 	.word	0x40005800
 800122c:	000186a0 	.word	0x000186a0

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_GPIO_Init+0x58>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <MX_GPIO_Init+0x58>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	6193      	str	r3, [r2, #24]
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_GPIO_Init+0x58>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_GPIO_Init+0x58>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <MX_GPIO_Init+0x58>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_GPIO_Init+0x58>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_GPIO_Init+0x58>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <MX_GPIO_Init+0x58>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6193      	str	r3, [r2, #24]
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <MX_GPIO_Init+0x58>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	40021000 	.word	0x40021000

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>
	...

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_MspInit+0x5c>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <HAL_MspInit+0x5c>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6193      	str	r3, [r2, #24]
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_MspInit+0x5c>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <HAL_MspInit+0x5c>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_MspInit+0x5c>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_MspInit+0x5c>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_MspInit+0x60>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_MspInit+0x60>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010000 	.word	0x40010000

080012fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <HAL_ADC_MspInit+0xbc>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d122      	bne.n	8001362 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <HAL_ADC_MspInit+0xc0>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a26      	ldr	r2, [pc, #152]	; (80013bc <HAL_ADC_MspInit+0xc0>)
 8001322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_ADC_MspInit+0xc0>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <HAL_ADC_MspInit+0xc0>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a20      	ldr	r2, [pc, #128]	; (80013bc <HAL_ADC_MspInit+0xc0>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_ADC_MspInit+0xc0>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	4619      	mov	r1, r3
 800135a:	4819      	ldr	r0, [pc, #100]	; (80013c0 <HAL_ADC_MspInit+0xc4>)
 800135c:	f000 ff1e 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001360:	e026      	b.n	80013b0 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_ADC_MspInit+0xc8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d121      	bne.n	80013b0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <HAL_ADC_MspInit+0xc0>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a12      	ldr	r2, [pc, #72]	; (80013bc <HAL_ADC_MspInit+0xc0>)
 8001372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_ADC_MspInit+0xc0>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_ADC_MspInit+0xc0>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <HAL_ADC_MspInit+0xc0>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_ADC_MspInit+0xc0>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800139c:	2304      	movs	r3, #4
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a0:	2303      	movs	r3, #3
 80013a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_ADC_MspInit+0xc4>)
 80013ac:	f000 fef6 	bl	800219c <HAL_GPIO_Init>
}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40012400 	.word	0x40012400
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010800 	.word	0x40010800
 80013c4:	40012800 	.word	0x40012800

080013c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0318 	add.w	r3, r7, #24
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a2b      	ldr	r2, [pc, #172]	; (8001490 <HAL_I2C_MspInit+0xc8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d124      	bne.n	8001432 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a29      	ldr	r2, [pc, #164]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001400:	23c0      	movs	r3, #192	; 0xc0
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001404:	2312      	movs	r3, #18
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	4619      	mov	r1, r3
 8001412:	4821      	ldr	r0, [pc, #132]	; (8001498 <HAL_I2C_MspInit+0xd0>)
 8001414:	f000 fec2 	bl	800219c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 800141e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001422:	61d3      	str	r3, [r2, #28]
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001430:	e029      	b.n	8001486 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a19      	ldr	r2, [pc, #100]	; (800149c <HAL_I2C_MspInit+0xd4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d124      	bne.n	8001486 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001454:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145a:	2312      	movs	r3, #18
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	4619      	mov	r1, r3
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <HAL_I2C_MspInit+0xd0>)
 800146a:	f000 fe97 	bl	800219c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 8001474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40005400 	.word	0x40005400
 8001494:	40021000 	.word	0x40021000
 8001498:	40010c00 	.word	0x40010c00
 800149c:	40005800 	.word	0x40005800

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e6:	f000 f903 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80014f6:	f001 ff35 	bl	8003364 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000f64 	.word	0x20000f64

08001504 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	; (8001554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001536:	f7ff ffe5 	bl	8001504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f008 fdb7 	bl	800a0ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153e:	f7ff fc53 	bl	8000de8 <main>
  bx lr
 8001542:	4770      	bx	lr
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800154c:	0800a1a4 	.word	0x0800a1a4
  ldr r2, =_sbss
 8001550:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001554:	20001470 	.word	0x20001470

08001558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_2_IRQHandler>

0800155a <SFM3300_Read_Current>:

    HAL_Delay (100);
}

void SFM3300_Read_Current(I2C_HandleTypeDef *I2Cx, uint8_t* data)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af04      	add	r7, sp, #16
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Read(I2Cx, SFM3300_ADDR, 0x1000, 2, data, 3, i2c_timeout);
 8001564:	2364      	movs	r3, #100	; 0x64
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2303      	movs	r3, #3
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2302      	movs	r3, #2
 8001572:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f001 f8d7 	bl	800272c <HAL_I2C_Mem_Read>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <SMF3300_CheckCrc>:
//              nbrOfBytes  checksum is built for n bytes of data
//              checksum    expected checksum
// Return:      error:      CHECKSUM_ERROR = checksum does not match
//                          0 = checksum matches
//=============================================================================
{
 8001586:	b480      	push	{r7}
 8001588:	b085      	sub	sp, #20
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	70fb      	strb	r3, [r7, #3]
 8001592:	4613      	mov	r3, r2
 8001594:	70bb      	strb	r3, [r7, #2]
  uint8_t crc = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
  uint8_t byteCtr;
  // Calculates 8-Bit checksum with given polynomial
  for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr) {
 800159a:	2300      	movs	r3, #0
 800159c:	73bb      	strb	r3, [r7, #14]
 800159e:	e021      	b.n	80015e4 <SMF3300_CheckCrc+0x5e>
    crc ^= (data[byteCtr]);
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	4053      	eors	r3, r2
 80015ac:	73fb      	strb	r3, [r7, #15]
    for (uint8_t bit = 8; bit > 0; --bit) {
 80015ae:	2308      	movs	r3, #8
 80015b0:	737b      	strb	r3, [r7, #13]
 80015b2:	e011      	b.n	80015d8 <SMF3300_CheckCrc+0x52>
      if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
 80015b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da07      	bge.n	80015cc <SMF3300_CheckCrc+0x46>
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e002      	b.n	80015d2 <SMF3300_CheckCrc+0x4c>
      else crc = (crc << 1);
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
    for (uint8_t bit = 8; bit > 0; --bit) {
 80015d2:	7b7b      	ldrb	r3, [r7, #13]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	737b      	strb	r3, [r7, #13]
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1ea      	bne.n	80015b4 <SMF3300_CheckCrc+0x2e>
  for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr) {
 80015de:	7bbb      	ldrb	r3, [r7, #14]
 80015e0:	3301      	adds	r3, #1
 80015e2:	73bb      	strb	r3, [r7, #14]
 80015e4:	7bba      	ldrb	r2, [r7, #14]
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d3d9      	bcc.n	80015a0 <SMF3300_CheckCrc+0x1a>
    }
  }
  if (crc != checksum)
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	78bb      	ldrb	r3, [r7, #2]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <SMF3300_CheckCrc+0x72>
    return CHECKSUM_ERROR;
 80015f4:	2304      	movs	r3, #4
 80015f6:	e000      	b.n	80015fa <SMF3300_CheckCrc+0x74>
  else
    return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <SFM3300_ConvertRawData_to_FlowValue>:

double SFM3300_ConvertRawData_to_FlowValue(uint8_t data[])
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	double airFlow;

	uint16_t rawData = (uint16_t)(data[0] << 8) | (uint16_t)data[1];
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b29a      	uxth	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3301      	adds	r3, #1
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	82fb      	strh	r3, [r7, #22]

	airFlow = ((double)rawData - SFM3300_offSet) / SFM3300_scaleFactor;
 8001622:	8afb      	ldrh	r3, [r7, #22]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe fed5 	bl	80003d4 <__aeabi_ui2d>
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <SFM3300_ConvertRawData_to_FlowValue+0x58>)
 8001630:	f7fe fd92 	bl	8000158 <__aeabi_dsub>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <SFM3300_ConvertRawData_to_FlowValue+0x5c>)
 8001642:	f7ff f86b 	bl	800071c <__aeabi_ddiv>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return airFlow;
 800164e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40e00000 	.word	0x40e00000
 8001660:	405e0000 	.word	0x405e0000

08001664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_Init+0x28>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a07      	ldr	r2, [pc, #28]	; (800168c <HAL_Init+0x28>)
 800166e:	f043 0310 	orr.w	r3, r3, #16
 8001672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001674:	2003      	movs	r0, #3
 8001676:	f000 fd4f 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167a:	200f      	movs	r0, #15
 800167c:	f000 f808 	bl	8001690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001680:	f7ff fe0a 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40022000 	.word	0x40022000

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x54>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x58>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fd67 	bl	8002182 <HAL_SYSTICK_Config>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00e      	b.n	80016dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d80a      	bhi.n	80016da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016cc:	f000 fd2f 	bl	800212e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d0:	4a06      	ldr	r2, [pc, #24]	; (80016ec <HAL_InitTick+0x5c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_IncTick+0x1c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_IncTick+0x20>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	4a03      	ldr	r2, [pc, #12]	; (8001710 <HAL_IncTick+0x20>)
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	20000008 	.word	0x20000008
 8001710:	200002c8 	.word	0x200002c8

08001714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b02      	ldr	r3, [pc, #8]	; (8001724 <HAL_GetTick+0x10>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	200002c8 	.word	0x200002c8

08001728 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0be      	b.n	80018c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fdc8 	bl	80012fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 fbc5 	bl	8001efc <ADC_ConversionStop_Disable>
 8001772:	4603      	mov	r3, r0
 8001774:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 8099 	bne.w	80018b6 <HAL_ADC_Init+0x18e>
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 8095 	bne.w	80018b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001794:	f023 0302 	bic.w	r3, r3, #2
 8001798:	f043 0202 	orr.w	r2, r3, #2
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7b1b      	ldrb	r3, [r3, #12]
 80017ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017c0:	d003      	beq.n	80017ca <HAL_ADC_Init+0xa2>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d102      	bne.n	80017d0 <HAL_ADC_Init+0xa8>
 80017ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ce:	e000      	b.n	80017d2 <HAL_ADC_Init+0xaa>
 80017d0:	2300      	movs	r3, #0
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7d1b      	ldrb	r3, [r3, #20]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d119      	bne.n	8001814 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7b1b      	ldrb	r3, [r3, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d109      	bne.n	80017fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	035a      	lsls	r2, r3, #13
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	e00b      	b.n	8001814 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	f043 0220 	orr.w	r2, r3, #32
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	f043 0201 	orr.w	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	430a      	orrs	r2, r1
 8001826:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <HAL_ADC_Init+0x1a8>)
 8001830:	4013      	ands	r3, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	430b      	orrs	r3, r1
 800183a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001844:	d003      	beq.n	800184e <HAL_ADC_Init+0x126>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d104      	bne.n	8001858 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	3b01      	subs	r3, #1
 8001854:	051b      	lsls	r3, r3, #20
 8001856:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	430a      	orrs	r2, r1
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_ADC_Init+0x1ac>)
 8001874:	4013      	ands	r3, r2
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	d10b      	bne.n	8001894 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	f023 0303 	bic.w	r3, r3, #3
 800188a:	f043 0201 	orr.w	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001892:	e018      	b.n	80018c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	f023 0312 	bic.w	r3, r3, #18
 800189c:	f043 0210 	orr.w	r2, r3, #16
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	f043 0201 	orr.w	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018b4:	e007      	b.n	80018c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	f043 0210 	orr.w	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	ffe1f7fd 	.word	0xffe1f7fd
 80018d4:	ff1f0efe 	.word	0xff1f0efe

080018d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Start+0x1a>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e098      	b.n	8001a24 <HAL_ADC_Start+0x14c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 faa4 	bl	8001e48 <ADC_Enable>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 8087 	bne.w	8001a1a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a41      	ldr	r2, [pc, #260]	; (8001a2c <HAL_ADC_Start+0x154>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d105      	bne.n	8001936 <HAL_ADC_Start+0x5e>
 800192a:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_ADC_Start+0x158>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d115      	bne.n	8001962 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194c:	2b00      	cmp	r3, #0
 800194e:	d026      	beq.n	800199e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001958:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001960:	e01d      	b.n	800199e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <HAL_ADC_Start+0x158>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d004      	beq.n	8001982 <HAL_ADC_Start+0xaa>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a2b      	ldr	r2, [pc, #172]	; (8001a2c <HAL_ADC_Start+0x154>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10d      	bne.n	800199e <HAL_ADC_Start+0xc6>
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <HAL_ADC_Start+0x158>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001996:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	f023 0206 	bic.w	r2, r3, #6
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019b6:	e002      	b.n	80019be <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f06f 0202 	mvn.w	r2, #2
 80019ce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019de:	d113      	bne.n	8001a08 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019e4:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <HAL_ADC_Start+0x154>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d105      	bne.n	80019f6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_ADC_Start+0x158>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d108      	bne.n	8001a08 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	e00c      	b.n	8001a22 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	e003      	b.n	8001a22 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40012800 	.word	0x40012800
 8001a30:	40012400 	.word	0x40012400

08001a34 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a4a:	f7ff fe63 	bl	8001714 <HAL_GetTick>
 8001a4e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	f043 0220 	orr.w	r2, r3, #32
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0d3      	b.n	8001c1e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d131      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d12a      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a92:	e021      	b.n	8001ad8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a9a:	d01d      	beq.n	8001ad8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_ADC_PollForConversion+0x7e>
 8001aa2:	f7ff fe37 	bl	8001714 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d212      	bcs.n	8001ad8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10b      	bne.n	8001ad8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f043 0204 	orr.w	r2, r3, #4
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0a2      	b.n	8001c1e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0d6      	beq.n	8001a94 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ae6:	e070      	b.n	8001bca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ae8:	4b4f      	ldr	r3, [pc, #316]	; (8001c28 <HAL_ADC_PollForConversion+0x1f4>)
 8001aea:	681c      	ldr	r4, [r3, #0]
 8001aec:	2002      	movs	r0, #2
 8001aee:	f003 fc9b 	bl	8005428 <HAL_RCCEx_GetPeriphCLKFreq>
 8001af2:	4603      	mov	r3, r0
 8001af4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6919      	ldr	r1, [r3, #16]
 8001afe:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <HAL_ADC_PollForConversion+0x1f8>)
 8001b00:	400b      	ands	r3, r1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d118      	bne.n	8001b38 <HAL_ADC_PollForConversion+0x104>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68d9      	ldr	r1, [r3, #12]
 8001b0c:	4b48      	ldr	r3, [pc, #288]	; (8001c30 <HAL_ADC_PollForConversion+0x1fc>)
 8001b0e:	400b      	ands	r3, r1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d111      	bne.n	8001b38 <HAL_ADC_PollForConversion+0x104>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6919      	ldr	r1, [r3, #16]
 8001b1a:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <HAL_ADC_PollForConversion+0x200>)
 8001b1c:	400b      	ands	r3, r1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d108      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x100>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68d9      	ldr	r1, [r3, #12]
 8001b28:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <HAL_ADC_PollForConversion+0x204>)
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x100>
 8001b30:	2314      	movs	r3, #20
 8001b32:	e020      	b.n	8001b76 <HAL_ADC_PollForConversion+0x142>
 8001b34:	2329      	movs	r3, #41	; 0x29
 8001b36:	e01e      	b.n	8001b76 <HAL_ADC_PollForConversion+0x142>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6919      	ldr	r1, [r3, #16]
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <HAL_ADC_PollForConversion+0x200>)
 8001b40:	400b      	ands	r3, r1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_ADC_PollForConversion+0x120>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68d9      	ldr	r1, [r3, #12]
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <HAL_ADC_PollForConversion+0x204>)
 8001b4e:	400b      	ands	r3, r1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00d      	beq.n	8001b70 <HAL_ADC_PollForConversion+0x13c>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6919      	ldr	r1, [r3, #16]
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_ADC_PollForConversion+0x208>)
 8001b5c:	400b      	ands	r3, r1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d108      	bne.n	8001b74 <HAL_ADC_PollForConversion+0x140>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68d9      	ldr	r1, [r3, #12]
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <HAL_ADC_PollForConversion+0x208>)
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_PollForConversion+0x140>
 8001b70:	2354      	movs	r3, #84	; 0x54
 8001b72:	e000      	b.n	8001b76 <HAL_ADC_PollForConversion+0x142>
 8001b74:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b7c:	e021      	b.n	8001bc2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b84:	d01a      	beq.n	8001bbc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_ADC_PollForConversion+0x168>
 8001b8c:	f7ff fdc2 	bl	8001714 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d20f      	bcs.n	8001bbc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d90b      	bls.n	8001bbc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	f043 0204 	orr.w	r2, r3, #4
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e030      	b.n	8001c1e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d8d9      	bhi.n	8001b7e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0212 	mvn.w	r2, #18
 8001bd2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bee:	d115      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d111      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d105      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd90      	pop	{r4, r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	24924924 	.word	0x24924924
 8001c30:	00924924 	.word	0x00924924
 8001c34:	12492492 	.word	0x12492492
 8001c38:	00492492 	.word	0x00492492
 8001c3c:	00249249 	.word	0x00249249

08001c40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x20>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e0dc      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x1da>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b06      	cmp	r3, #6
 8001c86:	d81c      	bhi.n	8001cc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b05      	subs	r3, #5
 8001c9a:	221f      	movs	r2, #31
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	4019      	ands	r1, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3b05      	subs	r3, #5
 8001cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001cc0:	e03c      	b.n	8001d3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d81c      	bhi.n	8001d04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b23      	subs	r3, #35	; 0x23
 8001cdc:	221f      	movs	r2, #31
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4019      	ands	r1, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b23      	subs	r3, #35	; 0x23
 8001cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	631a      	str	r2, [r3, #48]	; 0x30
 8001d02:	e01b      	b.n	8001d3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	3b41      	subs	r3, #65	; 0x41
 8001d16:	221f      	movs	r2, #31
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4019      	ands	r1, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3b41      	subs	r3, #65	; 0x41
 8001d30:	fa00 f203 	lsl.w	r2, r0, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	d91c      	bls.n	8001d7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68d9      	ldr	r1, [r3, #12]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	3b1e      	subs	r3, #30
 8001d56:	2207      	movs	r2, #7
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4019      	ands	r1, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6898      	ldr	r0, [r3, #8]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3b1e      	subs	r3, #30
 8001d70:	fa00 f203 	lsl.w	r2, r0, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	e019      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6919      	ldr	r1, [r3, #16]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	2207      	movs	r2, #7
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4019      	ands	r1, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6898      	ldr	r0, [r3, #8]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	fa00 f203 	lsl.w	r2, r0, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d003      	beq.n	8001dc2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dbe:	2b11      	cmp	r3, #17
 8001dc0:	d132      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d125      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d126      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001de8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d11a      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <HAL_ADC_ConfigChannel+0x1ec>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	0c9a      	lsrs	r2, r3, #18
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e08:	e002      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f9      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x1b2>
 8001e16:	e007      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40012400 	.word	0x40012400
 8001e40:	20000000 	.word	0x20000000
 8001e44:	431bde83 	.word	0x431bde83

08001e48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d040      	beq.n	8001ee8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e76:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <ADC_Enable+0xac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <ADC_Enable+0xb0>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	0c9b      	lsrs	r3, r3, #18
 8001e82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e84:	e002      	b.n	8001e8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f9      	bne.n	8001e86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e92:	f7ff fc3f 	bl	8001714 <HAL_GetTick>
 8001e96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e98:	e01f      	b.n	8001eda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e9a:	f7ff fc3b 	bl	8001714 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d918      	bls.n	8001eda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d011      	beq.n	8001eda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	f043 0210 	orr.w	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e007      	b.n	8001eea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d1d8      	bne.n	8001e9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	431bde83 	.word	0x431bde83

08001efc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d12e      	bne.n	8001f74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0201 	bic.w	r2, r2, #1
 8001f24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f26:	f7ff fbf5 	bl	8001714 <HAL_GetTick>
 8001f2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f2c:	e01b      	b.n	8001f66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f2e:	f7ff fbf1 	bl	8001714 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d914      	bls.n	8001f66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d10d      	bne.n	8001f66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e007      	b.n	8001f76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d0dc      	beq.n	8001f2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	db0b      	blt.n	800200e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f003 021f 	and.w	r2, r3, #31
 8001ffc:	4906      	ldr	r1, [pc, #24]	; (8002018 <__NVIC_EnableIRQ+0x34>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2001      	movs	r0, #1
 8002006:	fa00 f202 	lsl.w	r2, r0, r2
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	; (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	; (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f8:	f7ff ff90 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	; (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff2d 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff42 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff90 	bl	8002070 <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5f 	bl	800201c <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff35 	bl	8001fe4 <__NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffa2 	bl	80020d4 <SysTick_Config>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b08b      	sub	sp, #44	; 0x2c
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	e169      	b.n	8002484 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021b0:	2201      	movs	r2, #1
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	f040 8158 	bne.w	800247e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4a9a      	ldr	r2, [pc, #616]	; (800243c <HAL_GPIO_Init+0x2a0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d05e      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 80021d8:	4a98      	ldr	r2, [pc, #608]	; (800243c <HAL_GPIO_Init+0x2a0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d875      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 80021de:	4a98      	ldr	r2, [pc, #608]	; (8002440 <HAL_GPIO_Init+0x2a4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d058      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 80021e4:	4a96      	ldr	r2, [pc, #600]	; (8002440 <HAL_GPIO_Init+0x2a4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d86f      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 80021ea:	4a96      	ldr	r2, [pc, #600]	; (8002444 <HAL_GPIO_Init+0x2a8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d052      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 80021f0:	4a94      	ldr	r2, [pc, #592]	; (8002444 <HAL_GPIO_Init+0x2a8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d869      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 80021f6:	4a94      	ldr	r2, [pc, #592]	; (8002448 <HAL_GPIO_Init+0x2ac>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d04c      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 80021fc:	4a92      	ldr	r2, [pc, #584]	; (8002448 <HAL_GPIO_Init+0x2ac>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d863      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 8002202:	4a92      	ldr	r2, [pc, #584]	; (800244c <HAL_GPIO_Init+0x2b0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d046      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 8002208:	4a90      	ldr	r2, [pc, #576]	; (800244c <HAL_GPIO_Init+0x2b0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d85d      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 800220e:	2b12      	cmp	r3, #18
 8002210:	d82a      	bhi.n	8002268 <HAL_GPIO_Init+0xcc>
 8002212:	2b12      	cmp	r3, #18
 8002214:	d859      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 8002216:	a201      	add	r2, pc, #4	; (adr r2, 800221c <HAL_GPIO_Init+0x80>)
 8002218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221c:	08002297 	.word	0x08002297
 8002220:	08002271 	.word	0x08002271
 8002224:	08002283 	.word	0x08002283
 8002228:	080022c5 	.word	0x080022c5
 800222c:	080022cb 	.word	0x080022cb
 8002230:	080022cb 	.word	0x080022cb
 8002234:	080022cb 	.word	0x080022cb
 8002238:	080022cb 	.word	0x080022cb
 800223c:	080022cb 	.word	0x080022cb
 8002240:	080022cb 	.word	0x080022cb
 8002244:	080022cb 	.word	0x080022cb
 8002248:	080022cb 	.word	0x080022cb
 800224c:	080022cb 	.word	0x080022cb
 8002250:	080022cb 	.word	0x080022cb
 8002254:	080022cb 	.word	0x080022cb
 8002258:	080022cb 	.word	0x080022cb
 800225c:	080022cb 	.word	0x080022cb
 8002260:	08002279 	.word	0x08002279
 8002264:	0800228d 	.word	0x0800228d
 8002268:	4a79      	ldr	r2, [pc, #484]	; (8002450 <HAL_GPIO_Init+0x2b4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800226e:	e02c      	b.n	80022ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	623b      	str	r3, [r7, #32]
          break;
 8002276:	e029      	b.n	80022cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	3304      	adds	r3, #4
 800227e:	623b      	str	r3, [r7, #32]
          break;
 8002280:	e024      	b.n	80022cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	3308      	adds	r3, #8
 8002288:	623b      	str	r3, [r7, #32]
          break;
 800228a:	e01f      	b.n	80022cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	330c      	adds	r3, #12
 8002292:	623b      	str	r3, [r7, #32]
          break;
 8002294:	e01a      	b.n	80022cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800229e:	2304      	movs	r3, #4
 80022a0:	623b      	str	r3, [r7, #32]
          break;
 80022a2:	e013      	b.n	80022cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022ac:	2308      	movs	r3, #8
 80022ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	611a      	str	r2, [r3, #16]
          break;
 80022b6:	e009      	b.n	80022cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b8:	2308      	movs	r3, #8
 80022ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	615a      	str	r2, [r3, #20]
          break;
 80022c2:	e003      	b.n	80022cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
          break;
 80022c8:	e000      	b.n	80022cc <HAL_GPIO_Init+0x130>
          break;
 80022ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2bff      	cmp	r3, #255	; 0xff
 80022d0:	d801      	bhi.n	80022d6 <HAL_GPIO_Init+0x13a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	e001      	b.n	80022da <HAL_GPIO_Init+0x13e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3304      	adds	r3, #4
 80022da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2bff      	cmp	r3, #255	; 0xff
 80022e0:	d802      	bhi.n	80022e8 <HAL_GPIO_Init+0x14c>
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	e002      	b.n	80022ee <HAL_GPIO_Init+0x152>
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	3b08      	subs	r3, #8
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	210f      	movs	r1, #15
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	401a      	ands	r2, r3
 8002300:	6a39      	ldr	r1, [r7, #32]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	431a      	orrs	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80b1 	beq.w	800247e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800231c:	4b4d      	ldr	r3, [pc, #308]	; (8002454 <HAL_GPIO_Init+0x2b8>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a4c      	ldr	r2, [pc, #304]	; (8002454 <HAL_GPIO_Init+0x2b8>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b4a      	ldr	r3, [pc, #296]	; (8002454 <HAL_GPIO_Init+0x2b8>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002334:	4a48      	ldr	r2, [pc, #288]	; (8002458 <HAL_GPIO_Init+0x2bc>)
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	3302      	adds	r3, #2
 800233c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002340:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4013      	ands	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a40      	ldr	r2, [pc, #256]	; (800245c <HAL_GPIO_Init+0x2c0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <HAL_GPIO_Init+0x1ec>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3f      	ldr	r2, [pc, #252]	; (8002460 <HAL_GPIO_Init+0x2c4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00d      	beq.n	8002384 <HAL_GPIO_Init+0x1e8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3e      	ldr	r2, [pc, #248]	; (8002464 <HAL_GPIO_Init+0x2c8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d007      	beq.n	8002380 <HAL_GPIO_Init+0x1e4>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3d      	ldr	r2, [pc, #244]	; (8002468 <HAL_GPIO_Init+0x2cc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_GPIO_Init+0x1e0>
 8002378:	2303      	movs	r3, #3
 800237a:	e006      	b.n	800238a <HAL_GPIO_Init+0x1ee>
 800237c:	2304      	movs	r3, #4
 800237e:	e004      	b.n	800238a <HAL_GPIO_Init+0x1ee>
 8002380:	2302      	movs	r3, #2
 8002382:	e002      	b.n	800238a <HAL_GPIO_Init+0x1ee>
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_GPIO_Init+0x1ee>
 8002388:	2300      	movs	r3, #0
 800238a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238c:	f002 0203 	and.w	r2, r2, #3
 8002390:	0092      	lsls	r2, r2, #2
 8002392:	4093      	lsls	r3, r2
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800239a:	492f      	ldr	r1, [pc, #188]	; (8002458 <HAL_GPIO_Init+0x2bc>)
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	492c      	ldr	r1, [pc, #176]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023c2:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	4928      	ldr	r1, [pc, #160]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d006      	beq.n	80023ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	4922      	ldr	r1, [pc, #136]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	491e      	ldr	r1, [pc, #120]	; (800246c <HAL_GPIO_Init+0x2d0>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d006      	beq.n	8002412 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_GPIO_Init+0x2d0>)
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	4918      	ldr	r1, [pc, #96]	; (800246c <HAL_GPIO_Init+0x2d0>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_GPIO_Init+0x2d0>)
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	43db      	mvns	r3, r3
 800241a:	4914      	ldr	r1, [pc, #80]	; (800246c <HAL_GPIO_Init+0x2d0>)
 800241c:	4013      	ands	r3, r2
 800241e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d021      	beq.n	8002470 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <HAL_GPIO_Init+0x2d0>)
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	490e      	ldr	r1, [pc, #56]	; (800246c <HAL_GPIO_Init+0x2d0>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	60cb      	str	r3, [r1, #12]
 8002438:	e021      	b.n	800247e <HAL_GPIO_Init+0x2e2>
 800243a:	bf00      	nop
 800243c:	10320000 	.word	0x10320000
 8002440:	10310000 	.word	0x10310000
 8002444:	10220000 	.word	0x10220000
 8002448:	10210000 	.word	0x10210000
 800244c:	10120000 	.word	0x10120000
 8002450:	10110000 	.word	0x10110000
 8002454:	40021000 	.word	0x40021000
 8002458:	40010000 	.word	0x40010000
 800245c:	40010800 	.word	0x40010800
 8002460:	40010c00 	.word	0x40010c00
 8002464:	40011000 	.word	0x40011000
 8002468:	40011400 	.word	0x40011400
 800246c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_GPIO_Init+0x304>)
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	43db      	mvns	r3, r3
 8002478:	4909      	ldr	r1, [pc, #36]	; (80024a0 <HAL_GPIO_Init+0x304>)
 800247a:	4013      	ands	r3, r2
 800247c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	3301      	adds	r3, #1
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	f47f ae8e 	bne.w	80021b0 <HAL_GPIO_Init+0x14>
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	372c      	adds	r7, #44	; 0x2c
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40010400 	.word	0x40010400

080024a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e12b      	b.n	800270e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe ff7c 	bl	80013c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2224      	movs	r2, #36	; 0x24
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002506:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002508:	f002 fe92 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 800250c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4a81      	ldr	r2, [pc, #516]	; (8002718 <HAL_I2C_Init+0x274>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d807      	bhi.n	8002528 <HAL_I2C_Init+0x84>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4a80      	ldr	r2, [pc, #512]	; (800271c <HAL_I2C_Init+0x278>)
 800251c:	4293      	cmp	r3, r2
 800251e:	bf94      	ite	ls
 8002520:	2301      	movls	r3, #1
 8002522:	2300      	movhi	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e006      	b.n	8002536 <HAL_I2C_Init+0x92>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4a7d      	ldr	r2, [pc, #500]	; (8002720 <HAL_I2C_Init+0x27c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	bf94      	ite	ls
 8002530:	2301      	movls	r3, #1
 8002532:	2300      	movhi	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0e7      	b.n	800270e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a78      	ldr	r2, [pc, #480]	; (8002724 <HAL_I2C_Init+0x280>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	0c9b      	lsrs	r3, r3, #18
 8002548:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a6a      	ldr	r2, [pc, #424]	; (8002718 <HAL_I2C_Init+0x274>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d802      	bhi.n	8002578 <HAL_I2C_Init+0xd4>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	3301      	adds	r3, #1
 8002576:	e009      	b.n	800258c <HAL_I2C_Init+0xe8>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	4a69      	ldr	r2, [pc, #420]	; (8002728 <HAL_I2C_Init+0x284>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	099b      	lsrs	r3, r3, #6
 800258a:	3301      	adds	r3, #1
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	430b      	orrs	r3, r1
 8002592:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800259e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	495c      	ldr	r1, [pc, #368]	; (8002718 <HAL_I2C_Init+0x274>)
 80025a8:	428b      	cmp	r3, r1
 80025aa:	d819      	bhi.n	80025e0 <HAL_I2C_Init+0x13c>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e59      	subs	r1, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ba:	1c59      	adds	r1, r3, #1
 80025bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025c0:	400b      	ands	r3, r1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_I2C_Init+0x138>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1e59      	subs	r1, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d4:	3301      	adds	r3, #1
 80025d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025da:	e051      	b.n	8002680 <HAL_I2C_Init+0x1dc>
 80025dc:	2304      	movs	r3, #4
 80025de:	e04f      	b.n	8002680 <HAL_I2C_Init+0x1dc>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d111      	bne.n	800260c <HAL_I2C_Init+0x168>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e58      	subs	r0, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	440b      	add	r3, r1
 80025f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fa:	3301      	adds	r3, #1
 80025fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	e012      	b.n	8002632 <HAL_I2C_Init+0x18e>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e58      	subs	r0, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	0099      	lsls	r1, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_Init+0x196>
 8002636:	2301      	movs	r3, #1
 8002638:	e022      	b.n	8002680 <HAL_I2C_Init+0x1dc>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10e      	bne.n	8002660 <HAL_I2C_Init+0x1bc>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1e58      	subs	r0, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	460b      	mov	r3, r1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	440b      	add	r3, r1
 8002650:	fbb0 f3f3 	udiv	r3, r0, r3
 8002654:	3301      	adds	r3, #1
 8002656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265e:	e00f      	b.n	8002680 <HAL_I2C_Init+0x1dc>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	0099      	lsls	r1, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	6809      	ldr	r1, [r1, #0]
 8002684:	4313      	orrs	r3, r2
 8002686:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6911      	ldr	r1, [r2, #16]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68d2      	ldr	r2, [r2, #12]
 80026ba:	4311      	orrs	r1, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	430b      	orrs	r3, r1
 80026c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	000186a0 	.word	0x000186a0
 800271c:	001e847f 	.word	0x001e847f
 8002720:	003d08ff 	.word	0x003d08ff
 8002724:	431bde83 	.word	0x431bde83
 8002728:	10624dd3 	.word	0x10624dd3

0800272c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	; 0x30
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	4608      	mov	r0, r1
 8002736:	4611      	mov	r1, r2
 8002738:	461a      	mov	r2, r3
 800273a:	4603      	mov	r3, r0
 800273c:	817b      	strh	r3, [r7, #10]
 800273e:	460b      	mov	r3, r1
 8002740:	813b      	strh	r3, [r7, #8]
 8002742:	4613      	mov	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800274a:	f7fe ffe3 	bl	8001714 <HAL_GetTick>
 800274e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b20      	cmp	r3, #32
 800275a:	f040 8244 	bne.w	8002be6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	2319      	movs	r3, #25
 8002764:	2201      	movs	r2, #1
 8002766:	4982      	ldr	r1, [pc, #520]	; (8002970 <HAL_I2C_Mem_Read+0x244>)
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fb2f 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002774:	2302      	movs	r3, #2
 8002776:	e237      	b.n	8002be8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_I2C_Mem_Read+0x5a>
 8002782:	2302      	movs	r3, #2
 8002784:	e230      	b.n	8002be8 <HAL_I2C_Mem_Read+0x4bc>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d007      	beq.n	80027ac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2222      	movs	r2, #34	; 0x22
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2240      	movs	r2, #64	; 0x40
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80027dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a62      	ldr	r2, [pc, #392]	; (8002974 <HAL_I2C_Mem_Read+0x248>)
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ee:	88f8      	ldrh	r0, [r7, #6]
 80027f0:	893a      	ldrh	r2, [r7, #8]
 80027f2:	8979      	ldrh	r1, [r7, #10]
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	4603      	mov	r3, r0
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f9fc 	bl	8002bfc <I2C_RequestMemoryRead>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e1ec      	b.n	8002be8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002812:	2b00      	cmp	r3, #0
 8002814:	d113      	bne.n	800283e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e1c0      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002842:	2b01      	cmp	r3, #1
 8002844:	d11e      	bne.n	8002884 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002854:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002856:	b672      	cpsid	i
}
 8002858:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002880:	b662      	cpsie	i
}
 8002882:	e035      	b.n	80028f0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	2b02      	cmp	r3, #2
 800288a:	d11e      	bne.n	80028ca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800289a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800289c:	b672      	cpsid	i
}
 800289e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028c6:	b662      	cpsie	i
}
 80028c8:	e012      	b.n	80028f0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028d8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80028f0:	e166      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	f200 811f 	bhi.w	8002b3a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	2b01      	cmp	r3, #1
 8002902:	d123      	bne.n	800294c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002906:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fb76 	bl	8002ffa <I2C_WaitOnRXNEFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e167      	b.n	8002be8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	855a      	strh	r2, [r3, #42]	; 0x2a
 800294a:	e139      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	2b02      	cmp	r3, #2
 8002952:	d152      	bne.n	80029fa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295a:	2200      	movs	r2, #0
 800295c:	4906      	ldr	r1, [pc, #24]	; (8002978 <HAL_I2C_Mem_Read+0x24c>)
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fa34 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e13c      	b.n	8002be8 <HAL_I2C_Mem_Read+0x4bc>
 800296e:	bf00      	nop
 8002970:	00100002 	.word	0x00100002
 8002974:	ffff0000 	.word	0xffff0000
 8002978:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800297c:	b672      	cpsid	i
}
 800297e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029c2:	b662      	cpsie	i
}
 80029c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029f8:	e0e2      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a00:	2200      	movs	r2, #0
 8002a02:	497b      	ldr	r1, [pc, #492]	; (8002bf0 <HAL_I2C_Mem_Read+0x4c4>)
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f9e1 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0e9      	b.n	8002be8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a24:	b672      	cpsid	i
}
 8002a26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a5a:	4b66      	ldr	r3, [pc, #408]	; (8002bf4 <HAL_I2C_Mem_Read+0x4c8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	08db      	lsrs	r3, r3, #3
 8002a60:	4a65      	ldr	r2, [pc, #404]	; (8002bf8 <HAL_I2C_Mem_Read+0x4cc>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0a1a      	lsrs	r2, r3, #8
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00da      	lsls	r2, r3, #3
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d118      	bne.n	8002ab2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f043 0220 	orr.w	r2, r3, #32
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002aa2:	b662      	cpsie	i
}
 8002aa4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e09a      	b.n	8002be8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d1d9      	bne.n	8002a74 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b02:	b662      	cpsie	i
}
 8002b04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b38:	e042      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fa5b 	bl	8002ffa <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e04c      	b.n	8002be8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d118      	bne.n	8002bc0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f47f ae94 	bne.w	80028f2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
  }
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3728      	adds	r7, #40	; 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	00010004 	.word	0x00010004
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	14f8b589 	.word	0x14f8b589

08002bfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	817b      	strh	r3, [r7, #10]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	813b      	strh	r3, [r7, #8]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f8c2 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00d      	beq.n	8002c6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5c:	d103      	bne.n	8002c66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e0aa      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c6a:	897b      	ldrh	r3, [r7, #10]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	4952      	ldr	r1, [pc, #328]	; (8002dc8 <I2C_RequestMemoryRead+0x1cc>)
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f8fa 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e097      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca8:	6a39      	ldr	r1, [r7, #32]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f964 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00d      	beq.n	8002cd2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d107      	bne.n	8002cce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ccc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e076      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d105      	bne.n	8002ce4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cd8:	893b      	ldrh	r3, [r7, #8]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	611a      	str	r2, [r3, #16]
 8002ce2:	e021      	b.n	8002d28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ce4:	893b      	ldrh	r3, [r7, #8]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	6a39      	ldr	r1, [r7, #32]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f93e 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d107      	bne.n	8002d1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e050      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d1e:	893b      	ldrh	r3, [r7, #8]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2a:	6a39      	ldr	r1, [r7, #32]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f923 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00d      	beq.n	8002d54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d107      	bne.n	8002d50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e035      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f82b 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8a:	d103      	bne.n	8002d94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e013      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d98:	897b      	ldrh	r3, [r7, #10]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	6a3a      	ldr	r2, [r7, #32]
 8002dac:	4906      	ldr	r1, [pc, #24]	; (8002dc8 <I2C_RequestMemoryRead+0x1cc>)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f863 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	00010002 	.word	0x00010002

08002dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ddc:	e025      	b.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de4:	d021      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fe fc95 	bl	8001714 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e023      	b.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10d      	bne.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	e00c      	b.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d0b6      	beq.n	8002dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e88:	e051      	b.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e98:	d123      	bne.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f043 0204 	orr.w	r2, r3, #4
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e046      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee8:	d021      	beq.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe fc13 	bl	8001714 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e020      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10c      	bne.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e00b      	b.n	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d18d      	bne.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f84:	e02d      	b.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f88d 	bl	80030a6 <I2C_IsAcknowledgeFailed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e02d      	b.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f9c:	d021      	beq.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fbb9 	bl	8001714 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d116      	bne.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e007      	b.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d1ca      	bne.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003006:	e042      	b.n	800308e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b10      	cmp	r3, #16
 8003014:	d119      	bne.n	800304a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f06f 0210 	mvn.w	r2, #16
 800301e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e029      	b.n	800309e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fe fb63 	bl	8001714 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d116      	bne.n	800308e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e007      	b.n	800309e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d1b5      	bne.n	8003008 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030bc:	d11b      	bne.n	80030f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f043 0204 	orr.w	r2, r3, #4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003104:	b08b      	sub	sp, #44	; 0x2c
 8003106:	af06      	add	r7, sp, #24
 8003108:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0fd      	b.n	8003310 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d106      	bne.n	800312e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f006 fd15 	bl	8009b58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2203      	movs	r2, #3
 8003132:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f002 fa5a 	bl	80055f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	687e      	ldr	r6, [r7, #4]
 8003148:	466d      	mov	r5, sp
 800314a:	f106 0410 	add.w	r4, r6, #16
 800314e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	602b      	str	r3, [r5, #0]
 8003156:	1d33      	adds	r3, r6, #4
 8003158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	f002 fa24 	bl	80055a8 <USB_CoreInit>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0ce      	b.n	8003310 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f002 fa55 	bl	8005628 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	e04c      	b.n	800321e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	440b      	add	r3, r1
 8003194:	3301      	adds	r3, #1
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	b298      	uxth	r0, r3
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	440b      	add	r3, r1
 80031c0:	3336      	adds	r3, #54	; 0x36
 80031c2:	4602      	mov	r2, r0
 80031c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	440b      	add	r3, r1
 80031d6:	3303      	adds	r3, #3
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	3338      	adds	r3, #56	; 0x38
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	440b      	add	r3, r1
 80031fe:	333c      	adds	r3, #60	; 0x3c
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003204:	7bfa      	ldrb	r2, [r7, #15]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	3340      	adds	r3, #64	; 0x40
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	3301      	adds	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	d3ad      	bcc.n	8003184 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003228:	2300      	movs	r3, #0
 800322a:	73fb      	strb	r3, [r7, #15]
 800322c:	e044      	b.n	80032b8 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	440b      	add	r3, r1
 800323c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	440b      	add	r3, r1
 8003252:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	440b      	add	r3, r1
 8003268:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	440b      	add	r3, r1
 80032aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	3301      	adds	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d3b5      	bcc.n	800322e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	687e      	ldr	r6, [r7, #4]
 80032ca:	466d      	mov	r5, sp
 80032cc:	f106 0410 	add.w	r4, r6, #16
 80032d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	602b      	str	r3, [r5, #0]
 80032d8:	1d33      	adds	r3, r6, #4
 80032da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032dc:	6838      	ldr	r0, [r7, #0]
 80032de:	f002 f9af 	bl	8005640 <USB_DevInit>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e00d      	b.n	8003310 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f004 fe61 	bl	8007fd0 <USB_DevDisconnect>

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003318 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_PCD_Start+0x16>
 800332a:	2302      	movs	r3, #2
 800332c:	e016      	b.n	800335c <HAL_PCD_Start+0x44>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f002 f944 	bl	80055c8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003340:	2101      	movs	r1, #1
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f006 fe7b 	bl	800a03e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f004 fe35 	bl	8007fbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f004 fe37 	bl	8007fe4 <USB_ReadInterrupts>
 8003376:	4603      	mov	r3, r0
 8003378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003380:	d102      	bne.n	8003388 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fb5f 	bl	8003a46 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f004 fe29 	bl	8007fe4 <USB_ReadInterrupts>
 8003392:	4603      	mov	r3, r0
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339c:	d112      	bne.n	80033c4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b0:	b292      	uxth	r2, r2
 80033b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f006 fc49 	bl	8009c4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80033bc:	2100      	movs	r1, #0
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f923 	bl	800360a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f004 fe0b 	bl	8007fe4 <USB_ReadInterrupts>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d8:	d10b      	bne.n	80033f2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033ec:	b292      	uxth	r2, r2
 80033ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f004 fdf4 	bl	8007fe4 <USB_ReadInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003406:	d10b      	bne.n	8003420 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003410:	b29a      	uxth	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800341a:	b292      	uxth	r2, r2
 800341c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f004 fddd 	bl	8007fe4 <USB_ReadInterrupts>
 800342a:	4603      	mov	r3, r0
 800342c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003434:	d126      	bne.n	8003484 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800343e:	b29a      	uxth	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0204 	bic.w	r2, r2, #4
 8003448:	b292      	uxth	r2, r2
 800344a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003456:	b29a      	uxth	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0208 	bic.w	r2, r2, #8
 8003460:	b292      	uxth	r2, r2
 8003462:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f006 fc2a 	bl	8009cc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003474:	b29a      	uxth	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800347e:	b292      	uxth	r2, r2
 8003480:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f004 fdab 	bl	8007fe4 <USB_ReadInterrupts>
 800348e:	4603      	mov	r3, r0
 8003490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003498:	f040 8082 	bne.w	80035a0 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800349c:	2300      	movs	r3, #0
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e010      	b.n	80034c4 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	7ffb      	ldrb	r3, [r7, #31]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	441a      	add	r2, r3
 80034ae:	7ffb      	ldrb	r3, [r7, #31]
 80034b0:	8812      	ldrh	r2, [r2, #0]
 80034b2:	b292      	uxth	r2, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	3320      	adds	r3, #32
 80034b8:	443b      	add	r3, r7
 80034ba:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80034be:	7ffb      	ldrb	r3, [r7, #31]
 80034c0:	3301      	adds	r3, #1
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	7ffb      	ldrb	r3, [r7, #31]
 80034c6:	2b07      	cmp	r3, #7
 80034c8:	d9eb      	bls.n	80034a2 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	b292      	uxth	r2, r2
 80034de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	b292      	uxth	r2, r2
 80034f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80034fa:	bf00      	nop
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003504:	b29b      	uxth	r3, r3
 8003506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f6      	beq.n	80034fc <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003520:	b292      	uxth	r2, r2
 8003522:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003526:	2300      	movs	r3, #0
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e00f      	b.n	800354c <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800352c:	7ffb      	ldrb	r3, [r7, #31]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	4611      	mov	r1, r2
 8003534:	7ffa      	ldrb	r2, [r7, #31]
 8003536:	0092      	lsls	r2, r2, #2
 8003538:	440a      	add	r2, r1
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	3320      	adds	r3, #32
 800353e:	443b      	add	r3, r7
 8003540:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003544:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003546:	7ffb      	ldrb	r3, [r7, #31]
 8003548:	3301      	adds	r3, #1
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	7ffb      	ldrb	r3, [r7, #31]
 800354e:	2b07      	cmp	r3, #7
 8003550:	d9ec      	bls.n	800352c <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800355a:	b29a      	uxth	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0208 	orr.w	r2, r2, #8
 8003564:	b292      	uxth	r2, r2
 8003566:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003572:	b29a      	uxth	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800357c:	b292      	uxth	r2, r2
 800357e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0204 	orr.w	r2, r2, #4
 8003594:	b292      	uxth	r2, r2
 8003596:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f006 fb76 	bl	8009c8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f004 fd1d 	bl	8007fe4 <USB_ReadInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b4:	d10e      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035be:	b29a      	uxth	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035c8:	b292      	uxth	r2, r2
 80035ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f006 fb2f 	bl	8009c32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f004 fd03 	bl	8007fe4 <USB_ReadInterrupts>
 80035de:	4603      	mov	r3, r0
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e8:	d10b      	bne.n	8003602 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035fc:	b292      	uxth	r2, r2
 80035fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003602:	bf00      	nop
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_PCD_SetAddress+0x1a>
 8003620:	2302      	movs	r3, #2
 8003622:	e013      	b.n	800364c <HAL_PCD_SetAddress+0x42>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f004 fcaa 	bl	8007f96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	4608      	mov	r0, r1
 800365e:	4611      	mov	r1, r2
 8003660:	461a      	mov	r2, r3
 8003662:	4603      	mov	r3, r0
 8003664:	70fb      	strb	r3, [r7, #3]
 8003666:	460b      	mov	r3, r1
 8003668:	803b      	strh	r3, [r7, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003676:	2b00      	cmp	r3, #0
 8003678:	da0e      	bge.n	8003698 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	4413      	add	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	705a      	strb	r2, [r3, #1]
 8003696:	e00e      	b.n	80036b6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	f003 0207 	and.w	r2, r3, #7
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036c2:	883a      	ldrh	r2, [r7, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	78ba      	ldrb	r2, [r7, #2]
 80036cc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	785b      	ldrb	r3, [r3, #1]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036e0:	78bb      	ldrb	r3, [r7, #2]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d102      	bne.n	80036ec <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_PCD_EP_Open+0xa6>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e00e      	b.n	8003718 <HAL_PCD_EP_Open+0xc4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68f9      	ldr	r1, [r7, #12]
 8003708:	4618      	mov	r0, r3
 800370a:	f001 ffb9 	bl	8005680 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003716:	7afb      	ldrb	r3, [r7, #11]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800372c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003730:	2b00      	cmp	r3, #0
 8003732:	da0e      	bge.n	8003752 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	4413      	add	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	705a      	strb	r2, [r3, #1]
 8003750:	e00e      	b.n	8003770 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	f003 0207 	and.w	r2, r3, #7
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	b2da      	uxtb	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_PCD_EP_Close+0x6a>
 8003786:	2302      	movs	r3, #2
 8003788:	e00e      	b.n	80037a8 <HAL_PCD_EP_Close+0x88>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68f9      	ldr	r1, [r7, #12]
 8003798:	4618      	mov	r0, r3
 800379a:	f002 fadb 	bl	8005d54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	460b      	mov	r3, r1
 80037be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037c0:	7afb      	ldrb	r3, [r7, #11]
 80037c2:	f003 0207 	and.w	r2, r3, #7
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4413      	add	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2200      	movs	r2, #0
 80037ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f0:	7afb      	ldrb	r3, [r7, #11]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037fc:	7afb      	ldrb	r3, [r7, #11]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6979      	ldr	r1, [r7, #20]
 800380c:	4618      	mov	r0, r3
 800380e:	f002 fc8d 	bl	800612c <USB_EPStartXfer>
 8003812:	e005      	b.n	8003820 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6979      	ldr	r1, [r7, #20]
 800381a:	4618      	mov	r0, r3
 800381c:	f002 fc86 	bl	800612c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	f003 0207 	and.w	r2, r3, #7
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	440b      	add	r3, r1
 8003848:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800384c:	681b      	ldr	r3, [r3, #0]
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	460b      	mov	r3, r1
 8003866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003868:	7afb      	ldrb	r3, [r7, #11]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2200      	movs	r2, #0
 800389c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2201      	movs	r2, #1
 80038a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a4:	7afb      	ldrb	r3, [r7, #11]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038b0:	7afb      	ldrb	r3, [r7, #11]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6979      	ldr	r1, [r7, #20]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f002 fc33 	bl	800612c <USB_EPStartXfer>
 80038c6:	e005      	b.n	80038d4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6979      	ldr	r1, [r7, #20]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f002 fc2c 	bl	800612c <USB_EPStartXfer>
  }

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	f003 0207 	and.w	r2, r3, #7
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d901      	bls.n	80038fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04c      	b.n	8003996 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003900:	2b00      	cmp	r3, #0
 8003902:	da0e      	bge.n	8003922 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	705a      	strb	r2, [r3, #1]
 8003920:	e00c      	b.n	800393c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_PCD_EP_SetStall+0x7e>
 8003958:	2302      	movs	r3, #2
 800395a:	e01c      	b.n	8003996 <HAL_PCD_EP_SetStall+0xb8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68f9      	ldr	r1, [r7, #12]
 800396a:	4618      	mov	r0, r3
 800396c:	f004 fa16 	bl	8007d9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	2b00      	cmp	r3, #0
 8003978:	d108      	bne.n	800398c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f004 fb3b 	bl	8008002 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d901      	bls.n	80039bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e040      	b.n	8003a3e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	da0e      	bge.n	80039e2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	705a      	strb	r2, [r3, #1]
 80039e0:	e00e      	b.n	8003a00 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	f003 0207 	and.w	r2, r3, #7
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	4413      	add	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_PCD_EP_ClrStall+0x82>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e00e      	b.n	8003a3e <HAL_PCD_EP_ClrStall+0xa0>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68f9      	ldr	r1, [r7, #12]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f004 fa04 	bl	8007e3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b08e      	sub	sp, #56	; 0x38
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a4e:	e2ec      	b.n	800402a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a58:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003a66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 8161 	bne.w	8003d32 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d152      	bne.n	8003b20 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8a:	81fb      	strh	r3, [r7, #14]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	89fb      	ldrh	r3, [r7, #14]
 8003a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3328      	adds	r3, #40	; 0x28
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3302      	adds	r3, #2
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	441a      	add	r2, r3
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003ade:	2100      	movs	r1, #0
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f006 f88c 	bl	8009bfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 829b 	beq.w	800402a <PCD_EP_ISR_Handler+0x5e4>
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f040 8296 	bne.w	800402a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	b292      	uxth	r2, r2
 8003b12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b1e:	e284      	b.n	800402a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d034      	beq.n	8003ba4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3306      	adds	r3, #6
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f004 fa92 	bl	80080a2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	823b      	strh	r3, [r7, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	8a3a      	ldrh	r2, [r7, #16]
 8003b94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b98:	b292      	uxth	r2, r2
 8003b9a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f006 f801 	bl	8009ba4 <HAL_PCD_SetupStageCallback>
 8003ba2:	e242      	b.n	800402a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ba4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f280 823e 	bge.w	800402a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bba:	4013      	ands	r3, r2
 8003bbc:	83bb      	strh	r3, [r7, #28]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	8bba      	ldrh	r2, [r7, #28]
 8003bc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bc8:	b292      	uxth	r2, r2
 8003bca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	3306      	adds	r3, #6
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d019      	beq.n	8003c34 <PCD_EP_ISR_Handler+0x1ee>
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d015      	beq.n	8003c34 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	6959      	ldr	r1, [r3, #20]
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	f004 fa42 	bl	80080a2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	441a      	add	r2, r3
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f005 ffca 	bl	8009bc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f040 81f2 	bne.w	800402a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d112      	bne.n	8003c94 <PCD_EP_ISR_Handler+0x24e>
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	801a      	strh	r2, [r3, #0]
 8003c92:	e02f      	b.n	8003cf4 <PCD_EP_ISR_Handler+0x2ae>
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	2b3e      	cmp	r3, #62	; 0x3e
 8003c9a:	d813      	bhi.n	8003cc4 <PCD_EP_ISR_Handler+0x27e>
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <PCD_EP_ISR_Handler+0x270>
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	029b      	lsls	r3, r3, #10
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	801a      	strh	r2, [r3, #0]
 8003cc2:	e017      	b.n	8003cf4 <PCD_EP_ISR_Handler+0x2ae>
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	633b      	str	r3, [r7, #48]	; 0x30
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d102      	bne.n	8003cde <PCD_EP_ISR_Handler+0x298>
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	029b      	lsls	r3, r3, #10
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d04:	827b      	strh	r3, [r7, #18]
 8003d06:	8a7b      	ldrh	r3, [r7, #18]
 8003d08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d0c:	827b      	strh	r3, [r7, #18]
 8003d0e:	8a7b      	ldrh	r3, [r7, #18]
 8003d10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d14:	827b      	strh	r3, [r7, #18]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	8a7b      	ldrh	r3, [r7, #18]
 8003d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	8013      	strh	r3, [r2, #0]
 8003d30:	e17b      	b.n	800402a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d44:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f280 80ea 	bge.w	8003f22 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d64:	4013      	ands	r3, r2
 8003d66:	853b      	strh	r3, [r7, #40]	; 0x28
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d7c:	b292      	uxth	r2, r2
 8003d7e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003d80:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	4413      	add	r3, r2
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	7b1b      	ldrb	r3, [r3, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d122      	bne.n	8003de4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4413      	add	r3, r2
 8003db2:	3306      	adds	r3, #6
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dc6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003dc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8087 	beq.w	8003ede <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	6959      	ldr	r1, [r3, #20]
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	88da      	ldrh	r2, [r3, #6]
 8003ddc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dde:	f004 f960 	bl	80080a2 <USB_ReadPMA>
 8003de2:	e07c      	b.n	8003ede <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	78db      	ldrb	r3, [r3, #3]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d108      	bne.n	8003dfe <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003dec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dee:	461a      	mov	r2, r3
 8003df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f927 	bl	8004046 <HAL_PCD_EP_DB_Receive>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003dfc:	e06f      	b.n	8003ede <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e18:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	441a      	add	r2, r3
 8003e28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d021      	beq.n	8003e9c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e80:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003e82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d02a      	beq.n	8003ede <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	6959      	ldr	r1, [r3, #20]
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	891a      	ldrh	r2, [r3, #8]
 8003e94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e96:	f004 f904 	bl	80080a2 <USB_ReadPMA>
 8003e9a:	e020      	b.n	8003ede <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	3306      	adds	r3, #6
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003ec6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	6959      	ldr	r1, [r3, #20]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	895a      	ldrh	r2, [r3, #10]
 8003ed8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eda:	f004 f8e2 	bl	80080a2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ee4:	441a      	add	r2, r3
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ef0:	441a      	add	r2, r3
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d004      	beq.n	8003f08 <PCD_EP_ISR_Handler+0x4c2>
 8003efe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d206      	bcs.n	8003f16 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f005 fe5a 	bl	8009bc8 <HAL_PCD_DataOutStageCallback>
 8003f14:	e005      	b.n	8003f22 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f002 f905 	bl	800612c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d07e      	beq.n	800402a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003f2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	843b      	strh	r3, [r7, #32]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	441a      	add	r2, r3
 8003f6a:	8c3b      	ldrh	r3, [r7, #32]
 8003f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	78db      	ldrb	r3, [r3, #3]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d00c      	beq.n	8003f9a <PCD_EP_ISR_Handler+0x554>
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	78db      	ldrb	r3, [r3, #3]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d146      	bne.n	800401e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003f90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d141      	bne.n	800401e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	3302      	adds	r3, #2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fc2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	699a      	ldr	r2, [r3, #24]
 8003fc8:	8bfb      	ldrh	r3, [r7, #30]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d906      	bls.n	8003fdc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	8bfb      	ldrh	r3, [r7, #30]
 8003fd4:	1ad2      	subs	r2, r2, r3
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	619a      	str	r2, [r3, #24]
 8003fda:	e002      	b.n	8003fe2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	2200      	movs	r2, #0
 8003fe0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f005 fe04 	bl	8009bfe <HAL_PCD_DataInStageCallback>
 8003ff6:	e018      	b.n	800402a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	8bfb      	ldrh	r3, [r7, #30]
 8003ffe:	441a      	add	r2, r3
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	8bfb      	ldrh	r3, [r7, #30]
 800400a:	441a      	add	r2, r3
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004016:	4618      	mov	r0, r3
 8004018:	f002 f888 	bl	800612c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800401c:	e005      	b.n	800402a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800401e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004020:	461a      	mov	r2, r3
 8004022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f91b 	bl	8004260 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004032:	b29b      	uxth	r3, r3
 8004034:	b21b      	sxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	f6ff ad0a 	blt.w	8003a50 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3738      	adds	r7, #56	; 0x38
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b088      	sub	sp, #32
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	4613      	mov	r3, r2
 8004052:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004054:	88fb      	ldrh	r3, [r7, #6]
 8004056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d07e      	beq.n	800415c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004066:	b29b      	uxth	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	3302      	adds	r3, #2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004086:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	8b7b      	ldrh	r3, [r7, #26]
 800408e:	429a      	cmp	r2, r3
 8004090:	d306      	bcc.n	80040a0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	8b7b      	ldrh	r3, [r7, #26]
 8004098:	1ad2      	subs	r2, r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	619a      	str	r2, [r3, #24]
 800409e:	e002      	b.n	80040a6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2200      	movs	r2, #0
 80040a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d123      	bne.n	80040f6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	833b      	strh	r3, [r7, #24]
 80040ca:	8b3b      	ldrh	r3, [r7, #24]
 80040cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040d0:	833b      	strh	r3, [r7, #24]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	8b3b      	ldrh	r3, [r7, #24]
 80040e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01f      	beq.n	8004140 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	82fb      	strh	r3, [r7, #22]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	441a      	add	r2, r3
 800412a:	8afb      	ldrh	r3, [r7, #22]
 800412c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004138:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800413c:	b29b      	uxth	r3, r3
 800413e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004140:	8b7b      	ldrh	r3, [r7, #26]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8087 	beq.w	8004256 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6959      	ldr	r1, [r3, #20]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	891a      	ldrh	r2, [r3, #8]
 8004154:	8b7b      	ldrh	r3, [r7, #26]
 8004156:	f003 ffa4 	bl	80080a2 <USB_ReadPMA>
 800415a:	e07c      	b.n	8004256 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004164:	b29b      	uxth	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	3306      	adds	r3, #6
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004184:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	8b7b      	ldrh	r3, [r7, #26]
 800418c:	429a      	cmp	r2, r3
 800418e:	d306      	bcc.n	800419e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	8b7b      	ldrh	r3, [r7, #26]
 8004196:	1ad2      	subs	r2, r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	619a      	str	r2, [r3, #24]
 800419c:	e002      	b.n	80041a4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2200      	movs	r2, #0
 80041a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d123      	bne.n	80041f4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c6:	83fb      	strh	r3, [r7, #30]
 80041c8:	8bfb      	ldrh	r3, [r7, #30]
 80041ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041ce:	83fb      	strh	r3, [r7, #30]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	8bfb      	ldrh	r3, [r7, #30]
 80041e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d11f      	bne.n	800423e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004218:	83bb      	strh	r3, [r7, #28]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	8bbb      	ldrh	r3, [r7, #28]
 800422a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800422e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004236:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800423a:	b29b      	uxth	r3, r3
 800423c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800423e:	8b7b      	ldrh	r3, [r7, #26]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6959      	ldr	r1, [r3, #20]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	895a      	ldrh	r2, [r3, #10]
 8004250:	8b7b      	ldrh	r3, [r7, #26]
 8004252:	f003 ff26 	bl	80080a2 <USB_ReadPMA>
    }
  }

  return count;
 8004256:	8b7b      	ldrh	r3, [r7, #26]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b0a2      	sub	sp, #136	; 0x88
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 81c7 	beq.w	8004608 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004282:	b29b      	uxth	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	4413      	add	r3, r2
 800428e:	3302      	adds	r3, #2
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d907      	bls.n	80042c2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042ba:	1ad2      	subs	r2, r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	619a      	str	r2, [r3, #24]
 80042c0:	e002      	b.n	80042c8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f040 80b9 	bne.w	8004444 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d126      	bne.n	8004328 <HAL_PCD_EP_DB_Transmit+0xc8>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	4413      	add	r3, r2
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	011a      	lsls	r2, r3, #4
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	4413      	add	r3, r2
 80042fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800430c:	b29a      	uxth	r2, r3
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800431c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004320:	b29a      	uxth	r2, r3
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	801a      	strh	r2, [r3, #0]
 8004326:	e01a      	b.n	800435e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d116      	bne.n	800435e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433e:	b29b      	uxth	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	4413      	add	r3, r2
 8004346:	633b      	str	r3, [r7, #48]	; 0x30
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	011a      	lsls	r2, r3, #4
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	4413      	add	r3, r2
 8004352:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435a:	2200      	movs	r2, #0
 800435c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	623b      	str	r3, [r7, #32]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	785b      	ldrb	r3, [r3, #1]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d126      	bne.n	80043ba <HAL_PCD_EP_DB_Transmit+0x15a>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437a:	b29b      	uxth	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	4413      	add	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	011a      	lsls	r2, r3, #4
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	4413      	add	r3, r2
 800438e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800439e:	b29a      	uxth	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	801a      	strh	r2, [r3, #0]
 80043b8:	e017      	b.n	80043ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d113      	bne.n	80043ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	4413      	add	r3, r2
 80043d2:	623b      	str	r3, [r7, #32]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	011a      	lsls	r2, r3, #4
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	4413      	add	r3, r2
 80043de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2200      	movs	r2, #0
 80043e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	4619      	mov	r1, r3
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f005 fc04 	bl	8009bfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 82d4 	beq.w	80049aa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441c:	827b      	strh	r3, [r7, #18]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	441a      	add	r2, r3
 800442c:	8a7b      	ldrh	r3, [r7, #18]
 800442e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004436:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800443a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800443e:	b29b      	uxth	r3, r3
 8004440:	8013      	strh	r3, [r2, #0]
 8004442:	e2b2      	b.n	80049aa <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d021      	beq.n	8004492 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004468:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	441a      	add	r2, r3
 800447a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800447e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004486:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800448a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448e:	b29b      	uxth	r3, r3
 8004490:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004498:	2b01      	cmp	r3, #1
 800449a:	f040 8286 	bne.w	80049aa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044a6:	441a      	add	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044b4:	441a      	add	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6a1a      	ldr	r2, [r3, #32]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d309      	bcc.n	80044da <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6a1a      	ldr	r2, [r3, #32]
 80044d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d2:	1ad2      	subs	r2, r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	621a      	str	r2, [r3, #32]
 80044d8:	e015      	b.n	8004506 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80044e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044f0:	e009      	b.n	8004506 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2200      	movs	r2, #0
 8004504:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	785b      	ldrb	r3, [r3, #1]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d155      	bne.n	80045ba <HAL_PCD_EP_DB_Transmit+0x35a>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	63bb      	str	r3, [r7, #56]	; 0x38
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451c:	b29b      	uxth	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	4413      	add	r3, r2
 8004524:	63bb      	str	r3, [r7, #56]	; 0x38
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	011a      	lsls	r2, r3, #4
 800452c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452e:	4413      	add	r3, r2
 8004530:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
 8004536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004538:	2b00      	cmp	r3, #0
 800453a:	d112      	bne.n	8004562 <HAL_PCD_EP_DB_Transmit+0x302>
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004546:	b29a      	uxth	r2, r3
 8004548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454a:	801a      	strh	r2, [r3, #0]
 800454c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800455a:	b29a      	uxth	r2, r3
 800455c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455e:	801a      	strh	r2, [r3, #0]
 8004560:	e047      	b.n	80045f2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004564:	2b3e      	cmp	r3, #62	; 0x3e
 8004566:	d811      	bhi.n	800458c <HAL_PCD_EP_DB_Transmit+0x32c>
 8004568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	64bb      	str	r3, [r7, #72]	; 0x48
 800456e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_PCD_EP_DB_Transmit+0x31e>
 8004578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457a:	3301      	adds	r3, #1
 800457c:	64bb      	str	r3, [r7, #72]	; 0x48
 800457e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004580:	b29b      	uxth	r3, r3
 8004582:	029b      	lsls	r3, r3, #10
 8004584:	b29a      	uxth	r2, r3
 8004586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004588:	801a      	strh	r2, [r3, #0]
 800458a:	e032      	b.n	80045f2 <HAL_PCD_EP_DB_Transmit+0x392>
 800458c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	64bb      	str	r3, [r7, #72]	; 0x48
 8004592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	2b00      	cmp	r3, #0
 800459a:	d102      	bne.n	80045a2 <HAL_PCD_EP_DB_Transmit+0x342>
 800459c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800459e:	3b01      	subs	r3, #1
 80045a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80045a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	029b      	lsls	r3, r3, #10
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b6:	801a      	strh	r2, [r3, #0]
 80045b8:	e01b      	b.n	80045f2 <HAL_PCD_EP_DB_Transmit+0x392>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	785b      	ldrb	r3, [r3, #1]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d117      	bne.n	80045f2 <HAL_PCD_EP_DB_Transmit+0x392>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	643b      	str	r3, [r7, #64]	; 0x40
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d6:	4413      	add	r3, r2
 80045d8:	643b      	str	r3, [r7, #64]	; 0x40
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	011a      	lsls	r2, r3, #4
 80045e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e2:	4413      	add	r3, r2
 80045e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6959      	ldr	r1, [r3, #20]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	891a      	ldrh	r2, [r3, #8]
 80045fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004600:	b29b      	uxth	r3, r3
 8004602:	f003 fd09 	bl	8008018 <USB_WritePMA>
 8004606:	e1d0      	b.n	80049aa <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004610:	b29b      	uxth	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	3306      	adds	r3, #6
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004630:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800463c:	429a      	cmp	r2, r3
 800463e:	d307      	bcc.n	8004650 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	699a      	ldr	r2, [r3, #24]
 8004644:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004648:	1ad2      	subs	r2, r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	619a      	str	r2, [r3, #24]
 800464e:	e002      	b.n	8004656 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 80c4 	bne.w	80047e8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	785b      	ldrb	r3, [r3, #1]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d126      	bne.n	80046b6 <HAL_PCD_EP_DB_Transmit+0x456>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004676:	b29b      	uxth	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467c:	4413      	add	r3, r2
 800467e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	011a      	lsls	r2, r3, #4
 8004686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004688:	4413      	add	r3, r2
 800468a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800468e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004690:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800469a:	b29a      	uxth	r2, r3
 800469c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046b2:	801a      	strh	r2, [r3, #0]
 80046b4:	e01a      	b.n	80046ec <HAL_PCD_EP_DB_Transmit+0x48c>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	785b      	ldrb	r3, [r3, #1]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d116      	bne.n	80046ec <HAL_PCD_EP_DB_Transmit+0x48c>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	677b      	str	r3, [r7, #116]	; 0x74
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d2:	4413      	add	r3, r2
 80046d4:	677b      	str	r3, [r7, #116]	; 0x74
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	011a      	lsls	r2, r3, #4
 80046dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046de:	4413      	add	r3, r2
 80046e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046e4:	673b      	str	r3, [r7, #112]	; 0x70
 80046e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046e8:	2200      	movs	r2, #0
 80046ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	785b      	ldrb	r3, [r3, #1]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d12f      	bne.n	800475a <HAL_PCD_EP_DB_Transmit+0x4fa>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470a:	b29b      	uxth	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004712:	4413      	add	r3, r2
 8004714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	011a      	lsls	r2, r3, #4
 800471e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004722:	4413      	add	r3, r2
 8004724:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800472c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004738:	b29a      	uxth	r2, r3
 800473a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800473e:	801a      	strh	r2, [r3, #0]
 8004740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800474c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004750:	b29a      	uxth	r2, r3
 8004752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004756:	801a      	strh	r2, [r3, #0]
 8004758:	e017      	b.n	800478a <HAL_PCD_EP_DB_Transmit+0x52a>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d113      	bne.n	800478a <HAL_PCD_EP_DB_Transmit+0x52a>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800476a:	b29b      	uxth	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004770:	4413      	add	r3, r2
 8004772:	67bb      	str	r3, [r7, #120]	; 0x78
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	011a      	lsls	r2, r3, #4
 800477a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800477c:	4413      	add	r3, r2
 800477e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004782:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004784:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004786:	2200      	movs	r2, #0
 8004788:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f005 fa34 	bl	8009bfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800479c:	2b00      	cmp	r3, #0
 800479e:	f040 8104 	bne.w	80049aa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]
 80047e6:	e0e0      	b.n	80049aa <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d121      	bne.n	8004836 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800482e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800483c:	2b01      	cmp	r3, #1
 800483e:	f040 80b4 	bne.w	80049aa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800484a:	441a      	add	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004858:	441a      	add	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	6a1a      	ldr	r2, [r3, #32]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	429a      	cmp	r2, r3
 8004868:	d309      	bcc.n	800487e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	6a1a      	ldr	r2, [r3, #32]
 8004874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004876:	1ad2      	subs	r2, r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	621a      	str	r2, [r3, #32]
 800487c:	e015      	b.n	80048aa <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d107      	bne.n	8004896 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004886:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800488a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004894:	e009      	b.n	80048aa <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2200      	movs	r2, #0
 80048a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	667b      	str	r3, [r7, #100]	; 0x64
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d155      	bne.n	8004964 <HAL_PCD_EP_DB_Transmit+0x704>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048cc:	4413      	add	r3, r2
 80048ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	011a      	lsls	r2, r3, #4
 80048d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d8:	4413      	add	r3, r2
 80048da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048de:	65bb      	str	r3, [r7, #88]	; 0x58
 80048e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d112      	bne.n	800490c <HAL_PCD_EP_DB_Transmit+0x6ac>
 80048e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048f4:	801a      	strh	r2, [r3, #0]
 80048f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004904:	b29a      	uxth	r2, r3
 8004906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004908:	801a      	strh	r2, [r3, #0]
 800490a:	e044      	b.n	8004996 <HAL_PCD_EP_DB_Transmit+0x736>
 800490c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490e:	2b3e      	cmp	r3, #62	; 0x3e
 8004910:	d811      	bhi.n	8004936 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	657b      	str	r3, [r7, #84]	; 0x54
 8004918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004924:	3301      	adds	r3, #1
 8004926:	657b      	str	r3, [r7, #84]	; 0x54
 8004928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800492a:	b29b      	uxth	r3, r3
 800492c:	029b      	lsls	r3, r3, #10
 800492e:	b29a      	uxth	r2, r3
 8004930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004932:	801a      	strh	r2, [r3, #0]
 8004934:	e02f      	b.n	8004996 <HAL_PCD_EP_DB_Transmit+0x736>
 8004936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	657b      	str	r3, [r7, #84]	; 0x54
 800493c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004948:	3b01      	subs	r3, #1
 800494a:	657b      	str	r3, [r7, #84]	; 0x54
 800494c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800494e:	b29b      	uxth	r3, r3
 8004950:	029b      	lsls	r3, r3, #10
 8004952:	b29b      	uxth	r3, r3
 8004954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495c:	b29a      	uxth	r2, r3
 800495e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	e018      	b.n	8004996 <HAL_PCD_EP_DB_Transmit+0x736>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d114      	bne.n	8004996 <HAL_PCD_EP_DB_Transmit+0x736>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800497a:	4413      	add	r3, r2
 800497c:	667b      	str	r3, [r7, #100]	; 0x64
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	011a      	lsls	r2, r3, #4
 8004984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004986:	4413      	add	r3, r2
 8004988:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800498c:	663b      	str	r3, [r7, #96]	; 0x60
 800498e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004990:	b29a      	uxth	r2, r3
 8004992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004994:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6959      	ldr	r1, [r3, #20]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	895a      	ldrh	r2, [r3, #10]
 80049a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f003 fb37 	bl	8008018 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c4:	823b      	strh	r3, [r7, #16]
 80049c6:	8a3b      	ldrh	r3, [r7, #16]
 80049c8:	f083 0310 	eor.w	r3, r3, #16
 80049cc:	823b      	strh	r3, [r7, #16]
 80049ce:	8a3b      	ldrh	r3, [r7, #16]
 80049d0:	f083 0320 	eor.w	r3, r3, #32
 80049d4:	823b      	strh	r3, [r7, #16]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	441a      	add	r2, r3
 80049e4:	8a3b      	ldrh	r3, [r7, #16]
 80049e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3788      	adds	r7, #136	; 0x88
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	817b      	strh	r3, [r7, #10]
 8004a12:	4613      	mov	r3, r2
 8004a14:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004a16:	897b      	ldrh	r3, [r7, #10]
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00b      	beq.n	8004a3a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a22:	897b      	ldrh	r3, [r7, #10]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	e009      	b.n	8004a4e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a3a:	897a      	ldrh	r2, [r7, #10]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004a4e:	893b      	ldrh	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d107      	bne.n	8004a64 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2200      	movs	r2, #0
 8004a58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	80da      	strh	r2, [r3, #6]
 8004a62:	e00b      	b.n	8004a7c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2201      	movs	r2, #1
 8004a68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0c1b      	lsrs	r3, r3, #16
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e272      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8087 	beq.w	8004bb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aa8:	4b92      	ldr	r3, [pc, #584]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 030c 	and.w	r3, r3, #12
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d00c      	beq.n	8004ace <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ab4:	4b8f      	ldr	r3, [pc, #572]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 030c 	and.w	r3, r3, #12
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d112      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x5e>
 8004ac0:	4b8c      	ldr	r3, [pc, #560]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004acc:	d10b      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ace:	4b89      	ldr	r3, [pc, #548]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d06c      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x12c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d168      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e24c      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aee:	d106      	bne.n	8004afe <HAL_RCC_OscConfig+0x76>
 8004af0:	4b80      	ldr	r3, [pc, #512]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a7f      	ldr	r2, [pc, #508]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	e02e      	b.n	8004b5c <HAL_RCC_OscConfig+0xd4>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCC_OscConfig+0x98>
 8004b06:	4b7b      	ldr	r3, [pc, #492]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a7a      	ldr	r2, [pc, #488]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b78      	ldr	r3, [pc, #480]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a77      	ldr	r2, [pc, #476]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e01d      	b.n	8004b5c <HAL_RCC_OscConfig+0xd4>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b28:	d10c      	bne.n	8004b44 <HAL_RCC_OscConfig+0xbc>
 8004b2a:	4b72      	ldr	r3, [pc, #456]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a71      	ldr	r2, [pc, #452]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	4b6f      	ldr	r3, [pc, #444]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a6e      	ldr	r2, [pc, #440]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e00b      	b.n	8004b5c <HAL_RCC_OscConfig+0xd4>
 8004b44:	4b6b      	ldr	r3, [pc, #428]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a6a      	ldr	r2, [pc, #424]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	4b68      	ldr	r3, [pc, #416]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a67      	ldr	r2, [pc, #412]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d013      	beq.n	8004b8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fc fdd6 	bl	8001714 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b6c:	f7fc fdd2 	bl	8001714 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b64      	cmp	r3, #100	; 0x64
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e200      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7e:	4b5d      	ldr	r3, [pc, #372]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0xe4>
 8004b8a:	e014      	b.n	8004bb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fc fdc2 	bl	8001714 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b94:	f7fc fdbe 	bl	8001714 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	; 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e1ec      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba6:	4b53      	ldr	r3, [pc, #332]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x10c>
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d063      	beq.n	8004c8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bc2:	4b4c      	ldr	r3, [pc, #304]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bce:	4b49      	ldr	r3, [pc, #292]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d11c      	bne.n	8004c14 <HAL_RCC_OscConfig+0x18c>
 8004bda:	4b46      	ldr	r3, [pc, #280]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d116      	bne.n	8004c14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be6:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_RCC_OscConfig+0x176>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d001      	beq.n	8004bfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e1c0      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfe:	4b3d      	ldr	r3, [pc, #244]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4939      	ldr	r1, [pc, #228]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c12:	e03a      	b.n	8004c8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d020      	beq.n	8004c5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c1c:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <HAL_RCC_OscConfig+0x270>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c22:	f7fc fd77 	bl	8001714 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c2a:	f7fc fd73 	bl	8001714 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e1a1      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3c:	4b2d      	ldr	r3, [pc, #180]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c48:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4927      	ldr	r1, [pc, #156]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]
 8004c5c:	e015      	b.n	8004c8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c5e:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <HAL_RCC_OscConfig+0x270>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fc fd56 	bl	8001714 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c6c:	f7fc fd52 	bl	8001714 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e180      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7e:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d03a      	beq.n	8004d0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d019      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c9e:	4b17      	ldr	r3, [pc, #92]	; (8004cfc <HAL_RCC_OscConfig+0x274>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca4:	f7fc fd36 	bl	8001714 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cac:	f7fc fd32 	bl	8001714 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e160      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cca:	2001      	movs	r0, #1
 8004ccc:	f000 fad8 	bl	8005280 <RCC_Delay>
 8004cd0:	e01c      	b.n	8004d0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <HAL_RCC_OscConfig+0x274>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd8:	f7fc fd1c 	bl	8001714 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cde:	e00f      	b.n	8004d00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce0:	f7fc fd18 	bl	8001714 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d908      	bls.n	8004d00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e146      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	42420000 	.word	0x42420000
 8004cfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d00:	4b92      	ldr	r3, [pc, #584]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e9      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80a6 	beq.w	8004e66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1e:	4b8b      	ldr	r3, [pc, #556]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10d      	bne.n	8004d46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2a:	4b88      	ldr	r3, [pc, #544]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	4a87      	ldr	r2, [pc, #540]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d34:	61d3      	str	r3, [r2, #28]
 8004d36:	4b85      	ldr	r3, [pc, #532]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	4b82      	ldr	r3, [pc, #520]	; (8004f50 <HAL_RCC_OscConfig+0x4c8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d118      	bne.n	8004d84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d52:	4b7f      	ldr	r3, [pc, #508]	; (8004f50 <HAL_RCC_OscConfig+0x4c8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a7e      	ldr	r2, [pc, #504]	; (8004f50 <HAL_RCC_OscConfig+0x4c8>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5e:	f7fc fcd9 	bl	8001714 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d66:	f7fc fcd5 	bl	8001714 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b64      	cmp	r3, #100	; 0x64
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e103      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	4b75      	ldr	r3, [pc, #468]	; (8004f50 <HAL_RCC_OscConfig+0x4c8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d106      	bne.n	8004d9a <HAL_RCC_OscConfig+0x312>
 8004d8c:	4b6f      	ldr	r3, [pc, #444]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	4a6e      	ldr	r2, [pc, #440]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6213      	str	r3, [r2, #32]
 8004d98:	e02d      	b.n	8004df6 <HAL_RCC_OscConfig+0x36e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x334>
 8004da2:	4b6a      	ldr	r3, [pc, #424]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	4a69      	ldr	r2, [pc, #420]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	6213      	str	r3, [r2, #32]
 8004dae:	4b67      	ldr	r3, [pc, #412]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	4a66      	ldr	r2, [pc, #408]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004db4:	f023 0304 	bic.w	r3, r3, #4
 8004db8:	6213      	str	r3, [r2, #32]
 8004dba:	e01c      	b.n	8004df6 <HAL_RCC_OscConfig+0x36e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b05      	cmp	r3, #5
 8004dc2:	d10c      	bne.n	8004dde <HAL_RCC_OscConfig+0x356>
 8004dc4:	4b61      	ldr	r3, [pc, #388]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4a60      	ldr	r2, [pc, #384]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004dca:	f043 0304 	orr.w	r3, r3, #4
 8004dce:	6213      	str	r3, [r2, #32]
 8004dd0:	4b5e      	ldr	r3, [pc, #376]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	4a5d      	ldr	r2, [pc, #372]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	6213      	str	r3, [r2, #32]
 8004ddc:	e00b      	b.n	8004df6 <HAL_RCC_OscConfig+0x36e>
 8004dde:	4b5b      	ldr	r3, [pc, #364]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	4a5a      	ldr	r2, [pc, #360]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	6213      	str	r3, [r2, #32]
 8004dea:	4b58      	ldr	r3, [pc, #352]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	4a57      	ldr	r2, [pc, #348]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004df0:	f023 0304 	bic.w	r3, r3, #4
 8004df4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d015      	beq.n	8004e2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dfe:	f7fc fc89 	bl	8001714 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e04:	e00a      	b.n	8004e1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e06:	f7fc fc85 	bl	8001714 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e0b1      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e1c:	4b4b      	ldr	r3, [pc, #300]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0ee      	beq.n	8004e06 <HAL_RCC_OscConfig+0x37e>
 8004e28:	e014      	b.n	8004e54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2a:	f7fc fc73 	bl	8001714 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e30:	e00a      	b.n	8004e48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e32:	f7fc fc6f 	bl	8001714 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e09b      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e48:	4b40      	ldr	r3, [pc, #256]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1ee      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d105      	bne.n	8004e66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e5a:	4b3c      	ldr	r3, [pc, #240]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	4a3b      	ldr	r2, [pc, #236]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8087 	beq.w	8004f7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e70:	4b36      	ldr	r3, [pc, #216]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f003 030c 	and.w	r3, r3, #12
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d061      	beq.n	8004f40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d146      	bne.n	8004f12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e84:	4b33      	ldr	r3, [pc, #204]	; (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8a:	f7fc fc43 	bl	8001714 <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e90:	e008      	b.n	8004ea4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e92:	f7fc fc3f 	bl	8001714 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e06d      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea4:	4b29      	ldr	r3, [pc, #164]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f0      	bne.n	8004e92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb8:	d108      	bne.n	8004ecc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004eba:	4b24      	ldr	r3, [pc, #144]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	4921      	ldr	r1, [pc, #132]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ecc:	4b1f      	ldr	r3, [pc, #124]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a19      	ldr	r1, [r3, #32]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	430b      	orrs	r3, r1
 8004ede:	491b      	ldr	r1, [pc, #108]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eea:	f7fc fc13 	bl	8001714 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef2:	f7fc fc0f 	bl	8001714 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e03d      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f04:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f0      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x46a>
 8004f10:	e035      	b.n	8004f7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f12:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fc fbfc 	bl	8001714 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fc fbf8 	bl	8001714 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e026      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f32:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <HAL_RCC_OscConfig+0x4c4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x498>
 8004f3e:	e01e      	b.n	8004f7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d107      	bne.n	8004f58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e019      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40007000 	.word	0x40007000
 8004f54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <HAL_RCC_OscConfig+0x500>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d106      	bne.n	8004f7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d001      	beq.n	8004f7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40021000 	.word	0x40021000

08004f8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0d0      	b.n	8005142 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b6a      	ldr	r3, [pc, #424]	; (800514c <HAL_RCC_ClockConfig+0x1c0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d910      	bls.n	8004fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b67      	ldr	r3, [pc, #412]	; (800514c <HAL_RCC_ClockConfig+0x1c0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 0207 	bic.w	r2, r3, #7
 8004fb6:	4965      	ldr	r1, [pc, #404]	; (800514c <HAL_RCC_ClockConfig+0x1c0>)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fbe:	4b63      	ldr	r3, [pc, #396]	; (800514c <HAL_RCC_ClockConfig+0x1c0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d001      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0b8      	b.n	8005142 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d020      	beq.n	800501e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe8:	4b59      	ldr	r3, [pc, #356]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	4a58      	ldr	r2, [pc, #352]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 8004fee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ff2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005000:	4b53      	ldr	r3, [pc, #332]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	4a52      	ldr	r2, [pc, #328]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 8005006:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800500a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800500c:	4b50      	ldr	r3, [pc, #320]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	494d      	ldr	r1, [pc, #308]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 800501a:	4313      	orrs	r3, r2
 800501c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d040      	beq.n	80050ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d107      	bne.n	8005042 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005032:	4b47      	ldr	r3, [pc, #284]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d115      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e07f      	b.n	8005142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504a:	4b41      	ldr	r3, [pc, #260]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e073      	b.n	8005142 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505a:	4b3d      	ldr	r3, [pc, #244]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e06b      	b.n	8005142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800506a:	4b39      	ldr	r3, [pc, #228]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f023 0203 	bic.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4936      	ldr	r1, [pc, #216]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 8005078:	4313      	orrs	r3, r2
 800507a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800507c:	f7fc fb4a 	bl	8001714 <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005082:	e00a      	b.n	800509a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005084:	f7fc fb46 	bl	8001714 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e053      	b.n	8005142 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f003 020c 	and.w	r2, r3, #12
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d1eb      	bne.n	8005084 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ac:	4b27      	ldr	r3, [pc, #156]	; (800514c <HAL_RCC_ClockConfig+0x1c0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d210      	bcs.n	80050dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ba:	4b24      	ldr	r3, [pc, #144]	; (800514c <HAL_RCC_ClockConfig+0x1c0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f023 0207 	bic.w	r2, r3, #7
 80050c2:	4922      	ldr	r1, [pc, #136]	; (800514c <HAL_RCC_ClockConfig+0x1c0>)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ca:	4b20      	ldr	r3, [pc, #128]	; (800514c <HAL_RCC_ClockConfig+0x1c0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e032      	b.n	8005142 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e8:	4b19      	ldr	r3, [pc, #100]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4916      	ldr	r1, [pc, #88]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	490e      	ldr	r1, [pc, #56]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 8005116:	4313      	orrs	r3, r2
 8005118:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800511a:	f000 f821 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 800511e:	4602      	mov	r2, r0
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	490a      	ldr	r1, [pc, #40]	; (8005154 <HAL_RCC_ClockConfig+0x1c8>)
 800512c:	5ccb      	ldrb	r3, [r1, r3]
 800512e:	fa22 f303 	lsr.w	r3, r2, r3
 8005132:	4a09      	ldr	r2, [pc, #36]	; (8005158 <HAL_RCC_ClockConfig+0x1cc>)
 8005134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <HAL_RCC_ClockConfig+0x1d0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7fc faa8 	bl	8001690 <HAL_InitTick>

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40022000 	.word	0x40022000
 8005150:	40021000 	.word	0x40021000
 8005154:	0800a184 	.word	0x0800a184
 8005158:	20000000 	.word	0x20000000
 800515c:	20000004 	.word	0x20000004

08005160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005160:	b490      	push	{r4, r7}
 8005162:	b08a      	sub	sp, #40	; 0x28
 8005164:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005166:	4b29      	ldr	r3, [pc, #164]	; (800520c <HAL_RCC_GetSysClockFreq+0xac>)
 8005168:	1d3c      	adds	r4, r7, #4
 800516a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800516c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005170:	f240 2301 	movw	r3, #513	; 0x201
 8005174:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	2300      	movs	r3, #0
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800518a:	4b21      	ldr	r3, [pc, #132]	; (8005210 <HAL_RCC_GetSysClockFreq+0xb0>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b04      	cmp	r3, #4
 8005198:	d002      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0x40>
 800519a:	2b08      	cmp	r3, #8
 800519c:	d003      	beq.n	80051a6 <HAL_RCC_GetSysClockFreq+0x46>
 800519e:	e02b      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051a0:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051a2:	623b      	str	r3, [r7, #32]
      break;
 80051a4:	e02b      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	0c9b      	lsrs	r3, r3, #18
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	3328      	adds	r3, #40	; 0x28
 80051b0:	443b      	add	r3, r7
 80051b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80051b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d012      	beq.n	80051e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051c2:	4b13      	ldr	r3, [pc, #76]	; (8005210 <HAL_RCC_GetSysClockFreq+0xb0>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	0c5b      	lsrs	r3, r3, #17
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	3328      	adds	r3, #40	; 0x28
 80051ce:	443b      	add	r3, r7
 80051d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	4a0e      	ldr	r2, [pc, #56]	; (8005214 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051da:	fb03 f202 	mul.w	r2, r3, r2
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
 80051e6:	e004      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	4a0b      	ldr	r2, [pc, #44]	; (8005218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ec:	fb02 f303 	mul.w	r3, r2, r3
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	623b      	str	r3, [r7, #32]
      break;
 80051f6:	e002      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051fa:	623b      	str	r3, [r7, #32]
      break;
 80051fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051fe:	6a3b      	ldr	r3, [r7, #32]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3728      	adds	r7, #40	; 0x28
 8005204:	46bd      	mov	sp, r7
 8005206:	bc90      	pop	{r4, r7}
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	0800a11c 	.word	0x0800a11c
 8005210:	40021000 	.word	0x40021000
 8005214:	007a1200 	.word	0x007a1200
 8005218:	003d0900 	.word	0x003d0900

0800521c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005220:	4b02      	ldr	r3, [pc, #8]	; (800522c <HAL_RCC_GetHCLKFreq+0x10>)
 8005222:	681b      	ldr	r3, [r3, #0]
}
 8005224:	4618      	mov	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr
 800522c:	20000000 	.word	0x20000000

08005230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005234:	f7ff fff2 	bl	800521c <HAL_RCC_GetHCLKFreq>
 8005238:	4602      	mov	r2, r0
 800523a:	4b05      	ldr	r3, [pc, #20]	; (8005250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	0a1b      	lsrs	r3, r3, #8
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4903      	ldr	r1, [pc, #12]	; (8005254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005246:	5ccb      	ldrb	r3, [r1, r3]
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	0800a194 	.word	0x0800a194

08005258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800525c:	f7ff ffde 	bl	800521c <HAL_RCC_GetHCLKFreq>
 8005260:	4602      	mov	r2, r0
 8005262:	4b05      	ldr	r3, [pc, #20]	; (8005278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	0adb      	lsrs	r3, r3, #11
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	4903      	ldr	r1, [pc, #12]	; (800527c <HAL_RCC_GetPCLK2Freq+0x24>)
 800526e:	5ccb      	ldrb	r3, [r1, r3]
 8005270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005274:	4618      	mov	r0, r3
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40021000 	.word	0x40021000
 800527c:	0800a194 	.word	0x0800a194

08005280 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <RCC_Delay+0x34>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <RCC_Delay+0x38>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	0a5b      	lsrs	r3, r3, #9
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	fb02 f303 	mul.w	r3, r2, r3
 800529a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800529c:	bf00      	nop
  }
  while (Delay --);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	1e5a      	subs	r2, r3, #1
 80052a2:	60fa      	str	r2, [r7, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f9      	bne.n	800529c <RCC_Delay+0x1c>
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr
 80052b4:	20000000 	.word	0x20000000
 80052b8:	10624dd3 	.word	0x10624dd3

080052bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d07d      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80052d8:	2300      	movs	r3, #0
 80052da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052dc:	4b4f      	ldr	r3, [pc, #316]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10d      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e8:	4b4c      	ldr	r3, [pc, #304]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	4a4b      	ldr	r2, [pc, #300]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f2:	61d3      	str	r3, [r2, #28]
 80052f4:	4b49      	ldr	r3, [pc, #292]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005300:	2301      	movs	r3, #1
 8005302:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	4b46      	ldr	r3, [pc, #280]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d118      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005310:	4b43      	ldr	r3, [pc, #268]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a42      	ldr	r2, [pc, #264]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800531c:	f7fc f9fa 	bl	8001714 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005322:	e008      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005324:	f7fc f9f6 	bl	8001714 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b64      	cmp	r3, #100	; 0x64
 8005330:	d901      	bls.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e06d      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005336:	4b3a      	ldr	r3, [pc, #232]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f0      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005342:	4b36      	ldr	r3, [pc, #216]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d02e      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	429a      	cmp	r2, r3
 800535e:	d027      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005360:	4b2e      	ldr	r3, [pc, #184]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005368:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800536a:	4b2e      	ldr	r3, [pc, #184]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800536c:	2201      	movs	r2, #1
 800536e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005370:	4b2c      	ldr	r3, [pc, #176]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005376:	4a29      	ldr	r2, [pc, #164]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d014      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005386:	f7fc f9c5 	bl	8001714 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800538c:	e00a      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538e:	f7fc f9c1 	bl	8001714 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	f241 3288 	movw	r2, #5000	; 0x1388
 800539c:	4293      	cmp	r3, r2
 800539e:	d901      	bls.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e036      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a4:	4b1d      	ldr	r3, [pc, #116]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0ee      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b0:	4b1a      	ldr	r3, [pc, #104]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	4917      	ldr	r1, [pc, #92]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d105      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c8:	4b14      	ldr	r3, [pc, #80]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	4a13      	ldr	r2, [pc, #76]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d008      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053e0:	4b0e      	ldr	r3, [pc, #56]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	490b      	ldr	r1, [pc, #44]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d008      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053fe:	4b07      	ldr	r3, [pc, #28]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	4904      	ldr	r1, [pc, #16]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40021000 	.word	0x40021000
 8005420:	40007000 	.word	0x40007000
 8005424:	42420440 	.word	0x42420440

08005428 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b08d      	sub	sp, #52	; 0x34
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005430:	4b58      	ldr	r3, [pc, #352]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005432:	f107 040c 	add.w	r4, r7, #12
 8005436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005438:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800543c:	f240 2301 	movw	r3, #513	; 0x201
 8005440:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
 8005446:	2300      	movs	r3, #0
 8005448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544a:	2300      	movs	r3, #0
 800544c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	61fb      	str	r3, [r7, #28]
 8005452:	2300      	movs	r3, #0
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b10      	cmp	r3, #16
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b10      	cmp	r3, #16
 8005460:	f200 808e 	bhi.w	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d049      	beq.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d079      	beq.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005470:	e086      	b.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8005472:	4b49      	ldr	r3, [pc, #292]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005478:	4b47      	ldr	r3, [pc, #284]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d07f      	beq.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	0c9b      	lsrs	r3, r3, #18
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	3330      	adds	r3, #48	; 0x30
 800548e:	443b      	add	r3, r7
 8005490:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005494:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d017      	beq.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054a0:	4b3d      	ldr	r3, [pc, #244]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	0c5b      	lsrs	r3, r3, #17
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	3330      	adds	r3, #48	; 0x30
 80054ac:	443b      	add	r3, r7
 80054ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054b2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00d      	beq.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80054be:	4a37      	ldr	r2, [pc, #220]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	fb02 f303 	mul.w	r3, r2, r3
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ce:	e004      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	4a33      	ldr	r2, [pc, #204]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80054d4:	fb02 f303 	mul.w	r3, r2, r3
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80054da:	4b2f      	ldr	r3, [pc, #188]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e6:	d102      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80054ec:	e04a      	b.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	4a2c      	ldr	r2, [pc, #176]	; (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80054f4:	fba2 2303 	umull	r2, r3, r2, r3
 80054f8:	085b      	lsrs	r3, r3, #1
 80054fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80054fc:	e042      	b.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80054fe:	4b26      	ldr	r3, [pc, #152]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800550e:	d108      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800551a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005520:	e01f      	b.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800552c:	d109      	bne.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800552e:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800553a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005540:	e00f      	b.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800554c:	d11c      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800554e:	4b12      	ldr	r3, [pc, #72]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d016      	beq.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800555a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005560:	e012      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005562:	e011      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005564:	f7ff fe78 	bl	8005258 <HAL_RCC_GetPCLK2Freq>
 8005568:	4602      	mov	r2, r0
 800556a:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	0b9b      	lsrs	r3, r3, #14
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	3301      	adds	r3, #1
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800557e:	e004      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005580:	bf00      	nop
 8005582:	e002      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005584:	bf00      	nop
 8005586:	e000      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005588:	bf00      	nop
    }
  }
  return (frequency);
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800558c:	4618      	mov	r0, r3
 800558e:	3734      	adds	r7, #52	; 0x34
 8005590:	46bd      	mov	sp, r7
 8005592:	bd90      	pop	{r4, r7, pc}
 8005594:	0800a12c 	.word	0x0800a12c
 8005598:	40021000 	.word	0x40021000
 800559c:	007a1200 	.word	0x007a1200
 80055a0:	003d0900 	.word	0x003d0900
 80055a4:	aaaaaaab 	.word	0xaaaaaaab

080055a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055a8:	b084      	sub	sp, #16
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	f107 0014 	add.w	r0, r7, #20
 80055b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	b004      	add	sp, #16
 80055c6:	4770      	bx	lr

080055c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80055dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr

080055f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005600:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	b29b      	uxth	r3, r3
 800560e:	43db      	mvns	r3, r3
 8005610:	b29b      	uxth	r3, r3
 8005612:	4013      	ands	r3, r2
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005640:	b084      	sub	sp, #16
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	f107 0014 	add.w	r0, r7, #20
 800564e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	bc80      	pop	{r7}
 800567c:	b004      	add	sp, #16
 800567e:	4770      	bx	lr

08005680 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005680:	b480      	push	{r7}
 8005682:	b09b      	sub	sp, #108	; 0x6c
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	78db      	ldrb	r3, [r3, #3]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d81f      	bhi.n	80056f2 <USB_ActivateEndpoint+0x72>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <USB_ActivateEndpoint+0x38>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056c9 	.word	0x080056c9
 80056bc:	080056e5 	.word	0x080056e5
 80056c0:	080056fb 	.word	0x080056fb
 80056c4:	080056d7 	.word	0x080056d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80056c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80056d4:	e012      	b.n	80056fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80056d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80056de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80056e2:	e00b      	b.n	80056fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80056e4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056ec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80056f0:	e004      	b.n	80056fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80056f8:	e000      	b.n	80056fc <USB_ActivateEndpoint+0x7c>
      break;
 80056fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	441a      	add	r2, r3
 8005706:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800570a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800570e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571a:	b29b      	uxth	r3, r3
 800571c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29b      	uxth	r3, r3
 800572c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005734:	b29a      	uxth	r2, r3
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	4313      	orrs	r3, r2
 800573e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	441a      	add	r2, r3
 800574c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005760:	b29b      	uxth	r3, r3
 8005762:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	7b1b      	ldrb	r3, [r3, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	f040 8149 	bne.w	8005a00 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	785b      	ldrb	r3, [r3, #1]
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 8084 	beq.w	8005880 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005782:	b29b      	uxth	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	4413      	add	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	011a      	lsls	r2, r3, #4
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	88db      	ldrh	r3, [r3, #6]
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	81fb      	strh	r3, [r7, #14]
 80057ba:	89fb      	ldrh	r3, [r7, #14]
 80057bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01b      	beq.n	80057fc <USB_ActivateEndpoint+0x17c>
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057da:	81bb      	strh	r3, [r7, #12]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	89bb      	ldrh	r3, [r7, #12]
 80057e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	78db      	ldrb	r3, [r3, #3]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d020      	beq.n	8005846 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	b29b      	uxth	r3, r3
 8005812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800581a:	813b      	strh	r3, [r7, #8]
 800581c:	893b      	ldrh	r3, [r7, #8]
 800581e:	f083 0320 	eor.w	r3, r3, #32
 8005822:	813b      	strh	r3, [r7, #8]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	441a      	add	r2, r3
 800582e:	893b      	ldrh	r3, [r7, #8]
 8005830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005840:	b29b      	uxth	r3, r3
 8005842:	8013      	strh	r3, [r2, #0]
 8005844:	e27f      	b.n	8005d46 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800585c:	817b      	strh	r3, [r7, #10]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	441a      	add	r2, r3
 8005868:	897b      	ldrh	r3, [r7, #10]
 800586a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800586e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587a:	b29b      	uxth	r3, r3
 800587c:	8013      	strh	r3, [r2, #0]
 800587e:	e262      	b.n	8005d46 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800588a:	b29b      	uxth	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	4413      	add	r3, r2
 8005892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	011a      	lsls	r2, r3, #4
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	4413      	add	r3, r2
 800589e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	88db      	ldrh	r3, [r3, #6]
 80058a8:	085b      	lsrs	r3, r3, #1
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058be:	b29b      	uxth	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	4413      	add	r3, r2
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	011a      	lsls	r2, r3, #4
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	4413      	add	r3, r2
 80058d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058d6:	623b      	str	r3, [r7, #32]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d112      	bne.n	8005906 <USB_ActivateEndpoint+0x286>
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	801a      	strh	r2, [r3, #0]
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	e02f      	b.n	8005966 <USB_ActivateEndpoint+0x2e6>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b3e      	cmp	r3, #62	; 0x3e
 800590c:	d813      	bhi.n	8005936 <USB_ActivateEndpoint+0x2b6>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	663b      	str	r3, [r7, #96]	; 0x60
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <USB_ActivateEndpoint+0x2a8>
 8005922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005924:	3301      	adds	r3, #1
 8005926:	663b      	str	r3, [r7, #96]	; 0x60
 8005928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800592a:	b29b      	uxth	r3, r3
 800592c:	029b      	lsls	r3, r3, #10
 800592e:	b29a      	uxth	r2, r3
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	e017      	b.n	8005966 <USB_ActivateEndpoint+0x2e6>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	663b      	str	r3, [r7, #96]	; 0x60
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <USB_ActivateEndpoint+0x2d0>
 800594a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800594c:	3b01      	subs	r3, #1
 800594e:	663b      	str	r3, [r7, #96]	; 0x60
 8005950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005952:	b29b      	uxth	r3, r3
 8005954:	029b      	lsls	r3, r3, #10
 8005956:	b29b      	uxth	r3, r3
 8005958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005960:	b29a      	uxth	r2, r3
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	83fb      	strh	r3, [r7, #30]
 8005974:	8bfb      	ldrh	r3, [r7, #30]
 8005976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d01b      	beq.n	80059b6 <USB_ActivateEndpoint+0x336>
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005994:	83bb      	strh	r3, [r7, #28]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	441a      	add	r2, r3
 80059a0:	8bbb      	ldrh	r3, [r7, #28]
 80059a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059cc:	837b      	strh	r3, [r7, #26]
 80059ce:	8b7b      	ldrh	r3, [r7, #26]
 80059d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059d4:	837b      	strh	r3, [r7, #26]
 80059d6:	8b7b      	ldrh	r3, [r7, #26]
 80059d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059dc:	837b      	strh	r3, [r7, #26]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	441a      	add	r2, r3
 80059e8:	8b7b      	ldrh	r3, [r7, #26]
 80059ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	8013      	strh	r3, [r2, #0]
 80059fe:	e1a2      	b.n	8005d46 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a30:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a4c:	4413      	add	r3, r2
 8005a4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	011a      	lsls	r2, r3, #4
 8005a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	891b      	ldrh	r3, [r3, #8]
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	653b      	str	r3, [r7, #80]	; 0x50
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a80:	4413      	add	r3, r2
 8005a82:	653b      	str	r3, [r7, #80]	; 0x50
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	011a      	lsls	r2, r3, #4
 8005a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	895b      	ldrh	r3, [r3, #10]
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f040 8091 	bne.w	8005bd0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005abc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d01b      	beq.n	8005afe <USB_ActivateEndpoint+0x47e>
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005adc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	441a      	add	r2, r3
 8005ae8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01b      	beq.n	8005b4e <USB_ActivateEndpoint+0x4ce>
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005b66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b6c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005b6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b74:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	441a      	add	r2, r3
 8005b80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bac:	867b      	strh	r3, [r7, #50]	; 0x32
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	441a      	add	r2, r3
 8005bb8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	8013      	strh	r3, [r2, #0]
 8005bce:	e0ba      	b.n	8005d46 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005be0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01d      	beq.n	8005c28 <USB_ActivateEndpoint+0x5a8>
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	441a      	add	r2, r3
 8005c10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005c38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01d      	beq.n	8005c80 <USB_ActivateEndpoint+0x600>
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	441a      	add	r2, r3
 8005c68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	78db      	ldrb	r3, [r3, #3]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d024      	beq.n	8005cd2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ca2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ca6:	f083 0320 	eor.w	r3, r3, #32
 8005caa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	441a      	add	r2, r3
 8005cb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	8013      	strh	r3, [r2, #0]
 8005cd0:	e01d      	b.n	8005d0e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d24:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	441a      	add	r2, r3
 8005d30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005d46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	376c      	adds	r7, #108	; 0x6c
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr

08005d54 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b08d      	sub	sp, #52	; 0x34
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	7b1b      	ldrb	r3, [r3, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f040 808e 	bne.w	8005e84 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d044      	beq.n	8005dfa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	81bb      	strh	r3, [r7, #12]
 8005d7e:	89bb      	ldrh	r3, [r7, #12]
 8005d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <USB_DeactivateEndpoint+0x6c>
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	817b      	strh	r3, [r7, #10]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	897b      	ldrh	r3, [r7, #10]
 8005dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd6:	813b      	strh	r3, [r7, #8]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	441a      	add	r2, r3
 8005de2:	893b      	ldrh	r3, [r7, #8]
 8005de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	8013      	strh	r3, [r2, #0]
 8005df8:	e192      	b.n	8006120 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	827b      	strh	r3, [r7, #18]
 8005e08:	8a7b      	ldrh	r3, [r7, #18]
 8005e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d01b      	beq.n	8005e4a <USB_DeactivateEndpoint+0xf6>
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e28:	823b      	strh	r3, [r7, #16]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	441a      	add	r2, r3
 8005e34:	8a3b      	ldrh	r3, [r7, #16]
 8005e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e60:	81fb      	strh	r3, [r7, #14]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	441a      	add	r2, r3
 8005e6c:	89fb      	ldrh	r3, [r7, #14]
 8005e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	8013      	strh	r3, [r2, #0]
 8005e82:	e14d      	b.n	8006120 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f040 80a5 	bne.w	8005fd8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	843b      	strh	r3, [r7, #32]
 8005e9c:	8c3b      	ldrh	r3, [r7, #32]
 8005e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d01b      	beq.n	8005ede <USB_DeactivateEndpoint+0x18a>
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebc:	83fb      	strh	r3, [r7, #30]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	441a      	add	r2, r3
 8005ec8:	8bfb      	ldrh	r3, [r7, #30]
 8005eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	83bb      	strh	r3, [r7, #28]
 8005eec:	8bbb      	ldrh	r3, [r7, #28]
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d01b      	beq.n	8005f2e <USB_DeactivateEndpoint+0x1da>
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0c:	837b      	strh	r3, [r7, #26]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	441a      	add	r2, r3
 8005f18:	8b7b      	ldrh	r3, [r7, #26]
 8005f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f44:	833b      	strh	r3, [r7, #24]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	441a      	add	r2, r3
 8005f50:	8b3b      	ldrh	r3, [r7, #24]
 8005f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7c:	82fb      	strh	r3, [r7, #22]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	441a      	add	r2, r3
 8005f88:	8afb      	ldrh	r3, [r7, #22]
 8005f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb4:	82bb      	strh	r3, [r7, #20]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	441a      	add	r2, r3
 8005fc0:	8abb      	ldrh	r3, [r7, #20]
 8005fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]
 8005fd6:	e0a3      	b.n	8006120 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005fe6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01b      	beq.n	8006028 <USB_DeactivateEndpoint+0x2d4>
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006036:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	d01b      	beq.n	8006078 <USB_DeactivateEndpoint+0x324>
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	853b      	strh	r3, [r7, #40]	; 0x28
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	441a      	add	r2, r3
 8006062:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800606c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006070:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006074:	b29b      	uxth	r3, r3
 8006076:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800609c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	441a      	add	r2, r3
 800610a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800610c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611c:	b29b      	uxth	r3, r3
 800611e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3734      	adds	r7, #52	; 0x34
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr

0800612c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b0cc      	sub	sp, #304	; 0x130
 8006130:	af00      	add	r7, sp, #0
 8006132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006136:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800613a:	6018      	str	r0, [r3, #0]
 800613c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006144:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	2b01      	cmp	r3, #1
 8006154:	f041 817d 	bne.w	8007452 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	699a      	ldr	r2, [r3, #24]
 8006164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	429a      	cmp	r2, r3
 8006172:	d908      	bls.n	8006186 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006184:	e007      	b.n	8006196 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	7b1b      	ldrb	r3, [r3, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d152      	bne.n	800624c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80061a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6959      	ldr	r1, [r3, #20]
 80061b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	88da      	ldrh	r2, [r3, #6]
 80061be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80061c8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80061cc:	6800      	ldr	r0, [r0, #0]
 80061ce:	f001 ff23 	bl	8008018 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80061da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061de:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	4619      	mov	r1, r3
 80061f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006200:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006204:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	440a      	add	r2, r1
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	011a      	lsls	r2, r3, #4
 800621c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006220:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4413      	add	r3, r2
 8006228:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800622c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006230:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623a:	b29a      	uxth	r2, r3
 800623c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006240:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	f001 b8b5 	b.w	80073b6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800624c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	78db      	ldrb	r3, [r3, #3]
 8006258:	2b02      	cmp	r3, #2
 800625a:	f040 84c6 	bne.w	8006bea <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800625e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6a1a      	ldr	r2, [r3, #32]
 800626a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	429a      	cmp	r2, r3
 8006278:	f240 8443 	bls.w	8006b02 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800627c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80062a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	441a      	add	r2, r3
 80062c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80062c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a1a      	ldr	r2, [r3, #32]
 80062e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e8:	1ad2      	subs	r2, r2, r3
 80062ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 823e 	beq.w	800679a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800631e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006322:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006326:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800632a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 809a 	bne.w	8006478 <USB_EPStartXfer+0x34c>
 8006344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006350:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006366:	b29b      	uxth	r3, r3
 8006368:	4619      	mov	r1, r3
 800636a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006372:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006376:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	440a      	add	r2, r1
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	011a      	lsls	r2, r3, #4
 800638e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4413      	add	r3, r2
 800639a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800639e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d122      	bne.n	80063f6 <USB_EPStartXfer+0x2ca>
 80063b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	b29b      	uxth	r3, r3
 80063be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	801a      	strh	r2, [r3, #0]
 80063d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	e079      	b.n	80064ea <USB_EPStartXfer+0x3be>
 80063f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063fa:	2b3e      	cmp	r3, #62	; 0x3e
 80063fc:	d81b      	bhi.n	8006436 <USB_EPStartXfer+0x30a>
 80063fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	d004      	beq.n	800641e <USB_EPStartXfer+0x2f2>
 8006414:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006418:	3301      	adds	r3, #1
 800641a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800641e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006422:	b29b      	uxth	r3, r3
 8006424:	029b      	lsls	r3, r3, #10
 8006426:	b29a      	uxth	r2, r3
 8006428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	801a      	strh	r2, [r3, #0]
 8006434:	e059      	b.n	80064ea <USB_EPStartXfer+0x3be>
 8006436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643a:	095b      	lsrs	r3, r3, #5
 800643c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <USB_EPStartXfer+0x32a>
 800644c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006450:	3b01      	subs	r3, #1
 8006452:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006456:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800645a:	b29b      	uxth	r3, r3
 800645c:	029b      	lsls	r3, r3, #10
 800645e:	b29b      	uxth	r3, r3
 8006460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006468:	b29a      	uxth	r2, r3
 800646a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	e038      	b.n	80064ea <USB_EPStartXfer+0x3be>
 8006478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d130      	bne.n	80064ea <USB_EPStartXfer+0x3be>
 8006488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006496:	b29b      	uxth	r3, r3
 8006498:	4619      	mov	r1, r3
 800649a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80064a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064a6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	440a      	add	r2, r1
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	011a      	lsls	r2, r3, #4
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4413      	add	r3, r2
 80064ca:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80064ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	895b      	ldrh	r3, [r3, #10]
 80064f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6959      	ldr	r1, [r3, #20]
 8006506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800650a:	b29b      	uxth	r3, r3
 800650c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006510:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006514:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006518:	6800      	ldr	r0, [r0, #0]
 800651a:	f001 fd7d 	bl	8008018 <USB_WritePMA>
            ep->xfer_buff += len;
 800651e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695a      	ldr	r2, [r3, #20]
 800652a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800652e:	441a      	add	r2, r3
 8006530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006534:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800653c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6a1a      	ldr	r2, [r3, #32]
 8006548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	429a      	cmp	r2, r3
 8006556:	d90f      	bls.n	8006578 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a1a      	ldr	r2, [r3, #32]
 8006564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006568:	1ad2      	subs	r2, r2, r3
 800656a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	621a      	str	r2, [r3, #32]
 8006576:	e00e      	b.n	8006596 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2200      	movs	r2, #0
 8006594:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 809a 	bne.w	80066dc <USB_EPStartXfer+0x5b0>
 80065a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80065b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065b4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	4619      	mov	r1, r3
 80065ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80065d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065da:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80065de:	6812      	ldr	r2, [r2, #0]
 80065e0:	440a      	add	r2, r1
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	011a      	lsls	r2, r3, #4
 80065f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006606:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006610:	2b00      	cmp	r3, #0
 8006612:	d122      	bne.n	800665a <USB_EPStartXfer+0x52e>
 8006614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006618:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006626:	b29a      	uxth	r2, r3
 8006628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	801a      	strh	r2, [r3, #0]
 8006634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006638:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664a:	b29a      	uxth	r2, r3
 800664c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006650:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	801a      	strh	r2, [r3, #0]
 8006658:	e083      	b.n	8006762 <USB_EPStartXfer+0x636>
 800665a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665e:	2b3e      	cmp	r3, #62	; 0x3e
 8006660:	d81b      	bhi.n	800669a <USB_EPStartXfer+0x56e>
 8006662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800666c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d004      	beq.n	8006682 <USB_EPStartXfer+0x556>
 8006678:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800667c:	3301      	adds	r3, #1
 800667e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006682:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006686:	b29b      	uxth	r3, r3
 8006688:	029b      	lsls	r3, r3, #10
 800668a:	b29a      	uxth	r2, r3
 800668c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006690:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	e063      	b.n	8006762 <USB_EPStartXfer+0x636>
 800669a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80066a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a8:	f003 031f 	and.w	r3, r3, #31
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <USB_EPStartXfer+0x58e>
 80066b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80066b4:	3b01      	subs	r3, #1
 80066b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80066ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80066be:	b29b      	uxth	r3, r3
 80066c0:	029b      	lsls	r3, r3, #10
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	801a      	strh	r2, [r3, #0]
 80066da:	e042      	b.n	8006762 <USB_EPStartXfer+0x636>
 80066dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	785b      	ldrb	r3, [r3, #1]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d13a      	bne.n	8006762 <USB_EPStartXfer+0x636>
 80066ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80066f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066f8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670e:	b29b      	uxth	r3, r3
 8006710:	4619      	mov	r1, r3
 8006712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006716:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800671a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800671e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	440a      	add	r2, r1
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	011a      	lsls	r2, r3, #4
 8006736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4413      	add	r3, r2
 8006742:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006754:	b29a      	uxth	r2, r3
 8006756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	891b      	ldrh	r3, [r3, #8]
 800676e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6959      	ldr	r1, [r3, #20]
 800677e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006782:	b29b      	uxth	r3, r3
 8006784:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006788:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800678c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006790:	6800      	ldr	r0, [r0, #0]
 8006792:	f001 fc41 	bl	8008018 <USB_WritePMA>
 8006796:	f000 be0e 	b.w	80073b6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800679a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d16d      	bne.n	8006886 <USB_EPStartXfer+0x75a>
 80067aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	461a      	mov	r2, r3
 80067c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ca:	4413      	add	r3, r2
 80067cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80067ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	011a      	lsls	r2, r3, #4
 80067dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067de:	4413      	add	r3, r2
 80067e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067e4:	647b      	str	r3, [r7, #68]	; 0x44
 80067e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d112      	bne.n	8006814 <USB_EPStartXfer+0x6e8>
 80067ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067fc:	801a      	strh	r2, [r3, #0]
 80067fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800680c:	b29a      	uxth	r2, r3
 800680e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006810:	801a      	strh	r2, [r3, #0]
 8006812:	e063      	b.n	80068dc <USB_EPStartXfer+0x7b0>
 8006814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006818:	2b3e      	cmp	r3, #62	; 0x3e
 800681a:	d817      	bhi.n	800684c <USB_EPStartXfer+0x720>
 800681c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006820:	085b      	lsrs	r3, r3, #1
 8006822:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d004      	beq.n	800683c <USB_EPStartXfer+0x710>
 8006832:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006836:	3301      	adds	r3, #1
 8006838:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800683c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006840:	b29b      	uxth	r3, r3
 8006842:	029b      	lsls	r3, r3, #10
 8006844:	b29a      	uxth	r2, r3
 8006846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006848:	801a      	strh	r2, [r3, #0]
 800684a:	e047      	b.n	80068dc <USB_EPStartXfer+0x7b0>
 800684c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	2b00      	cmp	r3, #0
 8006860:	d104      	bne.n	800686c <USB_EPStartXfer+0x740>
 8006862:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006866:	3b01      	subs	r3, #1
 8006868:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800686c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006870:	b29b      	uxth	r3, r3
 8006872:	029b      	lsls	r3, r3, #10
 8006874:	b29b      	uxth	r3, r3
 8006876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800687a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687e:	b29a      	uxth	r2, r3
 8006880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	e02a      	b.n	80068dc <USB_EPStartXfer+0x7b0>
 8006886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d122      	bne.n	80068dc <USB_EPStartXfer+0x7b0>
 8006896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	653b      	str	r3, [r7, #80]	; 0x50
 80068a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	461a      	mov	r2, r3
 80068b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b6:	4413      	add	r3, r2
 80068b8:	653b      	str	r3, [r7, #80]	; 0x50
 80068ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	011a      	lsls	r2, r3, #4
 80068c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ca:	4413      	add	r3, r2
 80068cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80068dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	891b      	ldrh	r3, [r3, #8]
 80068e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6959      	ldr	r1, [r3, #20]
 80068f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006902:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006906:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	f001 fb84 	bl	8008018 <USB_WritePMA>
            ep->xfer_buff += len;
 8006910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695a      	ldr	r2, [r3, #20]
 800691c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006920:	441a      	add	r2, r3
 8006922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800692e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6a1a      	ldr	r2, [r3, #32]
 800693a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	429a      	cmp	r2, r3
 8006948:	d90f      	bls.n	800696a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800694a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6a1a      	ldr	r2, [r3, #32]
 8006956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	621a      	str	r2, [r3, #32]
 8006968:	e00e      	b.n	8006988 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800696a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800697a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2200      	movs	r2, #0
 8006986:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	643b      	str	r3, [r7, #64]	; 0x40
 8006994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	785b      	ldrb	r3, [r3, #1]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d16d      	bne.n	8006a80 <USB_EPStartXfer+0x954>
 80069a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80069b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069be:	b29b      	uxth	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	4413      	add	r3, r2
 80069c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	011a      	lsls	r2, r3, #4
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	4413      	add	r3, r2
 80069da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069de:	637b      	str	r3, [r7, #52]	; 0x34
 80069e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d112      	bne.n	8006a0e <USB_EPStartXfer+0x8e2>
 80069e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f6:	801a      	strh	r2, [r3, #0]
 80069f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	e05d      	b.n	8006aca <USB_EPStartXfer+0x99e>
 8006a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a12:	2b3e      	cmp	r3, #62	; 0x3e
 8006a14:	d817      	bhi.n	8006a46 <USB_EPStartXfer+0x91a>
 8006a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <USB_EPStartXfer+0x90a>
 8006a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a30:	3301      	adds	r3, #1
 8006a32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	029b      	lsls	r3, r3, #10
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a42:	801a      	strh	r2, [r3, #0]
 8006a44:	e041      	b.n	8006aca <USB_EPStartXfer+0x99e>
 8006a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a4a:	095b      	lsrs	r3, r3, #5
 8006a4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <USB_EPStartXfer+0x93a>
 8006a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a60:	3b01      	subs	r3, #1
 8006a62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006a66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	029b      	lsls	r3, r3, #10
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7c:	801a      	strh	r2, [r3, #0]
 8006a7e:	e024      	b.n	8006aca <USB_EPStartXfer+0x99e>
 8006a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d11c      	bne.n	8006aca <USB_EPStartXfer+0x99e>
 8006a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa4:	4413      	add	r3, r2
 8006aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8006aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	011a      	lsls	r2, r3, #4
 8006ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab8:	4413      	add	r3, r2
 8006aba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	895b      	ldrh	r3, [r3, #10]
 8006ad6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6959      	ldr	r1, [r3, #20]
 8006ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006af0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006af4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006af8:	6800      	ldr	r0, [r0, #0]
 8006afa:	f001 fa8d 	bl	8008018 <USB_WritePMA>
 8006afe:	f000 bc5a 	b.w	80073b6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b38:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	441a      	add	r2, r3
 8006b56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b8e:	4413      	add	r3, r2
 8006b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	011a      	lsls	r2, r3, #4
 8006ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ba8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	891b      	ldrh	r3, [r3, #8]
 8006bc0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6959      	ldr	r1, [r3, #20]
 8006bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006bda:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006bde:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006be2:	6800      	ldr	r0, [r0, #0]
 8006be4:	f001 fa18 	bl	8008018 <USB_WritePMA>
 8006be8:	e3e5      	b.n	80073b6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c10:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	441a      	add	r2, r3
 8006c2e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c3a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6a1a      	ldr	r2, [r3, #32]
 8006c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c56:	1ad2      	subs	r2, r2, r3
 8006c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 81bc 	beq.w	8007004 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	785b      	ldrb	r3, [r3, #1]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d16d      	bne.n	8006d86 <USB_EPStartXfer+0xc5a>
 8006caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cca:	4413      	add	r3, r2
 8006ccc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	011a      	lsls	r2, r3, #4
 8006cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cde:	4413      	add	r3, r2
 8006ce0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ce4:	677b      	str	r3, [r7, #116]	; 0x74
 8006ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d112      	bne.n	8006d14 <USB_EPStartXfer+0xbe8>
 8006cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cfc:	801a      	strh	r2, [r3, #0]
 8006cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	e060      	b.n	8006dd6 <USB_EPStartXfer+0xcaa>
 8006d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d18:	2b3e      	cmp	r3, #62	; 0x3e
 8006d1a:	d817      	bhi.n	8006d4c <USB_EPStartXfer+0xc20>
 8006d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d20:	085b      	lsrs	r3, r3, #1
 8006d22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d004      	beq.n	8006d3c <USB_EPStartXfer+0xc10>
 8006d32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d36:	3301      	adds	r3, #1
 8006d38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006d3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	029b      	lsls	r3, r3, #10
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	e044      	b.n	8006dd6 <USB_EPStartXfer+0xcaa>
 8006d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d50:	095b      	lsrs	r3, r3, #5
 8006d52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d104      	bne.n	8006d6c <USB_EPStartXfer+0xc40>
 8006d62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d66:	3b01      	subs	r3, #1
 8006d68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006d6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	029b      	lsls	r3, r3, #10
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	e027      	b.n	8006dd6 <USB_EPStartXfer+0xcaa>
 8006d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d11f      	bne.n	8006dd6 <USB_EPStartXfer+0xcaa>
 8006d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	461a      	mov	r2, r3
 8006da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dac:	4413      	add	r3, r2
 8006dae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	011a      	lsls	r2, r3, #4
 8006dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006dd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	895b      	ldrh	r3, [r3, #10]
 8006de2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6959      	ldr	r1, [r3, #20]
 8006df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006dfc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e00:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e04:	6800      	ldr	r0, [r0, #0]
 8006e06:	f001 f907 	bl	8008018 <USB_WritePMA>
          ep->xfer_buff += len;
 8006e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695a      	ldr	r2, [r3, #20]
 8006e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e1a:	441a      	add	r2, r3
 8006e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6a1a      	ldr	r2, [r3, #32]
 8006e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d90f      	bls.n	8006e64 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6a1a      	ldr	r2, [r3, #32]
 8006e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e54:	1ad2      	subs	r2, r2, r3
 8006e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	621a      	str	r2, [r3, #32]
 8006e62:	e00e      	b.n	8006e82 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 8295 	beq.w	80073b6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d16d      	bne.n	8006f78 <USB_EPStartXfer+0xe4c>
 8006e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ebc:	4413      	add	r3, r2
 8006ebe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	011a      	lsls	r2, r3, #4
 8006ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8006ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d112      	bne.n	8006f06 <USB_EPStartXfer+0xdda>
 8006ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eee:	801a      	strh	r2, [r3, #0]
 8006ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f02:	801a      	strh	r2, [r3, #0]
 8006f04:	e063      	b.n	8006fce <USB_EPStartXfer+0xea2>
 8006f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f0c:	d817      	bhi.n	8006f3e <USB_EPStartXfer+0xe12>
 8006f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <USB_EPStartXfer+0xe02>
 8006f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f28:	3301      	adds	r3, #1
 8006f2a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	029b      	lsls	r3, r3, #10
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	e047      	b.n	8006fce <USB_EPStartXfer+0xea2>
 8006f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <USB_EPStartXfer+0xe32>
 8006f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	029b      	lsls	r3, r3, #10
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	e02a      	b.n	8006fce <USB_EPStartXfer+0xea2>
 8006f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	785b      	ldrb	r3, [r3, #1]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d122      	bne.n	8006fce <USB_EPStartXfer+0xea2>
 8006f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	673b      	str	r3, [r7, #112]	; 0x70
 8006f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fa8:	4413      	add	r3, r2
 8006faa:	673b      	str	r3, [r7, #112]	; 0x70
 8006fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	011a      	lsls	r2, r3, #4
 8006fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	891b      	ldrh	r3, [r3, #8]
 8006fda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6959      	ldr	r1, [r3, #20]
 8006fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ff4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ff8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ffc:	6800      	ldr	r0, [r0, #0]
 8006ffe:	f001 f80b 	bl	8008018 <USB_WritePMA>
 8007002:	e1d8      	b.n	80073b6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d178      	bne.n	8007106 <USB_EPStartXfer+0xfda>
 8007014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007018:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007026:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007030:	b29b      	uxth	r3, r3
 8007032:	461a      	mov	r2, r3
 8007034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007038:	4413      	add	r3, r2
 800703a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800703e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	011a      	lsls	r2, r3, #4
 800704c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007050:	4413      	add	r3, r2
 8007052:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007056:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800705a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800705e:	2b00      	cmp	r3, #0
 8007060:	d116      	bne.n	8007090 <USB_EPStartXfer+0xf64>
 8007062:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b29b      	uxth	r3, r3
 800706a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800706e:	b29a      	uxth	r2, r3
 8007070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007074:	801a      	strh	r2, [r3, #0]
 8007076:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007086:	b29a      	uxth	r2, r3
 8007088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800708c:	801a      	strh	r2, [r3, #0]
 800708e:	e06b      	b.n	8007168 <USB_EPStartXfer+0x103c>
 8007090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007094:	2b3e      	cmp	r3, #62	; 0x3e
 8007096:	d818      	bhi.n	80070ca <USB_EPStartXfer+0xf9e>
 8007098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709c:	085b      	lsrs	r3, r3, #1
 800709e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80070a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <USB_EPStartXfer+0xf8c>
 80070ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070b2:	3301      	adds	r3, #1
 80070b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80070b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070bc:	b29b      	uxth	r3, r3
 80070be:	029b      	lsls	r3, r3, #10
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070c6:	801a      	strh	r2, [r3, #0]
 80070c8:	e04e      	b.n	8007168 <USB_EPStartXfer+0x103c>
 80070ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ce:	095b      	lsrs	r3, r3, #5
 80070d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80070d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d8:	f003 031f 	and.w	r3, r3, #31
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d104      	bne.n	80070ea <USB_EPStartXfer+0xfbe>
 80070e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070e4:	3b01      	subs	r3, #1
 80070e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80070ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	029b      	lsls	r3, r3, #10
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	e030      	b.n	8007168 <USB_EPStartXfer+0x103c>
 8007106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d128      	bne.n	8007168 <USB_EPStartXfer+0x103c>
 8007116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007128:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007132:	b29b      	uxth	r3, r3
 8007134:	461a      	mov	r2, r3
 8007136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800713a:	4413      	add	r3, r2
 800713c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	011a      	lsls	r2, r3, #4
 800714e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007152:	4413      	add	r3, r2
 8007154:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007158:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800715c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007160:	b29a      	uxth	r2, r3
 8007162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007166:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	891b      	ldrh	r3, [r3, #8]
 8007174:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6959      	ldr	r1, [r3, #20]
 8007184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007188:	b29b      	uxth	r3, r3
 800718a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800718e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007192:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007196:	6800      	ldr	r0, [r0, #0]
 8007198:	f000 ff3e 	bl	8008018 <USB_WritePMA>
          ep->xfer_buff += len;
 800719c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695a      	ldr	r2, [r3, #20]
 80071a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ac:	441a      	add	r2, r3
 80071ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6a1a      	ldr	r2, [r3, #32]
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d90f      	bls.n	80071f6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80071d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6a1a      	ldr	r2, [r3, #32]
 80071e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e6:	1ad2      	subs	r2, r2, r3
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	621a      	str	r2, [r3, #32]
 80071f4:	e00e      	b.n	8007214 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80071f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2200      	movs	r2, #0
 8007212:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 80cc 	beq.w	80073b6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800721e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800722c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	785b      	ldrb	r3, [r3, #1]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d178      	bne.n	800732e <USB_EPStartXfer+0x1202>
 800723c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800724a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007258:	b29b      	uxth	r3, r3
 800725a:	461a      	mov	r2, r3
 800725c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007260:	4413      	add	r3, r2
 8007262:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	011a      	lsls	r2, r3, #4
 8007274:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007278:	4413      	add	r3, r2
 800727a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800727e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d116      	bne.n	80072b8 <USB_EPStartXfer+0x118c>
 800728a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007296:	b29a      	uxth	r2, r3
 8007298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800729c:	801a      	strh	r2, [r3, #0]
 800729e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072b4:	801a      	strh	r2, [r3, #0]
 80072b6:	e064      	b.n	8007382 <USB_EPStartXfer+0x1256>
 80072b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072bc:	2b3e      	cmp	r3, #62	; 0x3e
 80072be:	d818      	bhi.n	80072f2 <USB_EPStartXfer+0x11c6>
 80072c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c4:	085b      	lsrs	r3, r3, #1
 80072c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80072ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d004      	beq.n	80072e0 <USB_EPStartXfer+0x11b4>
 80072d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072da:	3301      	adds	r3, #1
 80072dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80072e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	029b      	lsls	r3, r3, #10
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072ee:	801a      	strh	r2, [r3, #0]
 80072f0:	e047      	b.n	8007382 <USB_EPStartXfer+0x1256>
 80072f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f6:	095b      	lsrs	r3, r3, #5
 80072f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80072fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <USB_EPStartXfer+0x11e6>
 8007308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800730c:	3b01      	subs	r3, #1
 800730e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007316:	b29b      	uxth	r3, r3
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	b29b      	uxth	r3, r3
 800731c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007324:	b29a      	uxth	r2, r3
 8007326:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800732a:	801a      	strh	r2, [r3, #0]
 800732c:	e029      	b.n	8007382 <USB_EPStartXfer+0x1256>
 800732e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d121      	bne.n	8007382 <USB_EPStartXfer+0x1256>
 800733e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007342:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800734c:	b29b      	uxth	r3, r3
 800734e:	461a      	mov	r2, r3
 8007350:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007354:	4413      	add	r3, r2
 8007356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800735a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	011a      	lsls	r2, r3, #4
 8007368:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800736c:	4413      	add	r3, r2
 800736e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800737a:	b29a      	uxth	r2, r3
 800737c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007380:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	895b      	ldrh	r3, [r3, #10]
 800738e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6959      	ldr	r1, [r3, #20]
 800739e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073b0:	6800      	ldr	r0, [r0, #0]
 80073b2:	f000 fe31 	bl	8008018 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80073b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073d8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80073dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e4:	8013      	strh	r3, [r2, #0]
 80073e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ea:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80073ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073f2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80073f6:	8812      	ldrh	r2, [r2, #0]
 80073f8:	f082 0210 	eor.w	r2, r2, #16
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007402:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007406:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800740a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800740e:	8812      	ldrh	r2, [r2, #0]
 8007410:	f082 0220 	eor.w	r2, r2, #32
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	441a      	add	r2, r3
 8007430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007434:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744a:	b29b      	uxth	r3, r3
 800744c:	8013      	strh	r3, [r2, #0]
 800744e:	f000 bc9f 	b.w	8007d90 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	7b1b      	ldrb	r3, [r3, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f040 80ae 	bne.w	80075c0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	699a      	ldr	r2, [r3, #24]
 8007470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007474:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	d917      	bls.n	80074b0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699a      	ldr	r2, [r3, #24]
 800749c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a0:	1ad2      	subs	r2, r2, r3
 80074a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	619a      	str	r2, [r3, #24]
 80074ae:	e00e      	b.n	80074ce <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80074b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80074c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2200      	movs	r2, #0
 80074cc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80074ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80074f2:	4413      	add	r3, r2
 80074f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	011a      	lsls	r2, r3, #4
 8007506:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800750a:	4413      	add	r3, r2
 800750c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d116      	bne.n	800754a <USB_EPStartXfer+0x141e>
 800751c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007528:	b29a      	uxth	r2, r3
 800752a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800752e:	801a      	strh	r2, [r3, #0]
 8007530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007540:	b29a      	uxth	r2, r3
 8007542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	e3e8      	b.n	8007d1c <USB_EPStartXfer+0x1bf0>
 800754a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754e:	2b3e      	cmp	r3, #62	; 0x3e
 8007550:	d818      	bhi.n	8007584 <USB_EPStartXfer+0x1458>
 8007552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800755c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d004      	beq.n	8007572 <USB_EPStartXfer+0x1446>
 8007568:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800756c:	3301      	adds	r3, #1
 800756e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007572:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007576:	b29b      	uxth	r3, r3
 8007578:	029b      	lsls	r3, r3, #10
 800757a:	b29a      	uxth	r2, r3
 800757c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007580:	801a      	strh	r2, [r3, #0]
 8007582:	e3cb      	b.n	8007d1c <USB_EPStartXfer+0x1bf0>
 8007584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800758e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007592:	f003 031f 	and.w	r3, r3, #31
 8007596:	2b00      	cmp	r3, #0
 8007598:	d104      	bne.n	80075a4 <USB_EPStartXfer+0x1478>
 800759a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800759e:	3b01      	subs	r3, #1
 80075a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80075a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	029b      	lsls	r3, r3, #10
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	e3ad      	b.n	8007d1c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80075c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	78db      	ldrb	r3, [r3, #3]
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	f040 8200 	bne.w	80079d2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80075d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	785b      	ldrb	r3, [r3, #1]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f040 8091 	bne.w	8007706 <USB_EPStartXfer+0x15da>
 80075e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007600:	b29b      	uxth	r3, r3
 8007602:	461a      	mov	r2, r3
 8007604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007608:	4413      	add	r3, r2
 800760a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800760e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	011a      	lsls	r2, r3, #4
 800761c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007620:	4413      	add	r3, r2
 8007622:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d116      	bne.n	8007668 <USB_EPStartXfer+0x153c>
 800763a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	b29b      	uxth	r3, r3
 8007642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007646:	b29a      	uxth	r2, r3
 8007648:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800764c:	801a      	strh	r2, [r3, #0]
 800764e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765e:	b29a      	uxth	r2, r3
 8007660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	e083      	b.n	8007770 <USB_EPStartXfer+0x1644>
 8007668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	2b3e      	cmp	r3, #62	; 0x3e
 8007676:	d820      	bhi.n	80076ba <USB_EPStartXfer+0x158e>
 8007678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800768a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <USB_EPStartXfer+0x157c>
 800769e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a2:	3301      	adds	r3, #1
 80076a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80076a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	029b      	lsls	r3, r3, #10
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	e05a      	b.n	8007770 <USB_EPStartXfer+0x1644>
 80076ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	095b      	lsrs	r3, r3, #5
 80076c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80076cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	f003 031f 	and.w	r3, r3, #31
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <USB_EPStartXfer+0x15be>
 80076e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e4:	3b01      	subs	r3, #1
 80076e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80076ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	029b      	lsls	r3, r3, #10
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007702:	801a      	strh	r2, [r3, #0]
 8007704:	e034      	b.n	8007770 <USB_EPStartXfer+0x1644>
 8007706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	785b      	ldrb	r3, [r3, #1]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d12c      	bne.n	8007770 <USB_EPStartXfer+0x1644>
 8007716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007728:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007732:	b29b      	uxth	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800773a:	4413      	add	r3, r2
 800773c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	011a      	lsls	r2, r3, #4
 800774e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007752:	4413      	add	r3, r2
 8007754:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800775c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	b29a      	uxth	r2, r3
 800776a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800776e:	801a      	strh	r2, [r3, #0]
 8007770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007774:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800777e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	785b      	ldrb	r3, [r3, #1]
 800778a:	2b00      	cmp	r3, #0
 800778c:	f040 8091 	bne.w	80078b2 <USB_EPStartXfer+0x1786>
 8007790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800779e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	461a      	mov	r2, r3
 80077b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077b4:	4413      	add	r3, r2
 80077b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80077ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	011a      	lsls	r2, r3, #4
 80077c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077cc:	4413      	add	r3, r2
 80077ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d116      	bne.n	8007814 <USB_EPStartXfer+0x16e8>
 80077e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077f8:	801a      	strh	r2, [r3, #0]
 80077fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800780a:	b29a      	uxth	r2, r3
 800780c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007810:	801a      	strh	r2, [r3, #0]
 8007812:	e07c      	b.n	800790e <USB_EPStartXfer+0x17e2>
 8007814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b3e      	cmp	r3, #62	; 0x3e
 8007822:	d820      	bhi.n	8007866 <USB_EPStartXfer+0x173a>
 8007824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	085b      	lsrs	r3, r3, #1
 8007832:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d004      	beq.n	8007854 <USB_EPStartXfer+0x1728>
 800784a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800784e:	3301      	adds	r3, #1
 8007850:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007854:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007858:	b29b      	uxth	r3, r3
 800785a:	029b      	lsls	r3, r3, #10
 800785c:	b29a      	uxth	r2, r3
 800785e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007862:	801a      	strh	r2, [r3, #0]
 8007864:	e053      	b.n	800790e <USB_EPStartXfer+0x17e2>
 8007866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	f003 031f 	and.w	r3, r3, #31
 8007888:	2b00      	cmp	r3, #0
 800788a:	d104      	bne.n	8007896 <USB_EPStartXfer+0x176a>
 800788c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007890:	3b01      	subs	r3, #1
 8007892:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007896:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800789a:	b29b      	uxth	r3, r3
 800789c:	029b      	lsls	r3, r3, #10
 800789e:	b29b      	uxth	r3, r3
 80078a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078ae:	801a      	strh	r2, [r3, #0]
 80078b0:	e02d      	b.n	800790e <USB_EPStartXfer+0x17e2>
 80078b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	785b      	ldrb	r3, [r3, #1]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d125      	bne.n	800790e <USB_EPStartXfer+0x17e2>
 80078c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	461a      	mov	r2, r3
 80078d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078d8:	4413      	add	r3, r2
 80078da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	011a      	lsls	r2, r3, #4
 80078ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078f0:	4413      	add	r3, r2
 80078f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	b29a      	uxth	r2, r3
 8007908:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800790c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800790e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 81fe 	beq.w	8007d1c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007940:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <USB_EPStartXfer+0x182c>
 800794c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10d      	bne.n	8007974 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007958:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800795c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007960:	2b00      	cmp	r3, #0
 8007962:	f040 81db 	bne.w	8007d1c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007966:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	f040 81d4 	bne.w	8007d1c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	b29b      	uxth	r3, r3
 8007992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800799e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	441a      	add	r2, r3
 80079b8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80079bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	8013      	strh	r3, [r2, #0]
 80079d0:	e1a4      	b.n	8007d1c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80079d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	78db      	ldrb	r3, [r3, #3]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	f040 819a 	bne.w	8007d18 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80079e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	699a      	ldr	r2, [r3, #24]
 80079f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d917      	bls.n	8007a30 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a20:	1ad2      	subs	r2, r2, r3
 8007a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	619a      	str	r2, [r3, #24]
 8007a2e:	e00e      	b.n	8007a4e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	785b      	ldrb	r3, [r3, #1]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d178      	bne.n	8007b50 <USB_EPStartXfer+0x1a24>
 8007a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a82:	4413      	add	r3, r2
 8007a84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	011a      	lsls	r2, r3, #4
 8007a96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007aa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d116      	bne.n	8007ada <USB_EPStartXfer+0x19ae>
 8007aac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ad6:	801a      	strh	r2, [r3, #0]
 8007ad8:	e06b      	b.n	8007bb2 <USB_EPStartXfer+0x1a86>
 8007ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ade:	2b3e      	cmp	r3, #62	; 0x3e
 8007ae0:	d818      	bhi.n	8007b14 <USB_EPStartXfer+0x19e8>
 8007ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae6:	085b      	lsrs	r3, r3, #1
 8007ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d004      	beq.n	8007b02 <USB_EPStartXfer+0x19d6>
 8007af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007afc:	3301      	adds	r3, #1
 8007afe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	029b      	lsls	r3, r3, #10
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b10:	801a      	strh	r2, [r3, #0]
 8007b12:	e04e      	b.n	8007bb2 <USB_EPStartXfer+0x1a86>
 8007b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b18:	095b      	lsrs	r3, r3, #5
 8007b1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b22:	f003 031f 	and.w	r3, r3, #31
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d104      	bne.n	8007b34 <USB_EPStartXfer+0x1a08>
 8007b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	029b      	lsls	r3, r3, #10
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b4c:	801a      	strh	r2, [r3, #0]
 8007b4e:	e030      	b.n	8007bb2 <USB_EPStartXfer+0x1a86>
 8007b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	785b      	ldrb	r3, [r3, #1]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d128      	bne.n	8007bb2 <USB_EPStartXfer+0x1a86>
 8007b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b84:	4413      	add	r3, r2
 8007b86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	011a      	lsls	r2, r3, #4
 8007b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ba2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007bb0:	801a      	strh	r2, [r3, #0]
 8007bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	785b      	ldrb	r3, [r3, #1]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d178      	bne.n	8007cc2 <USB_EPStartXfer+0x1b96>
 8007bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	011a      	lsls	r2, r3, #4
 8007c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d116      	bne.n	8007c4c <USB_EPStartXfer+0x1b20>
 8007c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c30:	801a      	strh	r2, [r3, #0]
 8007c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c48:	801a      	strh	r2, [r3, #0]
 8007c4a:	e067      	b.n	8007d1c <USB_EPStartXfer+0x1bf0>
 8007c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c50:	2b3e      	cmp	r3, #62	; 0x3e
 8007c52:	d818      	bhi.n	8007c86 <USB_EPStartXfer+0x1b5a>
 8007c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c58:	085b      	lsrs	r3, r3, #1
 8007c5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <USB_EPStartXfer+0x1b48>
 8007c6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c6e:	3301      	adds	r3, #1
 8007c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	029b      	lsls	r3, r3, #10
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	e04a      	b.n	8007d1c <USB_EPStartXfer+0x1bf0>
 8007c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c8a:	095b      	lsrs	r3, r3, #5
 8007c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c94:	f003 031f 	and.w	r3, r3, #31
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d104      	bne.n	8007ca6 <USB_EPStartXfer+0x1b7a>
 8007c9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	029b      	lsls	r3, r3, #10
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cbe:	801a      	strh	r2, [r3, #0]
 8007cc0:	e02c      	b.n	8007d1c <USB_EPStartXfer+0x1bf0>
 8007cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	785b      	ldrb	r3, [r3, #1]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d124      	bne.n	8007d1c <USB_EPStartXfer+0x1bf0>
 8007cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ce8:	4413      	add	r3, r2
 8007cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	011a      	lsls	r2, r3, #4
 8007cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d00:	4413      	add	r3, r2
 8007d02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	e001      	b.n	8007d1c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e03a      	b.n	8007d92 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d42:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007d46:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007d4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007d52:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007d56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	441a      	add	r2, r3
 8007d78:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d020      	beq.n	8007df0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc4:	81bb      	strh	r3, [r7, #12]
 8007dc6:	89bb      	ldrh	r3, [r7, #12]
 8007dc8:	f083 0310 	eor.w	r3, r3, #16
 8007dcc:	81bb      	strh	r3, [r7, #12]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	441a      	add	r2, r3
 8007dd8:	89bb      	ldrh	r3, [r7, #12]
 8007dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	8013      	strh	r3, [r2, #0]
 8007dee:	e01f      	b.n	8007e30 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e06:	81fb      	strh	r3, [r7, #14]
 8007e08:	89fb      	ldrh	r3, [r7, #14]
 8007e0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e0e:	81fb      	strh	r3, [r7, #14]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	441a      	add	r2, r3
 8007e1a:	89fb      	ldrh	r3, [r7, #14]
 8007e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bc80      	pop	{r7}
 8007e3a:	4770      	bx	lr

08007e3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	7b1b      	ldrb	r3, [r3, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f040 809d 	bne.w	8007f8a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	785b      	ldrb	r3, [r3, #1]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d04c      	beq.n	8007ef2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	823b      	strh	r3, [r7, #16]
 8007e66:	8a3b      	ldrh	r3, [r7, #16]
 8007e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01b      	beq.n	8007ea8 <USB_EPClearStall+0x6c>
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e86:	81fb      	strh	r3, [r7, #14]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	441a      	add	r2, r3
 8007e92:	89fb      	ldrh	r3, [r7, #14]
 8007e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	78db      	ldrb	r3, [r3, #3]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d06c      	beq.n	8007f8a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ec6:	81bb      	strh	r3, [r7, #12]
 8007ec8:	89bb      	ldrh	r3, [r7, #12]
 8007eca:	f083 0320 	eor.w	r3, r3, #32
 8007ece:	81bb      	strh	r3, [r7, #12]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	441a      	add	r2, r3
 8007eda:	89bb      	ldrh	r3, [r7, #12]
 8007edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	8013      	strh	r3, [r2, #0]
 8007ef0:	e04b      	b.n	8007f8a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	82fb      	strh	r3, [r7, #22]
 8007f00:	8afb      	ldrh	r3, [r7, #22]
 8007f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01b      	beq.n	8007f42 <USB_EPClearStall+0x106>
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f20:	82bb      	strh	r3, [r7, #20]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	441a      	add	r2, r3
 8007f2c:	8abb      	ldrh	r3, [r7, #20]
 8007f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f58:	827b      	strh	r3, [r7, #18]
 8007f5a:	8a7b      	ldrh	r3, [r7, #18]
 8007f5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f60:	827b      	strh	r3, [r7, #18]
 8007f62:	8a7b      	ldrh	r3, [r7, #18]
 8007f64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f68:	827b      	strh	r3, [r7, #18]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	441a      	add	r2, r3
 8007f74:	8a7b      	ldrh	r3, [r7, #18]
 8007f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	371c      	adds	r7, #28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	4770      	bx	lr

08007f96 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d103      	bne.n	8007fb0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2280      	movs	r2, #128	; 0x80
 8007fac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bc80      	pop	{r7}
 8007fba:	4770      	bx	lr

08007fbc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bc80      	pop	{r7}
 8007fce:	4770      	bx	lr

08007fd0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc80      	pop	{r7}
 8007fe2:	4770      	bx	lr

08007fe4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr

08008002 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr

08008018 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008018:	b480      	push	{r7}
 800801a:	b08d      	sub	sp, #52	; 0x34
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4611      	mov	r1, r2
 8008024:	461a      	mov	r2, r3
 8008026:	460b      	mov	r3, r1
 8008028:	80fb      	strh	r3, [r7, #6]
 800802a:	4613      	mov	r3, r2
 800802c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800802e:	88bb      	ldrh	r3, [r7, #4]
 8008030:	3301      	adds	r3, #1
 8008032:	085b      	lsrs	r3, r3, #1
 8008034:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800803e:	88fb      	ldrh	r3, [r7, #6]
 8008040:	005a      	lsls	r2, r3, #1
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800804a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008050:	e01e      	b.n	8008090 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	3301      	adds	r3, #1
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b29b      	uxth	r3, r3
 8008064:	021b      	lsls	r3, r3, #8
 8008066:	b29b      	uxth	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	4313      	orrs	r3, r2
 800806e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	b29a      	uxth	r2, r3
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	3302      	adds	r3, #2
 800807c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	3302      	adds	r3, #2
 8008082:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	3301      	adds	r3, #1
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	3b01      	subs	r3, #1
 800808e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1dd      	bne.n	8008052 <USB_WritePMA+0x3a>
  }
}
 8008096:	bf00      	nop
 8008098:	bf00      	nop
 800809a:	3734      	adds	r7, #52	; 0x34
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr

080080a2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b08b      	sub	sp, #44	; 0x2c
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	4611      	mov	r1, r2
 80080ae:	461a      	mov	r2, r3
 80080b0:	460b      	mov	r3, r1
 80080b2:	80fb      	strh	r3, [r7, #6]
 80080b4:	4613      	mov	r3, r2
 80080b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80080b8:	88bb      	ldrh	r3, [r7, #4]
 80080ba:	085b      	lsrs	r3, r3, #1
 80080bc:	b29b      	uxth	r3, r3
 80080be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080c8:	88fb      	ldrh	r3, [r7, #6]
 80080ca:	005a      	lsls	r2, r3, #1
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080d4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
 80080da:	e01b      	b.n	8008114 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	3302      	adds	r3, #2
 80080e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	3301      	adds	r3, #1
 80080f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	0a1b      	lsrs	r3, r3, #8
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	3301      	adds	r3, #1
 8008106:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	3302      	adds	r3, #2
 800810c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	3b01      	subs	r3, #1
 8008112:	627b      	str	r3, [r7, #36]	; 0x24
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e0      	bne.n	80080dc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800811a:	88bb      	ldrh	r3, [r7, #4]
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	b29b      	uxth	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d007      	beq.n	8008136 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	b2da      	uxtb	r2, r3
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	701a      	strb	r2, [r3, #0]
  }
}
 8008136:	bf00      	nop
 8008138:	372c      	adds	r7, #44	; 0x2c
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr

08008140 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	7c1b      	ldrb	r3, [r3, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d115      	bne.n	8008184 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800815c:	2202      	movs	r2, #2
 800815e:	2181      	movs	r1, #129	; 0x81
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 fe30 	bl	8009dc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800816c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008170:	2202      	movs	r2, #2
 8008172:	2101      	movs	r1, #1
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 fe26 	bl	8009dc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008182:	e012      	b.n	80081aa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008184:	2340      	movs	r3, #64	; 0x40
 8008186:	2202      	movs	r2, #2
 8008188:	2181      	movs	r1, #129	; 0x81
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 fe1b 	bl	8009dc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008196:	2340      	movs	r3, #64	; 0x40
 8008198:	2202      	movs	r2, #2
 800819a:	2101      	movs	r1, #1
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 fe12 	bl	8009dc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081aa:	2308      	movs	r3, #8
 80081ac:	2203      	movs	r2, #3
 80081ae:	2182      	movs	r1, #130	; 0x82
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 fe08 	bl	8009dc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80081bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80081c0:	f001 ff28 	bl	800a014 <USBD_static_malloc>
 80081c4:	4602      	mov	r2, r0
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d102      	bne.n	80081dc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80081d6:	2301      	movs	r3, #1
 80081d8:	73fb      	strb	r3, [r7, #15]
 80081da:	e026      	b.n	800822a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	7c1b      	ldrb	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d109      	bne.n	800821a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800820c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008210:	2101      	movs	r1, #1
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 fec8 	bl	8009fa8 <USBD_LL_PrepareReceive>
 8008218:	e007      	b.n	800822a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008220:	2340      	movs	r3, #64	; 0x40
 8008222:	2101      	movs	r1, #1
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 febf 	bl	8009fa8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800822a:	7bfb      	ldrb	r3, [r7, #15]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008244:	2181      	movs	r1, #129	; 0x81
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 fde3 	bl	8009e12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008252:	2101      	movs	r1, #1
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 fddc 	bl	8009e12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008262:	2182      	movs	r1, #130	; 0x82
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 fdd4 	bl	8009e12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828a:	4618      	mov	r0, r3
 800828c:	f001 fece 	bl	800a02c <USBD_static_free>
    pdev->pClassData = NULL;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b086      	sub	sp, #24
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d039      	beq.n	8008340 <USBD_CDC_Setup+0x9e>
 80082cc:	2b20      	cmp	r3, #32
 80082ce:	d17f      	bne.n	80083d0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	88db      	ldrh	r3, [r3, #6]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d029      	beq.n	800832c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	b25b      	sxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da11      	bge.n	8008306 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80082ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	88d2      	ldrh	r2, [r2, #6]
 80082f4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80082f6:	6939      	ldr	r1, [r7, #16]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	88db      	ldrh	r3, [r3, #6]
 80082fc:	461a      	mov	r2, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 f9d9 	bl	80096b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008304:	e06b      	b.n	80083de <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	785a      	ldrb	r2, [r3, #1]
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	88db      	ldrh	r3, [r3, #6]
 8008314:	b2da      	uxtb	r2, r3
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800831c:	6939      	ldr	r1, [r7, #16]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88db      	ldrh	r3, [r3, #6]
 8008322:	461a      	mov	r2, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 f9f4 	bl	8009712 <USBD_CtlPrepareRx>
      break;
 800832a:	e058      	b.n	80083de <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	7850      	ldrb	r0, [r2, #1]
 8008338:	2200      	movs	r2, #0
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	4798      	blx	r3
      break;
 800833e:	e04e      	b.n	80083de <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	785b      	ldrb	r3, [r3, #1]
 8008344:	2b0b      	cmp	r3, #11
 8008346:	d02e      	beq.n	80083a6 <USBD_CDC_Setup+0x104>
 8008348:	2b0b      	cmp	r3, #11
 800834a:	dc38      	bgt.n	80083be <USBD_CDC_Setup+0x11c>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <USBD_CDC_Setup+0xb4>
 8008350:	2b0a      	cmp	r3, #10
 8008352:	d014      	beq.n	800837e <USBD_CDC_Setup+0xdc>
 8008354:	e033      	b.n	80083be <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800835c:	2b03      	cmp	r3, #3
 800835e:	d107      	bne.n	8008370 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008360:	f107 030c 	add.w	r3, r7, #12
 8008364:	2202      	movs	r2, #2
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 f9a4 	bl	80096b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800836e:	e02e      	b.n	80083ce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 f935 	bl	80095e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008378:	2302      	movs	r3, #2
 800837a:	75fb      	strb	r3, [r7, #23]
          break;
 800837c:	e027      	b.n	80083ce <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008384:	2b03      	cmp	r3, #3
 8008386:	d107      	bne.n	8008398 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008388:	f107 030f 	add.w	r3, r7, #15
 800838c:	2201      	movs	r2, #1
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 f990 	bl	80096b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008396:	e01a      	b.n	80083ce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 f921 	bl	80095e2 <USBD_CtlError>
            ret = USBD_FAIL;
 80083a0:	2302      	movs	r3, #2
 80083a2:	75fb      	strb	r3, [r7, #23]
          break;
 80083a4:	e013      	b.n	80083ce <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d00d      	beq.n	80083cc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 f915 	bl	80095e2 <USBD_CtlError>
            ret = USBD_FAIL;
 80083b8:	2302      	movs	r3, #2
 80083ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083bc:	e006      	b.n	80083cc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 f90e 	bl	80095e2 <USBD_CtlError>
          ret = USBD_FAIL;
 80083c6:	2302      	movs	r3, #2
 80083c8:	75fb      	strb	r3, [r7, #23]
          break;
 80083ca:	e000      	b.n	80083ce <USBD_CDC_Setup+0x12c>
          break;
 80083cc:	bf00      	nop
      }
      break;
 80083ce:	e006      	b.n	80083de <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f001 f905 	bl	80095e2 <USBD_CtlError>
      ret = USBD_FAIL;
 80083d8:	2302      	movs	r3, #2
 80083da:	75fb      	strb	r3, [r7, #23]
      break;
 80083dc:	bf00      	nop
  }

  return ret;
 80083de:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3718      	adds	r7, #24
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008402:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840a:	2b00      	cmp	r3, #0
 800840c:	d03a      	beq.n	8008484 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	6879      	ldr	r1, [r7, #4]
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	440b      	add	r3, r1
 800841c:	331c      	adds	r3, #28
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d029      	beq.n	8008478 <USBD_CDC_DataIn+0x90>
 8008424:	78fa      	ldrb	r2, [r7, #3]
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	4613      	mov	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	440b      	add	r3, r1
 8008432:	331c      	adds	r3, #28
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	78f9      	ldrb	r1, [r7, #3]
 8008438:	68b8      	ldr	r0, [r7, #8]
 800843a:	460b      	mov	r3, r1
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	440b      	add	r3, r1
 8008440:	00db      	lsls	r3, r3, #3
 8008442:	4403      	add	r3, r0
 8008444:	3338      	adds	r3, #56	; 0x38
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	fbb2 f1f3 	udiv	r1, r2, r3
 800844c:	fb01 f303 	mul.w	r3, r1, r3
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d110      	bne.n	8008478 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008456:	78fa      	ldrb	r2, [r7, #3]
 8008458:	6879      	ldr	r1, [r7, #4]
 800845a:	4613      	mov	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	440b      	add	r3, r1
 8008464:	331c      	adds	r3, #28
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800846a:	78f9      	ldrb	r1, [r7, #3]
 800846c:	2300      	movs	r3, #0
 800846e:	2200      	movs	r2, #0
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 fd76 	bl	8009f62 <USBD_LL_Transmit>
 8008476:	e003      	b.n	8008480 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	e000      	b.n	8008486 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008484:	2302      	movs	r3, #2
  }
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084a2:	78fb      	ldrb	r3, [r7, #3]
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 fda1 	bl	8009fee <USBD_LL_GetRxDataSize>
 80084ac:	4602      	mov	r2, r0
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00d      	beq.n	80084da <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80084d2:	4611      	mov	r1, r2
 80084d4:	4798      	blx	r3

    return USBD_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	e000      	b.n	80084dc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80084da:	2302      	movs	r3, #2
  }
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d015      	beq.n	800852a <USBD_CDC_EP0_RxReady+0x46>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008504:	2bff      	cmp	r3, #255	; 0xff
 8008506:	d010      	beq.n	800852a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008516:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800851e:	b292      	uxth	r2, r2
 8008520:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	22ff      	movs	r2, #255	; 0xff
 8008526:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2243      	movs	r2, #67	; 0x43
 8008540:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008542:	4b03      	ldr	r3, [pc, #12]	; (8008550 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008544:	4618      	mov	r0, r3
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	bc80      	pop	{r7}
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	20000094 	.word	0x20000094

08008554 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2243      	movs	r2, #67	; 0x43
 8008560:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008562:	4b03      	ldr	r3, [pc, #12]	; (8008570 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	20000050 	.word	0x20000050

08008574 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2243      	movs	r2, #67	; 0x43
 8008580:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008582:	4b03      	ldr	r3, [pc, #12]	; (8008590 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	200000d8 	.word	0x200000d8

08008594 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	220a      	movs	r2, #10
 80085a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80085a2:	4b03      	ldr	r3, [pc, #12]	; (80085b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bc80      	pop	{r7}
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	2000000c 	.word	0x2000000c

080085b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80085be:	2302      	movs	r3, #2
 80085c0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d005      	beq.n	80085d4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	bc80      	pop	{r7}
 80085de:	4770      	bx	lr

080085e0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	4613      	mov	r3, r2
 80085ec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80085fe:	88fa      	ldrh	r2, [r7, #6]
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	371c      	adds	r7, #28
 800860c:	46bd      	mov	sp, r7
 800860e:	bc80      	pop	{r7}
 8008610:	4770      	bx	lr

08008612 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008612:	b480      	push	{r7}
 8008614:	b085      	sub	sp, #20
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008622:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	bc80      	pop	{r7}
 8008636:	4770      	bx	lr

08008638 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008646:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800864e:	2b00      	cmp	r3, #0
 8008650:	d017      	beq.n	8008682 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7c1b      	ldrb	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008664:	2101      	movs	r1, #1
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 fc9e 	bl	8009fa8 <USBD_LL_PrepareReceive>
 800866c:	e007      	b.n	800867e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008674:	2340      	movs	r3, #64	; 0x40
 8008676:	2101      	movs	r1, #1
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 fc95 	bl	8009fa8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	e000      	b.n	8008684 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008682:	2302      	movs	r3, #2
  }
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80086a0:	2302      	movs	r3, #2
 80086a2:	e01a      	b.n	80086da <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	79fa      	ldrb	r2, [r7, #7]
 80086d0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f001 fb02 	bl	8009cdc <USBD_LL_Init>

  return USBD_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d006      	beq.n	8008704 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	73fb      	strb	r3, [r7, #15]
 8008702:	e001      	b.n	8008708 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008704:	2302      	movs	r3, #2
 8008706:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr

08008714 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 fb37 	bl	8009d90 <USBD_LL_Start>

  return USBD_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr

08008740 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800874c:	2302      	movs	r3, #2
 800874e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00c      	beq.n	8008774 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	78fa      	ldrb	r2, [r7, #3]
 8008764:	4611      	mov	r1, r2
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	4798      	blx	r3
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008774:	7bfb      	ldrb	r3, [r7, #15]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	460b      	mov	r3, r1
 8008788:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	78fa      	ldrb	r2, [r7, #3]
 8008794:	4611      	mov	r1, r2
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	4798      	blx	r3

  return USBD_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fed7 	bl	800956a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087ca:	461a      	mov	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80087d8:	f003 031f 	and.w	r3, r3, #31
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d016      	beq.n	800880e <USBD_LL_SetupStage+0x6a>
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d81c      	bhi.n	800881e <USBD_LL_SetupStage+0x7a>
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <USBD_LL_SetupStage+0x4a>
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d008      	beq.n	80087fe <USBD_LL_SetupStage+0x5a>
 80087ec:	e017      	b.n	800881e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f9ca 	bl	8008b90 <USBD_StdDevReq>
      break;
 80087fc:	e01a      	b.n	8008834 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa2c 	bl	8008c64 <USBD_StdItfReq>
      break;
 800880c:	e012      	b.n	8008834 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa6c 	bl	8008cf4 <USBD_StdEPReq>
      break;
 800881c:	e00a      	b.n	8008834 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008824:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008828:	b2db      	uxtb	r3, r3
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 fb0f 	bl	8009e50 <USBD_LL_StallEP>
      break;
 8008832:	bf00      	nop
  }

  return USBD_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b086      	sub	sp, #24
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	460b      	mov	r3, r1
 8008848:	607a      	str	r2, [r7, #4]
 800884a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d14b      	bne.n	80088ea <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008858:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008860:	2b03      	cmp	r3, #3
 8008862:	d134      	bne.n	80088ce <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	68da      	ldr	r2, [r3, #12]
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	429a      	cmp	r2, r3
 800886e:	d919      	bls.n	80088a4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	68da      	ldr	r2, [r3, #12]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	1ad2      	subs	r2, r2, r3
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008886:	429a      	cmp	r2, r3
 8008888:	d203      	bcs.n	8008892 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800888e:	b29b      	uxth	r3, r3
 8008890:	e002      	b.n	8008898 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008896:	b29b      	uxth	r3, r3
 8008898:	461a      	mov	r2, r3
 800889a:	6879      	ldr	r1, [r7, #4]
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 ff56 	bl	800974e <USBD_CtlContinueRx>
 80088a2:	e038      	b.n	8008916 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d105      	bne.n	80088c6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 ff53 	bl	8009772 <USBD_CtlSendStatus>
 80088cc:	e023      	b.n	8008916 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088d4:	2b05      	cmp	r3, #5
 80088d6:	d11e      	bne.n	8008916 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80088e0:	2100      	movs	r1, #0
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f001 fab4 	bl	8009e50 <USBD_LL_StallEP>
 80088e8:	e015      	b.n	8008916 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00d      	beq.n	8008912 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d108      	bne.n	8008912 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	7afa      	ldrb	r2, [r7, #11]
 800890a:	4611      	mov	r1, r2
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	4798      	blx	r3
 8008910:	e001      	b.n	8008916 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008912:	2302      	movs	r3, #2
 8008914:	e000      	b.n	8008918 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	460b      	mov	r3, r1
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800892e:	7afb      	ldrb	r3, [r7, #11]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d17f      	bne.n	8008a34 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3314      	adds	r3, #20
 8008938:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008940:	2b02      	cmp	r3, #2
 8008942:	d15c      	bne.n	80089fe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	68da      	ldr	r2, [r3, #12]
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	429a      	cmp	r2, r3
 800894e:	d915      	bls.n	800897c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	1ad2      	subs	r2, r2, r3
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	b29b      	uxth	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 fec0 	bl	80096ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800896e:	2300      	movs	r3, #0
 8008970:	2200      	movs	r2, #0
 8008972:	2100      	movs	r1, #0
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f001 fb17 	bl	8009fa8 <USBD_LL_PrepareReceive>
 800897a:	e04e      	b.n	8008a1a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	6912      	ldr	r2, [r2, #16]
 8008984:	fbb3 f1f2 	udiv	r1, r3, r2
 8008988:	fb01 f202 	mul.w	r2, r1, r2
 800898c:	1a9b      	subs	r3, r3, r2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d11c      	bne.n	80089cc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	689a      	ldr	r2, [r3, #8]
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800899a:	429a      	cmp	r2, r3
 800899c:	d316      	bcc.n	80089cc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d20f      	bcs.n	80089cc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80089ac:	2200      	movs	r2, #0
 80089ae:	2100      	movs	r1, #0
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fe9c 	bl	80096ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089be:	2300      	movs	r3, #0
 80089c0:	2200      	movs	r2, #0
 80089c2:	2100      	movs	r1, #0
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f001 faef 	bl	8009fa8 <USBD_LL_PrepareReceive>
 80089ca:	e026      	b.n	8008a1a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00a      	beq.n	80089ee <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d105      	bne.n	80089ee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80089ee:	2180      	movs	r1, #128	; 0x80
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f001 fa2d 	bl	8009e50 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f000 fece 	bl	8009798 <USBD_CtlReceiveStatus>
 80089fc:	e00d      	b.n	8008a1a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d004      	beq.n	8008a12 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d103      	bne.n	8008a1a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008a12:	2180      	movs	r1, #128	; 0x80
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f001 fa1b 	bl	8009e50 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d11d      	bne.n	8008a60 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7ff fe81 	bl	800872c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008a32:	e015      	b.n	8008a60 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00d      	beq.n	8008a5c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d108      	bne.n	8008a5c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	7afa      	ldrb	r2, [r7, #11]
 8008a54:	4611      	mov	r1, r2
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	4798      	blx	r3
 8008a5a:	e001      	b.n	8008a60 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e000      	b.n	8008a62 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3718      	adds	r7, #24
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a72:	2340      	movs	r3, #64	; 0x40
 8008a74:	2200      	movs	r2, #0
 8008a76:	2100      	movs	r1, #0
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f001 f9a4 	bl	8009dc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2240      	movs	r2, #64	; 0x40
 8008a8a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a8e:	2340      	movs	r3, #64	; 0x40
 8008a90:	2200      	movs	r2, #0
 8008a92:	2180      	movs	r1, #128	; 0x80
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f001 f996 	bl	8009dc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2240      	movs	r2, #64	; 0x40
 8008aa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	6852      	ldr	r2, [r2, #4]
 8008ada:	b2d2      	uxtb	r2, r2
 8008adc:	4611      	mov	r1, r2
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
  }

  return USBD_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	78fa      	ldrb	r2, [r7, #3]
 8008afc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bc80      	pop	{r7}
 8008b08:	4770      	bx	lr

08008b0a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2204      	movs	r2, #4
 8008b22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr

08008b32 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d105      	bne.n	8008b50 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bc80      	pop	{r7}
 8008b5a:	4770      	bx	lr

08008b5c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d10b      	bne.n	8008b86 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d005      	beq.n	8008b86 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	d005      	beq.n	8008bb6 <USBD_StdDevReq+0x26>
 8008baa:	2b40      	cmp	r3, #64	; 0x40
 8008bac:	d84f      	bhi.n	8008c4e <USBD_StdDevReq+0xbe>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d009      	beq.n	8008bc6 <USBD_StdDevReq+0x36>
 8008bb2:	2b20      	cmp	r3, #32
 8008bb4:	d14b      	bne.n	8008c4e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	4798      	blx	r3
      break;
 8008bc4:	e048      	b.n	8008c58 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	785b      	ldrb	r3, [r3, #1]
 8008bca:	2b09      	cmp	r3, #9
 8008bcc:	d839      	bhi.n	8008c42 <USBD_StdDevReq+0xb2>
 8008bce:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <USBD_StdDevReq+0x44>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008c25 	.word	0x08008c25
 8008bd8:	08008c39 	.word	0x08008c39
 8008bdc:	08008c43 	.word	0x08008c43
 8008be0:	08008c2f 	.word	0x08008c2f
 8008be4:	08008c43 	.word	0x08008c43
 8008be8:	08008c07 	.word	0x08008c07
 8008bec:	08008bfd 	.word	0x08008bfd
 8008bf0:	08008c43 	.word	0x08008c43
 8008bf4:	08008c1b 	.word	0x08008c1b
 8008bf8:	08008c11 	.word	0x08008c11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f9dc 	bl	8008fbc <USBD_GetDescriptor>
          break;
 8008c04:	e022      	b.n	8008c4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fb3f 	bl	800928c <USBD_SetAddress>
          break;
 8008c0e:	e01d      	b.n	8008c4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fb7e 	bl	8009314 <USBD_SetConfig>
          break;
 8008c18:	e018      	b.n	8008c4c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fc07 	bl	8009430 <USBD_GetConfig>
          break;
 8008c22:	e013      	b.n	8008c4c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fc37 	bl	800949a <USBD_GetStatus>
          break;
 8008c2c:	e00e      	b.n	8008c4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fc65 	bl	8009500 <USBD_SetFeature>
          break;
 8008c36:	e009      	b.n	8008c4c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fc74 	bl	8009528 <USBD_ClrFeature>
          break;
 8008c40:	e004      	b.n	8008c4c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fccc 	bl	80095e2 <USBD_CtlError>
          break;
 8008c4a:	bf00      	nop
      }
      break;
 8008c4c:	e004      	b.n	8008c58 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fcc6 	bl	80095e2 <USBD_CtlError>
      break;
 8008c56:	bf00      	nop
  }

  return ret;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop

08008c64 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c7a:	2b40      	cmp	r3, #64	; 0x40
 8008c7c:	d005      	beq.n	8008c8a <USBD_StdItfReq+0x26>
 8008c7e:	2b40      	cmp	r3, #64	; 0x40
 8008c80:	d82e      	bhi.n	8008ce0 <USBD_StdItfReq+0x7c>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <USBD_StdItfReq+0x26>
 8008c86:	2b20      	cmp	r3, #32
 8008c88:	d12a      	bne.n	8008ce0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c90:	3b01      	subs	r3, #1
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d81d      	bhi.n	8008cd2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	889b      	ldrh	r3, [r3, #4]
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d813      	bhi.n	8008cc8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	4798      	blx	r3
 8008cae:	4603      	mov	r3, r0
 8008cb0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	88db      	ldrh	r3, [r3, #6]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d110      	bne.n	8008cdc <USBD_StdItfReq+0x78>
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10d      	bne.n	8008cdc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fd56 	bl	8009772 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008cc6:	e009      	b.n	8008cdc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fc89 	bl	80095e2 <USBD_CtlError>
          break;
 8008cd0:	e004      	b.n	8008cdc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fc84 	bl	80095e2 <USBD_CtlError>
          break;
 8008cda:	e000      	b.n	8008cde <USBD_StdItfReq+0x7a>
          break;
 8008cdc:	bf00      	nop
      }
      break;
 8008cde:	e004      	b.n	8008cea <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fc7d 	bl	80095e2 <USBD_CtlError>
      break;
 8008ce8:	bf00      	nop
  }

  return USBD_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	889b      	ldrh	r3, [r3, #4]
 8008d06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d10:	2b40      	cmp	r3, #64	; 0x40
 8008d12:	d007      	beq.n	8008d24 <USBD_StdEPReq+0x30>
 8008d14:	2b40      	cmp	r3, #64	; 0x40
 8008d16:	f200 8146 	bhi.w	8008fa6 <USBD_StdEPReq+0x2b2>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <USBD_StdEPReq+0x40>
 8008d1e:	2b20      	cmp	r3, #32
 8008d20:	f040 8141 	bne.w	8008fa6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
      break;
 8008d32:	e13d      	b.n	8008fb0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d3c:	2b20      	cmp	r3, #32
 8008d3e:	d10a      	bne.n	8008d56 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	4798      	blx	r3
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	e12d      	b.n	8008fb2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	785b      	ldrb	r3, [r3, #1]
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d007      	beq.n	8008d6e <USBD_StdEPReq+0x7a>
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	f300 811b 	bgt.w	8008f9a <USBD_StdEPReq+0x2a6>
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d072      	beq.n	8008e4e <USBD_StdEPReq+0x15a>
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d03a      	beq.n	8008de2 <USBD_StdEPReq+0xee>
 8008d6c:	e115      	b.n	8008f9a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d002      	beq.n	8008d7e <USBD_StdEPReq+0x8a>
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d015      	beq.n	8008da8 <USBD_StdEPReq+0xb4>
 8008d7c:	e02b      	b.n	8008dd6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00c      	beq.n	8008d9e <USBD_StdEPReq+0xaa>
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	2b80      	cmp	r3, #128	; 0x80
 8008d88:	d009      	beq.n	8008d9e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 f85e 	bl	8009e50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d94:	2180      	movs	r1, #128	; 0x80
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 f85a 	bl	8009e50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d9c:	e020      	b.n	8008de0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fc1e 	bl	80095e2 <USBD_CtlError>
              break;
 8008da6:	e01b      	b.n	8008de0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	885b      	ldrh	r3, [r3, #2]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10e      	bne.n	8008dce <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008db0:	7bbb      	ldrb	r3, [r7, #14]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00b      	beq.n	8008dce <USBD_StdEPReq+0xda>
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	2b80      	cmp	r3, #128	; 0x80
 8008dba:	d008      	beq.n	8008dce <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	88db      	ldrh	r3, [r3, #6]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d104      	bne.n	8008dce <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 f841 	bl	8009e50 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fccf 	bl	8009772 <USBD_CtlSendStatus>

              break;
 8008dd4:	e004      	b.n	8008de0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fc02 	bl	80095e2 <USBD_CtlError>
              break;
 8008dde:	bf00      	nop
          }
          break;
 8008de0:	e0e0      	b.n	8008fa4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d002      	beq.n	8008df2 <USBD_StdEPReq+0xfe>
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d015      	beq.n	8008e1c <USBD_StdEPReq+0x128>
 8008df0:	e026      	b.n	8008e40 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00c      	beq.n	8008e12 <USBD_StdEPReq+0x11e>
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	2b80      	cmp	r3, #128	; 0x80
 8008dfc:	d009      	beq.n	8008e12 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 f824 	bl	8009e50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e08:	2180      	movs	r1, #128	; 0x80
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f001 f820 	bl	8009e50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e10:	e01c      	b.n	8008e4c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fbe4 	bl	80095e2 <USBD_CtlError>
              break;
 8008e1a:	e017      	b.n	8008e4c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	885b      	ldrh	r3, [r3, #2]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d112      	bne.n	8008e4a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 f82b 	bl	8009e8e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fc9a 	bl	8009772 <USBD_CtlSendStatus>
              }
              break;
 8008e3e:	e004      	b.n	8008e4a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fbcd 	bl	80095e2 <USBD_CtlError>
              break;
 8008e48:	e000      	b.n	8008e4c <USBD_StdEPReq+0x158>
              break;
 8008e4a:	bf00      	nop
          }
          break;
 8008e4c:	e0aa      	b.n	8008fa4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d002      	beq.n	8008e5e <USBD_StdEPReq+0x16a>
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d032      	beq.n	8008ec2 <USBD_StdEPReq+0x1ce>
 8008e5c:	e097      	b.n	8008f8e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d007      	beq.n	8008e74 <USBD_StdEPReq+0x180>
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	2b80      	cmp	r3, #128	; 0x80
 8008e68:	d004      	beq.n	8008e74 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fbb8 	bl	80095e2 <USBD_CtlError>
                break;
 8008e72:	e091      	b.n	8008f98 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	da0b      	bge.n	8008e94 <USBD_StdEPReq+0x1a0>
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e82:	4613      	mov	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	3310      	adds	r3, #16
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	4413      	add	r3, r2
 8008e90:	3304      	adds	r3, #4
 8008e92:	e00b      	b.n	8008eac <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	3304      	adds	r3, #4
 8008eac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fbfb 	bl	80096b6 <USBD_CtlSendData>
              break;
 8008ec0:	e06a      	b.n	8008f98 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ec2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	da11      	bge.n	8008eee <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	f003 020f 	and.w	r2, r3, #15
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	440b      	add	r3, r1
 8008edc:	3318      	adds	r3, #24
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d117      	bne.n	8008f14 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fb7b 	bl	80095e2 <USBD_CtlError>
                  break;
 8008eec:	e054      	b.n	8008f98 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
 8008ef0:	f003 020f 	and.w	r2, r3, #15
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d104      	bne.n	8008f14 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fb68 	bl	80095e2 <USBD_CtlError>
                  break;
 8008f12:	e041      	b.n	8008f98 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	da0b      	bge.n	8008f34 <USBD_StdEPReq+0x240>
 8008f1c:	7bbb      	ldrb	r3, [r7, #14]
 8008f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	3310      	adds	r3, #16
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	4413      	add	r3, r2
 8008f30:	3304      	adds	r3, #4
 8008f32:	e00b      	b.n	8008f4c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	4413      	add	r3, r2
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <USBD_StdEPReq+0x266>
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b80      	cmp	r3, #128	; 0x80
 8008f58:	d103      	bne.n	8008f62 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	e00e      	b.n	8008f80 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008f62:	7bbb      	ldrb	r3, [r7, #14]
 8008f64:	4619      	mov	r1, r3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 ffb0 	bl	8009ecc <USBD_LL_IsStallEP>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2201      	movs	r2, #1
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	e002      	b.n	8008f80 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2202      	movs	r2, #2
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fb95 	bl	80096b6 <USBD_CtlSendData>
              break;
 8008f8c:	e004      	b.n	8008f98 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fb26 	bl	80095e2 <USBD_CtlError>
              break;
 8008f96:	bf00      	nop
          }
          break;
 8008f98:	e004      	b.n	8008fa4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fb20 	bl	80095e2 <USBD_CtlError>
          break;
 8008fa2:	bf00      	nop
      }
      break;
 8008fa4:	e004      	b.n	8008fb0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fb1a 	bl	80095e2 <USBD_CtlError>
      break;
 8008fae:	bf00      	nop
  }

  return ret;
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
	...

08008fbc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	885b      	ldrh	r3, [r3, #2]
 8008fd6:	0a1b      	lsrs	r3, r3, #8
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	2b06      	cmp	r3, #6
 8008fde:	f200 8128 	bhi.w	8009232 <USBD_GetDescriptor+0x276>
 8008fe2:	a201      	add	r2, pc, #4	; (adr r2, 8008fe8 <USBD_GetDescriptor+0x2c>)
 8008fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe8:	08009005 	.word	0x08009005
 8008fec:	0800901d 	.word	0x0800901d
 8008ff0:	0800905d 	.word	0x0800905d
 8008ff4:	08009233 	.word	0x08009233
 8008ff8:	08009233 	.word	0x08009233
 8008ffc:	080091d3 	.word	0x080091d3
 8009000:	080091ff 	.word	0x080091ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7c12      	ldrb	r2, [r2, #16]
 8009010:	f107 0108 	add.w	r1, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
      break;
 800901a:	e112      	b.n	8009242 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	7c1b      	ldrb	r3, [r3, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10d      	bne.n	8009040 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902c:	f107 0208 	add.w	r2, r7, #8
 8009030:	4610      	mov	r0, r2
 8009032:	4798      	blx	r3
 8009034:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	3301      	adds	r3, #1
 800903a:	2202      	movs	r2, #2
 800903c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800903e:	e100      	b.n	8009242 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009048:	f107 0208 	add.w	r2, r7, #8
 800904c:	4610      	mov	r0, r2
 800904e:	4798      	blx	r3
 8009050:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3301      	adds	r3, #1
 8009056:	2202      	movs	r2, #2
 8009058:	701a      	strb	r2, [r3, #0]
      break;
 800905a:	e0f2      	b.n	8009242 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	885b      	ldrh	r3, [r3, #2]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b05      	cmp	r3, #5
 8009064:	f200 80ac 	bhi.w	80091c0 <USBD_GetDescriptor+0x204>
 8009068:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <USBD_GetDescriptor+0xb4>)
 800906a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906e:	bf00      	nop
 8009070:	08009089 	.word	0x08009089
 8009074:	080090bd 	.word	0x080090bd
 8009078:	080090f1 	.word	0x080090f1
 800907c:	08009125 	.word	0x08009125
 8009080:	08009159 	.word	0x08009159
 8009084:	0800918d 	.word	0x0800918d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	7c12      	ldrb	r2, [r2, #16]
 80090a0:	f107 0108 	add.w	r1, r7, #8
 80090a4:	4610      	mov	r0, r2
 80090a6:	4798      	blx	r3
 80090a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090aa:	e091      	b.n	80091d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa97 	bl	80095e2 <USBD_CtlError>
            err++;
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	3301      	adds	r3, #1
 80090b8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ba:	e089      	b.n	80091d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	7c12      	ldrb	r2, [r2, #16]
 80090d4:	f107 0108 	add.w	r1, r7, #8
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090de:	e077      	b.n	80091d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fa7d 	bl	80095e2 <USBD_CtlError>
            err++;
 80090e8:	7afb      	ldrb	r3, [r7, #11]
 80090ea:	3301      	adds	r3, #1
 80090ec:	72fb      	strb	r3, [r7, #11]
          break;
 80090ee:	e06f      	b.n	80091d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00b      	beq.n	8009114 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	7c12      	ldrb	r2, [r2, #16]
 8009108:	f107 0108 	add.w	r1, r7, #8
 800910c:	4610      	mov	r0, r2
 800910e:	4798      	blx	r3
 8009110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009112:	e05d      	b.n	80091d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fa63 	bl	80095e2 <USBD_CtlError>
            err++;
 800911c:	7afb      	ldrb	r3, [r7, #11]
 800911e:	3301      	adds	r3, #1
 8009120:	72fb      	strb	r3, [r7, #11]
          break;
 8009122:	e055      	b.n	80091d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00b      	beq.n	8009148 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	7c12      	ldrb	r2, [r2, #16]
 800913c:	f107 0108 	add.w	r1, r7, #8
 8009140:	4610      	mov	r0, r2
 8009142:	4798      	blx	r3
 8009144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009146:	e043      	b.n	80091d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fa49 	bl	80095e2 <USBD_CtlError>
            err++;
 8009150:	7afb      	ldrb	r3, [r7, #11]
 8009152:	3301      	adds	r3, #1
 8009154:	72fb      	strb	r3, [r7, #11]
          break;
 8009156:	e03b      	b.n	80091d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00b      	beq.n	800917c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800916a:	695b      	ldr	r3, [r3, #20]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	7c12      	ldrb	r2, [r2, #16]
 8009170:	f107 0108 	add.w	r1, r7, #8
 8009174:	4610      	mov	r0, r2
 8009176:	4798      	blx	r3
 8009178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800917a:	e029      	b.n	80091d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fa2f 	bl	80095e2 <USBD_CtlError>
            err++;
 8009184:	7afb      	ldrb	r3, [r7, #11]
 8009186:	3301      	adds	r3, #1
 8009188:	72fb      	strb	r3, [r7, #11]
          break;
 800918a:	e021      	b.n	80091d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00b      	beq.n	80091b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	7c12      	ldrb	r2, [r2, #16]
 80091a4:	f107 0108 	add.w	r1, r7, #8
 80091a8:	4610      	mov	r0, r2
 80091aa:	4798      	blx	r3
 80091ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ae:	e00f      	b.n	80091d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fa15 	bl	80095e2 <USBD_CtlError>
            err++;
 80091b8:	7afb      	ldrb	r3, [r7, #11]
 80091ba:	3301      	adds	r3, #1
 80091bc:	72fb      	strb	r3, [r7, #11]
          break;
 80091be:	e007      	b.n	80091d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fa0d 	bl	80095e2 <USBD_CtlError>
          err++;
 80091c8:	7afb      	ldrb	r3, [r7, #11]
 80091ca:	3301      	adds	r3, #1
 80091cc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80091ce:	e038      	b.n	8009242 <USBD_GetDescriptor+0x286>
 80091d0:	e037      	b.n	8009242 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	7c1b      	ldrb	r3, [r3, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d109      	bne.n	80091ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e2:	f107 0208 	add.w	r2, r7, #8
 80091e6:	4610      	mov	r0, r2
 80091e8:	4798      	blx	r3
 80091ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091ec:	e029      	b.n	8009242 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f9f6 	bl	80095e2 <USBD_CtlError>
        err++;
 80091f6:	7afb      	ldrb	r3, [r7, #11]
 80091f8:	3301      	adds	r3, #1
 80091fa:	72fb      	strb	r3, [r7, #11]
      break;
 80091fc:	e021      	b.n	8009242 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	7c1b      	ldrb	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10d      	bne.n	8009222 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800920c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920e:	f107 0208 	add.w	r2, r7, #8
 8009212:	4610      	mov	r0, r2
 8009214:	4798      	blx	r3
 8009216:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3301      	adds	r3, #1
 800921c:	2207      	movs	r2, #7
 800921e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009220:	e00f      	b.n	8009242 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f9dc 	bl	80095e2 <USBD_CtlError>
        err++;
 800922a:	7afb      	ldrb	r3, [r7, #11]
 800922c:	3301      	adds	r3, #1
 800922e:	72fb      	strb	r3, [r7, #11]
      break;
 8009230:	e007      	b.n	8009242 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f9d4 	bl	80095e2 <USBD_CtlError>
      err++;
 800923a:	7afb      	ldrb	r3, [r7, #11]
 800923c:	3301      	adds	r3, #1
 800923e:	72fb      	strb	r3, [r7, #11]
      break;
 8009240:	bf00      	nop
  }

  if (err != 0U)
 8009242:	7afb      	ldrb	r3, [r7, #11]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d11c      	bne.n	8009282 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009248:	893b      	ldrh	r3, [r7, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d011      	beq.n	8009272 <USBD_GetDescriptor+0x2b6>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	88db      	ldrh	r3, [r3, #6]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00d      	beq.n	8009272 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	88da      	ldrh	r2, [r3, #6]
 800925a:	893b      	ldrh	r3, [r7, #8]
 800925c:	4293      	cmp	r3, r2
 800925e:	bf28      	it	cs
 8009260:	4613      	movcs	r3, r2
 8009262:	b29b      	uxth	r3, r3
 8009264:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009266:	893b      	ldrh	r3, [r7, #8]
 8009268:	461a      	mov	r2, r3
 800926a:	68f9      	ldr	r1, [r7, #12]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fa22 	bl	80096b6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	88db      	ldrh	r3, [r3, #6]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d104      	bne.n	8009284 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fa79 	bl	8009772 <USBD_CtlSendStatus>
 8009280:	e000      	b.n	8009284 <USBD_GetDescriptor+0x2c8>
    return;
 8009282:	bf00      	nop
    }
  }
}
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop

0800928c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	889b      	ldrh	r3, [r3, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d130      	bne.n	8009300 <USBD_SetAddress+0x74>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	88db      	ldrh	r3, [r3, #6]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d12c      	bne.n	8009300 <USBD_SetAddress+0x74>
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	885b      	ldrh	r3, [r3, #2]
 80092aa:	2b7f      	cmp	r3, #127	; 0x7f
 80092ac:	d828      	bhi.n	8009300 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	885b      	ldrh	r3, [r3, #2]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d104      	bne.n	80092ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f98b 	bl	80095e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092cc:	e01d      	b.n	800930a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	7bfa      	ldrb	r2, [r7, #15]
 80092d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fe22 	bl	8009f24 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fa46 	bl	8009772 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2202      	movs	r2, #2
 80092f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f4:	e009      	b.n	800930a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092fe:	e004      	b.n	800930a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f96d 	bl	80095e2 <USBD_CtlError>
  }
}
 8009308:	bf00      	nop
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	885b      	ldrh	r3, [r3, #2]
 8009322:	b2da      	uxtb	r2, r3
 8009324:	4b41      	ldr	r3, [pc, #260]	; (800942c <USBD_SetConfig+0x118>)
 8009326:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009328:	4b40      	ldr	r3, [pc, #256]	; (800942c <USBD_SetConfig+0x118>)
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d904      	bls.n	800933a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f955 	bl	80095e2 <USBD_CtlError>
 8009338:	e075      	b.n	8009426 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009340:	2b02      	cmp	r3, #2
 8009342:	d002      	beq.n	800934a <USBD_SetConfig+0x36>
 8009344:	2b03      	cmp	r3, #3
 8009346:	d023      	beq.n	8009390 <USBD_SetConfig+0x7c>
 8009348:	e062      	b.n	8009410 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800934a:	4b38      	ldr	r3, [pc, #224]	; (800942c <USBD_SetConfig+0x118>)
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d01a      	beq.n	8009388 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009352:	4b36      	ldr	r3, [pc, #216]	; (800942c <USBD_SetConfig+0x118>)
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2203      	movs	r2, #3
 8009360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009364:	4b31      	ldr	r3, [pc, #196]	; (800942c <USBD_SetConfig+0x118>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7ff f9e8 	bl	8008740 <USBD_SetClassConfig>
 8009370:	4603      	mov	r3, r0
 8009372:	2b02      	cmp	r3, #2
 8009374:	d104      	bne.n	8009380 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f932 	bl	80095e2 <USBD_CtlError>
            return;
 800937e:	e052      	b.n	8009426 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f9f6 	bl	8009772 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009386:	e04e      	b.n	8009426 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f9f2 	bl	8009772 <USBD_CtlSendStatus>
        break;
 800938e:	e04a      	b.n	8009426 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009390:	4b26      	ldr	r3, [pc, #152]	; (800942c <USBD_SetConfig+0x118>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d112      	bne.n	80093be <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80093a0:	4b22      	ldr	r3, [pc, #136]	; (800942c <USBD_SetConfig+0x118>)
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	461a      	mov	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80093aa:	4b20      	ldr	r3, [pc, #128]	; (800942c <USBD_SetConfig+0x118>)
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff f9e4 	bl	800877e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f9db 	bl	8009772 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80093bc:	e033      	b.n	8009426 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80093be:	4b1b      	ldr	r3, [pc, #108]	; (800942c <USBD_SetConfig+0x118>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d01d      	beq.n	8009408 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7ff f9d2 	bl	800877e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80093da:	4b14      	ldr	r3, [pc, #80]	; (800942c <USBD_SetConfig+0x118>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80093e4:	4b11      	ldr	r3, [pc, #68]	; (800942c <USBD_SetConfig+0x118>)
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7ff f9a8 	bl	8008740 <USBD_SetClassConfig>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d104      	bne.n	8009400 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f8f2 	bl	80095e2 <USBD_CtlError>
            return;
 80093fe:	e012      	b.n	8009426 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f9b6 	bl	8009772 <USBD_CtlSendStatus>
        break;
 8009406:	e00e      	b.n	8009426 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f9b2 	bl	8009772 <USBD_CtlSendStatus>
        break;
 800940e:	e00a      	b.n	8009426 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f8e5 	bl	80095e2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009418:	4b04      	ldr	r3, [pc, #16]	; (800942c <USBD_SetConfig+0x118>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff f9ad 	bl	800877e <USBD_ClrClassConfig>
        break;
 8009424:	bf00      	nop
    }
  }
}
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	200002cc 	.word	0x200002cc

08009430 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	88db      	ldrh	r3, [r3, #6]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d004      	beq.n	800944c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f8cc 	bl	80095e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800944a:	e022      	b.n	8009492 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009452:	2b02      	cmp	r3, #2
 8009454:	dc02      	bgt.n	800945c <USBD_GetConfig+0x2c>
 8009456:	2b00      	cmp	r3, #0
 8009458:	dc03      	bgt.n	8009462 <USBD_GetConfig+0x32>
 800945a:	e015      	b.n	8009488 <USBD_GetConfig+0x58>
 800945c:	2b03      	cmp	r3, #3
 800945e:	d00b      	beq.n	8009478 <USBD_GetConfig+0x48>
 8009460:	e012      	b.n	8009488 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	3308      	adds	r3, #8
 800946c:	2201      	movs	r2, #1
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f920 	bl	80096b6 <USBD_CtlSendData>
        break;
 8009476:	e00c      	b.n	8009492 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3304      	adds	r3, #4
 800947c:	2201      	movs	r2, #1
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f918 	bl	80096b6 <USBD_CtlSendData>
        break;
 8009486:	e004      	b.n	8009492 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f8a9 	bl	80095e2 <USBD_CtlError>
        break;
 8009490:	bf00      	nop
}
 8009492:	bf00      	nop
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b082      	sub	sp, #8
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094aa:	3b01      	subs	r3, #1
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d81e      	bhi.n	80094ee <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	88db      	ldrh	r3, [r3, #6]
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d004      	beq.n	80094c2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f891 	bl	80095e2 <USBD_CtlError>
        break;
 80094c0:	e01a      	b.n	80094f8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d005      	beq.n	80094de <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f043 0202 	orr.w	r2, r3, #2
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	330c      	adds	r3, #12
 80094e2:	2202      	movs	r2, #2
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f8e5 	bl	80096b6 <USBD_CtlSendData>
      break;
 80094ec:	e004      	b.n	80094f8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f876 	bl	80095e2 <USBD_CtlError>
      break;
 80094f6:	bf00      	nop
  }
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	885b      	ldrh	r3, [r3, #2]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d106      	bne.n	8009520 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f929 	bl	8009772 <USBD_CtlSendStatus>
  }
}
 8009520:	bf00      	nop
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009538:	3b01      	subs	r3, #1
 800953a:	2b02      	cmp	r3, #2
 800953c:	d80b      	bhi.n	8009556 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	885b      	ldrh	r3, [r3, #2]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d10c      	bne.n	8009560 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f90f 	bl	8009772 <USBD_CtlSendStatus>
      }
      break;
 8009554:	e004      	b.n	8009560 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f842 	bl	80095e2 <USBD_CtlError>
      break;
 800955e:	e000      	b.n	8009562 <USBD_ClrFeature+0x3a>
      break;
 8009560:	bf00      	nop
  }
}
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800956a:	b480      	push	{r7}
 800956c:	b083      	sub	sp, #12
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781a      	ldrb	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	785a      	ldrb	r2, [r3, #1]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	3302      	adds	r3, #2
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	b29a      	uxth	r2, r3
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	3303      	adds	r3, #3
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	b29b      	uxth	r3, r3
 8009594:	021b      	lsls	r3, r3, #8
 8009596:	b29b      	uxth	r3, r3
 8009598:	4413      	add	r3, r2
 800959a:	b29a      	uxth	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	3304      	adds	r3, #4
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	3305      	adds	r3, #5
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	021b      	lsls	r3, r3, #8
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	4413      	add	r3, r2
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	3306      	adds	r3, #6
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	3307      	adds	r3, #7
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	021b      	lsls	r3, r3, #8
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	4413      	add	r3, r2
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	80da      	strh	r2, [r3, #6]

}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	bc80      	pop	{r7}
 80095e0:	4770      	bx	lr

080095e2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80095ec:	2180      	movs	r1, #128	; 0x80
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fc2e 	bl	8009e50 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80095f4:	2100      	movs	r1, #0
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fc2a 	bl	8009e50 <USBD_LL_StallEP>
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009610:	2300      	movs	r3, #0
 8009612:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d032      	beq.n	8009680 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f000 f834 	bl	8009688 <USBD_GetLen>
 8009620:	4603      	mov	r3, r0
 8009622:	3301      	adds	r3, #1
 8009624:	b29b      	uxth	r3, r3
 8009626:	005b      	lsls	r3, r3, #1
 8009628:	b29a      	uxth	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800962e:	7dfb      	ldrb	r3, [r7, #23]
 8009630:	1c5a      	adds	r2, r3, #1
 8009632:	75fa      	strb	r2, [r7, #23]
 8009634:	461a      	mov	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4413      	add	r3, r2
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	7812      	ldrb	r2, [r2, #0]
 800963e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	75fa      	strb	r2, [r7, #23]
 8009646:	461a      	mov	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	4413      	add	r3, r2
 800964c:	2203      	movs	r2, #3
 800964e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009650:	e012      	b.n	8009678 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	60fa      	str	r2, [r7, #12]
 8009658:	7dfa      	ldrb	r2, [r7, #23]
 800965a:	1c51      	adds	r1, r2, #1
 800965c:	75f9      	strb	r1, [r7, #23]
 800965e:	4611      	mov	r1, r2
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	440a      	add	r2, r1
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009668:	7dfb      	ldrb	r3, [r7, #23]
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	75fa      	strb	r2, [r7, #23]
 800966e:	461a      	mov	r2, r3
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	4413      	add	r3, r2
 8009674:	2200      	movs	r2, #0
 8009676:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e8      	bne.n	8009652 <USBD_GetString+0x4e>
    }
  }
}
 8009680:	bf00      	nop
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009694:	e005      	b.n	80096a2 <USBD_GetLen+0x1a>
  {
    len++;
 8009696:	7bfb      	ldrb	r3, [r7, #15]
 8009698:	3301      	adds	r3, #1
 800969a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3301      	adds	r3, #1
 80096a0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1f5      	bne.n	8009696 <USBD_GetLen+0xe>
  }

  return len;
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bc80      	pop	{r7}
 80096b4:	4770      	bx	lr

080096b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	60b9      	str	r1, [r7, #8]
 80096c0:	4613      	mov	r3, r2
 80096c2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2202      	movs	r2, #2
 80096c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096cc:	88fa      	ldrh	r2, [r7, #6]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80096d2:	88fa      	ldrh	r2, [r7, #6]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096d8:	88fb      	ldrh	r3, [r7, #6]
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	2100      	movs	r1, #0
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 fc3f 	bl	8009f62 <USBD_LL_Transmit>

  return USBD_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	60b9      	str	r1, [r7, #8]
 80096f8:	4613      	mov	r3, r2
 80096fa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096fc:	88fb      	ldrh	r3, [r7, #6]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	2100      	movs	r1, #0
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 fc2d 	bl	8009f62 <USBD_LL_Transmit>

  return USBD_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	60f8      	str	r0, [r7, #12]
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	4613      	mov	r3, r2
 800971e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2203      	movs	r2, #3
 8009724:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009728:	88fa      	ldrh	r2, [r7, #6]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009730:	88fa      	ldrh	r2, [r7, #6]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009738:	88fb      	ldrh	r3, [r7, #6]
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	2100      	movs	r1, #0
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f000 fc32 	bl	8009fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	60f8      	str	r0, [r7, #12]
 8009756:	60b9      	str	r1, [r7, #8]
 8009758:	4613      	mov	r3, r2
 800975a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800975c:	88fb      	ldrh	r3, [r7, #6]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	2100      	movs	r1, #0
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 fc20 	bl	8009fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2204      	movs	r2, #4
 800977e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009782:	2300      	movs	r3, #0
 8009784:	2200      	movs	r2, #0
 8009786:	2100      	movs	r1, #0
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fbea 	bl	8009f62 <USBD_LL_Transmit>

  return USBD_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2205      	movs	r2, #5
 80097a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097a8:	2300      	movs	r3, #0
 80097aa:	2200      	movs	r2, #0
 80097ac:	2100      	movs	r1, #0
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fbfa 	bl	8009fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80097c4:	2200      	movs	r2, #0
 80097c6:	4912      	ldr	r1, [pc, #72]	; (8009810 <MX_USB_DEVICE_Init+0x50>)
 80097c8:	4812      	ldr	r0, [pc, #72]	; (8009814 <MX_USB_DEVICE_Init+0x54>)
 80097ca:	f7fe ff5f 	bl	800868c <USBD_Init>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80097d4:	f7f7 fd5a 	bl	800128c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80097d8:	490f      	ldr	r1, [pc, #60]	; (8009818 <MX_USB_DEVICE_Init+0x58>)
 80097da:	480e      	ldr	r0, [pc, #56]	; (8009814 <MX_USB_DEVICE_Init+0x54>)
 80097dc:	f7fe ff81 	bl	80086e2 <USBD_RegisterClass>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80097e6:	f7f7 fd51 	bl	800128c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80097ea:	490c      	ldr	r1, [pc, #48]	; (800981c <MX_USB_DEVICE_Init+0x5c>)
 80097ec:	4809      	ldr	r0, [pc, #36]	; (8009814 <MX_USB_DEVICE_Init+0x54>)
 80097ee:	f7fe fee1 	bl	80085b4 <USBD_CDC_RegisterInterface>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80097f8:	f7f7 fd48 	bl	800128c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80097fc:	4805      	ldr	r0, [pc, #20]	; (8009814 <MX_USB_DEVICE_Init+0x54>)
 80097fe:	f7fe ff89 	bl	8008714 <USBD_Start>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009808:	f7f7 fd40 	bl	800128c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800980c:	bf00      	nop
 800980e:	bd80      	pop	{r7, pc}
 8009810:	2000012c 	.word	0x2000012c
 8009814:	200002d0 	.word	0x200002d0
 8009818:	20000018 	.word	0x20000018
 800981c:	2000011c 	.word	0x2000011c

08009820 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009824:	2200      	movs	r2, #0
 8009826:	4905      	ldr	r1, [pc, #20]	; (800983c <CDC_Init_FS+0x1c>)
 8009828:	4805      	ldr	r0, [pc, #20]	; (8009840 <CDC_Init_FS+0x20>)
 800982a:	f7fe fed9 	bl	80085e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800982e:	4905      	ldr	r1, [pc, #20]	; (8009844 <CDC_Init_FS+0x24>)
 8009830:	4803      	ldr	r0, [pc, #12]	; (8009840 <CDC_Init_FS+0x20>)
 8009832:	f7fe feee 	bl	8008612 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009836:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009838:	4618      	mov	r0, r3
 800983a:	bd80      	pop	{r7, pc}
 800983c:	2000097c 	.word	0x2000097c
 8009840:	200002d0 	.word	0x200002d0
 8009844:	20000594 	.word	0x20000594

08009848 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009848:	b480      	push	{r7}
 800984a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800984c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800984e:	4618      	mov	r0, r3
 8009850:	46bd      	mov	sp, r7
 8009852:	bc80      	pop	{r7}
 8009854:	4770      	bx	lr
	...

08009858 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	4603      	mov	r3, r0
 8009860:	6039      	str	r1, [r7, #0]
 8009862:	71fb      	strb	r3, [r7, #7]
 8009864:	4613      	mov	r3, r2
 8009866:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009868:	79fb      	ldrb	r3, [r7, #7]
 800986a:	2b23      	cmp	r3, #35	; 0x23
 800986c:	d84a      	bhi.n	8009904 <CDC_Control_FS+0xac>
 800986e:	a201      	add	r2, pc, #4	; (adr r2, 8009874 <CDC_Control_FS+0x1c>)
 8009870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009874:	08009905 	.word	0x08009905
 8009878:	08009905 	.word	0x08009905
 800987c:	08009905 	.word	0x08009905
 8009880:	08009905 	.word	0x08009905
 8009884:	08009905 	.word	0x08009905
 8009888:	08009905 	.word	0x08009905
 800988c:	08009905 	.word	0x08009905
 8009890:	08009905 	.word	0x08009905
 8009894:	08009905 	.word	0x08009905
 8009898:	08009905 	.word	0x08009905
 800989c:	08009905 	.word	0x08009905
 80098a0:	08009905 	.word	0x08009905
 80098a4:	08009905 	.word	0x08009905
 80098a8:	08009905 	.word	0x08009905
 80098ac:	08009905 	.word	0x08009905
 80098b0:	08009905 	.word	0x08009905
 80098b4:	08009905 	.word	0x08009905
 80098b8:	08009905 	.word	0x08009905
 80098bc:	08009905 	.word	0x08009905
 80098c0:	08009905 	.word	0x08009905
 80098c4:	08009905 	.word	0x08009905
 80098c8:	08009905 	.word	0x08009905
 80098cc:	08009905 	.word	0x08009905
 80098d0:	08009905 	.word	0x08009905
 80098d4:	08009905 	.word	0x08009905
 80098d8:	08009905 	.word	0x08009905
 80098dc:	08009905 	.word	0x08009905
 80098e0:	08009905 	.word	0x08009905
 80098e4:	08009905 	.word	0x08009905
 80098e8:	08009905 	.word	0x08009905
 80098ec:	08009905 	.word	0x08009905
 80098f0:	08009905 	.word	0x08009905
 80098f4:	08009905 	.word	0x08009905
 80098f8:	08009905 	.word	0x08009905
 80098fc:	08009905 	.word	0x08009905
 8009900:	08009905 	.word	0x08009905
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009904:	bf00      	nop
  }

  return (USBD_OK);
 8009906:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009908:	4618      	mov	r0, r3
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	bc80      	pop	{r7}
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop

08009914 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	4805      	ldr	r0, [pc, #20]	; (8009938 <CDC_Receive_FS+0x24>)
 8009922:	f7fe fe76 	bl	8008612 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009926:	4804      	ldr	r0, [pc, #16]	; (8009938 <CDC_Receive_FS+0x24>)
 8009928:	f7fe fe86 	bl	8008638 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800992c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	200002d0 	.word	0x200002d0

0800993c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	6039      	str	r1, [r7, #0]
 8009946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	2212      	movs	r2, #18
 800994c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800994e:	4b03      	ldr	r3, [pc, #12]	; (800995c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009950:	4618      	mov	r0, r3
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	bc80      	pop	{r7}
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	20000148 	.word	0x20000148

08009960 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	4603      	mov	r3, r0
 8009968:	6039      	str	r1, [r7, #0]
 800996a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	2204      	movs	r2, #4
 8009970:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009972:	4b03      	ldr	r3, [pc, #12]	; (8009980 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009974:	4618      	mov	r0, r3
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	bc80      	pop	{r7}
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	2000015c 	.word	0x2000015c

08009984 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	4603      	mov	r3, r0
 800998c:	6039      	str	r1, [r7, #0]
 800998e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d105      	bne.n	80099a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	4907      	ldr	r1, [pc, #28]	; (80099b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800999a:	4808      	ldr	r0, [pc, #32]	; (80099bc <USBD_FS_ProductStrDescriptor+0x38>)
 800999c:	f7ff fe32 	bl	8009604 <USBD_GetString>
 80099a0:	e004      	b.n	80099ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	4904      	ldr	r1, [pc, #16]	; (80099b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80099a6:	4805      	ldr	r0, [pc, #20]	; (80099bc <USBD_FS_ProductStrDescriptor+0x38>)
 80099a8:	f7ff fe2c 	bl	8009604 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099ac:	4b02      	ldr	r3, [pc, #8]	; (80099b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20000d64 	.word	0x20000d64
 80099bc:	0800a13c 	.word	0x0800a13c

080099c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	4603      	mov	r3, r0
 80099c8:	6039      	str	r1, [r7, #0]
 80099ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	4904      	ldr	r1, [pc, #16]	; (80099e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099d0:	4804      	ldr	r0, [pc, #16]	; (80099e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099d2:	f7ff fe17 	bl	8009604 <USBD_GetString>
  return USBD_StrDesc;
 80099d6:	4b02      	ldr	r3, [pc, #8]	; (80099e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20000d64 	.word	0x20000d64
 80099e4:	0800a154 	.word	0x0800a154

080099e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	4603      	mov	r3, r0
 80099f0:	6039      	str	r1, [r7, #0]
 80099f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	221a      	movs	r2, #26
 80099f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099fa:	f000 f843 	bl	8009a84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099fe:	4b02      	ldr	r3, [pc, #8]	; (8009a08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	20000160 	.word	0x20000160

08009a0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	6039      	str	r1, [r7, #0]
 8009a16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d105      	bne.n	8009a2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	4907      	ldr	r1, [pc, #28]	; (8009a40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a22:	4808      	ldr	r0, [pc, #32]	; (8009a44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a24:	f7ff fdee 	bl	8009604 <USBD_GetString>
 8009a28:	e004      	b.n	8009a34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	4904      	ldr	r1, [pc, #16]	; (8009a40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a2e:	4805      	ldr	r0, [pc, #20]	; (8009a44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a30:	f7ff fde8 	bl	8009604 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a34:	4b02      	ldr	r3, [pc, #8]	; (8009a40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20000d64 	.word	0x20000d64
 8009a44:	0800a168 	.word	0x0800a168

08009a48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	6039      	str	r1, [r7, #0]
 8009a52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a54:	79fb      	ldrb	r3, [r7, #7]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d105      	bne.n	8009a66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	4907      	ldr	r1, [pc, #28]	; (8009a7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a5e:	4808      	ldr	r0, [pc, #32]	; (8009a80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a60:	f7ff fdd0 	bl	8009604 <USBD_GetString>
 8009a64:	e004      	b.n	8009a70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	4904      	ldr	r1, [pc, #16]	; (8009a7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a6a:	4805      	ldr	r0, [pc, #20]	; (8009a80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a6c:	f7ff fdca 	bl	8009604 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a70:	4b02      	ldr	r3, [pc, #8]	; (8009a7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20000d64 	.word	0x20000d64
 8009a80:	0800a174 	.word	0x0800a174

08009a84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <Get_SerialNum+0x44>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a90:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <Get_SerialNum+0x48>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a96:	4b0e      	ldr	r3, [pc, #56]	; (8009ad0 <Get_SerialNum+0x4c>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d009      	beq.n	8009abe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009aaa:	2208      	movs	r2, #8
 8009aac:	4909      	ldr	r1, [pc, #36]	; (8009ad4 <Get_SerialNum+0x50>)
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 f814 	bl	8009adc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ab4:	2204      	movs	r2, #4
 8009ab6:	4908      	ldr	r1, [pc, #32]	; (8009ad8 <Get_SerialNum+0x54>)
 8009ab8:	68b8      	ldr	r0, [r7, #8]
 8009aba:	f000 f80f 	bl	8009adc <IntToUnicode>
  }
}
 8009abe:	bf00      	nop
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	1ffff7e8 	.word	0x1ffff7e8
 8009acc:	1ffff7ec 	.word	0x1ffff7ec
 8009ad0:	1ffff7f0 	.word	0x1ffff7f0
 8009ad4:	20000162 	.word	0x20000162
 8009ad8:	20000172 	.word	0x20000172

08009adc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b087      	sub	sp, #28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009aee:	2300      	movs	r3, #0
 8009af0:	75fb      	strb	r3, [r7, #23]
 8009af2:	e027      	b.n	8009b44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	0f1b      	lsrs	r3, r3, #28
 8009af8:	2b09      	cmp	r3, #9
 8009afa:	d80b      	bhi.n	8009b14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	0f1b      	lsrs	r3, r3, #28
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	005b      	lsls	r3, r3, #1
 8009b06:	4619      	mov	r1, r3
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	440b      	add	r3, r1
 8009b0c:	3230      	adds	r2, #48	; 0x30
 8009b0e:	b2d2      	uxtb	r2, r2
 8009b10:	701a      	strb	r2, [r3, #0]
 8009b12:	e00a      	b.n	8009b2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	0f1b      	lsrs	r3, r3, #28
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	005b      	lsls	r3, r3, #1
 8009b1e:	4619      	mov	r1, r3
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	440b      	add	r3, r1
 8009b24:	3237      	adds	r2, #55	; 0x37
 8009b26:	b2d2      	uxtb	r2, r2
 8009b28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	011b      	lsls	r3, r3, #4
 8009b2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b30:	7dfb      	ldrb	r3, [r7, #23]
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	3301      	adds	r3, #1
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	4413      	add	r3, r2
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	3301      	adds	r3, #1
 8009b42:	75fb      	strb	r3, [r7, #23]
 8009b44:	7dfa      	ldrb	r2, [r7, #23]
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d3d3      	bcc.n	8009af4 <IntToUnicode+0x18>
  }
}
 8009b4c:	bf00      	nop
 8009b4e:	bf00      	nop
 8009b50:	371c      	adds	r7, #28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bc80      	pop	{r7}
 8009b56:	4770      	bx	lr

08009b58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a0d      	ldr	r2, [pc, #52]	; (8009b9c <HAL_PCD_MspInit+0x44>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d113      	bne.n	8009b92 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009b6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ba0 <HAL_PCD_MspInit+0x48>)
 8009b6c:	69db      	ldr	r3, [r3, #28]
 8009b6e:	4a0c      	ldr	r2, [pc, #48]	; (8009ba0 <HAL_PCD_MspInit+0x48>)
 8009b70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b74:	61d3      	str	r3, [r2, #28]
 8009b76:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <HAL_PCD_MspInit+0x48>)
 8009b78:	69db      	ldr	r3, [r3, #28]
 8009b7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b7e:	60fb      	str	r3, [r7, #12]
 8009b80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009b82:	2200      	movs	r2, #0
 8009b84:	2100      	movs	r1, #0
 8009b86:	2014      	movs	r0, #20
 8009b88:	f7f8 fad1 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009b8c:	2014      	movs	r0, #20
 8009b8e:	f7f8 faea 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009b92:	bf00      	nop
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	40005c00 	.word	0x40005c00
 8009ba0:	40021000 	.word	0x40021000

08009ba4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f7fe fdf2 	bl	80087a4 <USBD_LL_SetupStage>
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009bda:	78fa      	ldrb	r2, [r7, #3]
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	4613      	mov	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	440b      	add	r3, r1
 8009be8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	f7fe fe24 	bl	800883e <USBD_LL_DataOutStage>
}
 8009bf6:	bf00      	nop
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b082      	sub	sp, #8
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	460b      	mov	r3, r1
 8009c08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c10:	78fa      	ldrb	r2, [r7, #3]
 8009c12:	6879      	ldr	r1, [r7, #4]
 8009c14:	4613      	mov	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	00db      	lsls	r3, r3, #3
 8009c1c:	440b      	add	r3, r1
 8009c1e:	333c      	adds	r3, #60	; 0x3c
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	4619      	mov	r1, r3
 8009c26:	f7fe fe7b 	bl	8008920 <USBD_LL_DataInStage>
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b082      	sub	sp, #8
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fe ff8b 	bl	8008b5c <USBD_LL_SOF>
}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c56:	2301      	movs	r3, #1
 8009c58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d001      	beq.n	8009c66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c62:	f7f7 fb13 	bl	800128c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c6c:	7bfa      	ldrb	r2, [r7, #15]
 8009c6e:	4611      	mov	r1, r2
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe ff3b 	bl	8008aec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe fef4 	bl	8008a6a <USBD_LL_Reset>
}
 8009c82:	bf00      	nop
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe ff35 	bl	8008b0a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d005      	beq.n	8009cb4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ca8:	4b04      	ldr	r3, [pc, #16]	; (8009cbc <HAL_PCD_SuspendCallback+0x30>)
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	4a03      	ldr	r2, [pc, #12]	; (8009cbc <HAL_PCD_SuspendCallback+0x30>)
 8009cae:	f043 0306 	orr.w	r3, r3, #6
 8009cb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	e000ed00 	.word	0xe000ed00

08009cc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe ff2f 	bl	8008b32 <USBD_LL_Resume>
}
 8009cd4:	bf00      	nop
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009ce4:	4a28      	ldr	r2, [pc, #160]	; (8009d88 <USBD_LL_Init+0xac>)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a26      	ldr	r2, [pc, #152]	; (8009d88 <USBD_LL_Init+0xac>)
 8009cf0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009cf4:	4b24      	ldr	r3, [pc, #144]	; (8009d88 <USBD_LL_Init+0xac>)
 8009cf6:	4a25      	ldr	r2, [pc, #148]	; (8009d8c <USBD_LL_Init+0xb0>)
 8009cf8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009cfa:	4b23      	ldr	r3, [pc, #140]	; (8009d88 <USBD_LL_Init+0xac>)
 8009cfc:	2208      	movs	r2, #8
 8009cfe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009d00:	4b21      	ldr	r3, [pc, #132]	; (8009d88 <USBD_LL_Init+0xac>)
 8009d02:	2202      	movs	r2, #2
 8009d04:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009d06:	4b20      	ldr	r3, [pc, #128]	; (8009d88 <USBD_LL_Init+0xac>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009d0c:	4b1e      	ldr	r3, [pc, #120]	; (8009d88 <USBD_LL_Init+0xac>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d12:	4b1d      	ldr	r3, [pc, #116]	; (8009d88 <USBD_LL_Init+0xac>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d18:	481b      	ldr	r0, [pc, #108]	; (8009d88 <USBD_LL_Init+0xac>)
 8009d1a:	f7f9 f9f2 	bl	8003102 <HAL_PCD_Init>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009d24:	f7f7 fab2 	bl	800128c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d2e:	2318      	movs	r3, #24
 8009d30:	2200      	movs	r2, #0
 8009d32:	2100      	movs	r1, #0
 8009d34:	f7fa fe66 	bl	8004a04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d3e:	2358      	movs	r3, #88	; 0x58
 8009d40:	2200      	movs	r2, #0
 8009d42:	2180      	movs	r1, #128	; 0x80
 8009d44:	f7fa fe5e 	bl	8004a04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d4e:	23c0      	movs	r3, #192	; 0xc0
 8009d50:	2200      	movs	r2, #0
 8009d52:	2181      	movs	r1, #129	; 0x81
 8009d54:	f7fa fe56 	bl	8004a04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d5e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009d62:	2200      	movs	r2, #0
 8009d64:	2101      	movs	r1, #1
 8009d66:	f7fa fe4d 	bl	8004a04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d74:	2200      	movs	r2, #0
 8009d76:	2182      	movs	r1, #130	; 0x82
 8009d78:	f7fa fe44 	bl	8004a04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	20000f64 	.word	0x20000f64
 8009d8c:	40005c00 	.word	0x40005c00

08009d90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7f9 fab6 	bl	8003318 <HAL_PCD_Start>
 8009dac:	4603      	mov	r3, r0
 8009dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 f94e 	bl	800a054 <USBD_Get_USB_Status>
 8009db8:	4603      	mov	r3, r0
 8009dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b084      	sub	sp, #16
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	4608      	mov	r0, r1
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	70fb      	strb	r3, [r7, #3]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70bb      	strb	r3, [r7, #2]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dee:	78bb      	ldrb	r3, [r7, #2]
 8009df0:	883a      	ldrh	r2, [r7, #0]
 8009df2:	78f9      	ldrb	r1, [r7, #3]
 8009df4:	f7f9 fc2e 	bl	8003654 <HAL_PCD_EP_Open>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f928 	bl	800a054 <USBD_Get_USB_Status>
 8009e04:	4603      	mov	r3, r0
 8009e06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b084      	sub	sp, #16
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e2c:	78fa      	ldrb	r2, [r7, #3]
 8009e2e:	4611      	mov	r1, r2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7f9 fc75 	bl	8003720 <HAL_PCD_EP_Close>
 8009e36:	4603      	mov	r3, r0
 8009e38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f000 f909 	bl	800a054 <USBD_Get_USB_Status>
 8009e42:	4603      	mov	r3, r0
 8009e44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e60:	2300      	movs	r3, #0
 8009e62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e6a:	78fa      	ldrb	r2, [r7, #3]
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7f9 fd35 	bl	80038de <HAL_PCD_EP_SetStall>
 8009e74:	4603      	mov	r3, r0
 8009e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 f8ea 	bl	800a054 <USBD_Get_USB_Status>
 8009e80:	4603      	mov	r3, r0
 8009e82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	460b      	mov	r3, r1
 8009e98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ea8:	78fa      	ldrb	r2, [r7, #3]
 8009eaa:	4611      	mov	r1, r2
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7f9 fd76 	bl	800399e <HAL_PCD_EP_ClrStall>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 f8cb 	bl	800a054 <USBD_Get_USB_Status>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ede:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	da0c      	bge.n	8009f02 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ee8:	78fb      	ldrb	r3, [r7, #3]
 8009eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eee:	68f9      	ldr	r1, [r7, #12]
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	00db      	lsls	r3, r3, #3
 8009efa:	440b      	add	r3, r1
 8009efc:	3302      	adds	r3, #2
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	e00b      	b.n	8009f1a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f02:	78fb      	ldrb	r3, [r7, #3]
 8009f04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f08:	68f9      	ldr	r1, [r7, #12]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	00db      	lsls	r3, r3, #3
 8009f12:	440b      	add	r3, r1
 8009f14:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009f18:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bc80      	pop	{r7}
 8009f22:	4770      	bx	lr

08009f24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f3e:	78fa      	ldrb	r2, [r7, #3]
 8009f40:	4611      	mov	r1, r2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7f9 fb61 	bl	800360a <HAL_PCD_SetAddress>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 f880 	bl	800a054 <USBD_Get_USB_Status>
 8009f54:	4603      	mov	r3, r0
 8009f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b086      	sub	sp, #24
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	607a      	str	r2, [r7, #4]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	460b      	mov	r3, r1
 8009f70:	72fb      	strb	r3, [r7, #11]
 8009f72:	4613      	mov	r3, r2
 8009f74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f84:	893b      	ldrh	r3, [r7, #8]
 8009f86:	7af9      	ldrb	r1, [r7, #11]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	f7f9 fc65 	bl	8003858 <HAL_PCD_EP_Transmit>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 f85d 	bl	800a054 <USBD_Get_USB_Status>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	607a      	str	r2, [r7, #4]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	72fb      	strb	r3, [r7, #11]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009fca:	893b      	ldrh	r3, [r7, #8]
 8009fcc:	7af9      	ldrb	r1, [r7, #11]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	f7f9 fbee 	bl	80037b0 <HAL_PCD_EP_Receive>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 f83a 	bl	800a054 <USBD_Get_USB_Status>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fe4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b082      	sub	sp, #8
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a000:	78fa      	ldrb	r2, [r7, #3]
 800a002:	4611      	mov	r1, r2
 800a004:	4618      	mov	r0, r3
 800a006:	f7f9 fc10 	bl	800382a <HAL_PCD_EP_GetRxCount>
 800a00a:	4603      	mov	r3, r0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a01c:	4b02      	ldr	r3, [pc, #8]	; (800a028 <USBD_static_malloc+0x14>)
}
 800a01e:	4618      	mov	r0, r3
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	bc80      	pop	{r7}
 800a026:	4770      	bx	lr
 800a028:	20001250 	.word	0x20001250

0800a02c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]

}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	bc80      	pop	{r7}
 800a03c:	4770      	bx	lr

0800a03e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a03e:	b480      	push	{r7}
 800a040:	b083      	sub	sp, #12
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	460b      	mov	r3, r1
 800a048:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	bc80      	pop	{r7}
 800a052:	4770      	bx	lr

0800a054 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a062:	79fb      	ldrb	r3, [r7, #7]
 800a064:	2b03      	cmp	r3, #3
 800a066:	d817      	bhi.n	800a098 <USBD_Get_USB_Status+0x44>
 800a068:	a201      	add	r2, pc, #4	; (adr r2, 800a070 <USBD_Get_USB_Status+0x1c>)
 800a06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06e:	bf00      	nop
 800a070:	0800a081 	.word	0x0800a081
 800a074:	0800a087 	.word	0x0800a087
 800a078:	0800a08d 	.word	0x0800a08d
 800a07c:	0800a093 	.word	0x0800a093
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73fb      	strb	r3, [r7, #15]
    break;
 800a084:	e00b      	b.n	800a09e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a086:	2302      	movs	r3, #2
 800a088:	73fb      	strb	r3, [r7, #15]
    break;
 800a08a:	e008      	b.n	800a09e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a08c:	2301      	movs	r3, #1
 800a08e:	73fb      	strb	r3, [r7, #15]
    break;
 800a090:	e005      	b.n	800a09e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a092:	2302      	movs	r3, #2
 800a094:	73fb      	strb	r3, [r7, #15]
    break;
 800a096:	e002      	b.n	800a09e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a098:	2302      	movs	r3, #2
 800a09a:	73fb      	strb	r3, [r7, #15]
    break;
 800a09c:	bf00      	nop
  }
  return usb_status;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bc80      	pop	{r7}
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop

0800a0ac <__libc_init_array>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	2600      	movs	r6, #0
 800a0b0:	4d0c      	ldr	r5, [pc, #48]	; (800a0e4 <__libc_init_array+0x38>)
 800a0b2:	4c0d      	ldr	r4, [pc, #52]	; (800a0e8 <__libc_init_array+0x3c>)
 800a0b4:	1b64      	subs	r4, r4, r5
 800a0b6:	10a4      	asrs	r4, r4, #2
 800a0b8:	42a6      	cmp	r6, r4
 800a0ba:	d109      	bne.n	800a0d0 <__libc_init_array+0x24>
 800a0bc:	f000 f822 	bl	800a104 <_init>
 800a0c0:	2600      	movs	r6, #0
 800a0c2:	4d0a      	ldr	r5, [pc, #40]	; (800a0ec <__libc_init_array+0x40>)
 800a0c4:	4c0a      	ldr	r4, [pc, #40]	; (800a0f0 <__libc_init_array+0x44>)
 800a0c6:	1b64      	subs	r4, r4, r5
 800a0c8:	10a4      	asrs	r4, r4, #2
 800a0ca:	42a6      	cmp	r6, r4
 800a0cc:	d105      	bne.n	800a0da <__libc_init_array+0x2e>
 800a0ce:	bd70      	pop	{r4, r5, r6, pc}
 800a0d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0d4:	4798      	blx	r3
 800a0d6:	3601      	adds	r6, #1
 800a0d8:	e7ee      	b.n	800a0b8 <__libc_init_array+0xc>
 800a0da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0de:	4798      	blx	r3
 800a0e0:	3601      	adds	r6, #1
 800a0e2:	e7f2      	b.n	800a0ca <__libc_init_array+0x1e>
 800a0e4:	0800a19c 	.word	0x0800a19c
 800a0e8:	0800a19c 	.word	0x0800a19c
 800a0ec:	0800a19c 	.word	0x0800a19c
 800a0f0:	0800a1a0 	.word	0x0800a1a0

0800a0f4 <memset>:
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	4402      	add	r2, r0
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d100      	bne.n	800a0fe <memset+0xa>
 800a0fc:	4770      	bx	lr
 800a0fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a102:	e7f9      	b.n	800a0f8 <memset+0x4>

0800a104 <_init>:
 800a104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a106:	bf00      	nop
 800a108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a10a:	bc08      	pop	{r3}
 800a10c:	469e      	mov	lr, r3
 800a10e:	4770      	bx	lr

0800a110 <_fini>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	bf00      	nop
 800a114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a116:	bc08      	pop	{r3}
 800a118:	469e      	mov	lr, r3
 800a11a:	4770      	bx	lr
