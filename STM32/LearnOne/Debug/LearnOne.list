
LearnOne.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e4c  08004e4c  00014e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e84  08004e84  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004e84  08004e84  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e84  08004e84  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000010  08004e9c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08004e9c  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133b1  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234a  00000000  00000000  000333f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00035740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  000367d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf00  00000000  00000000  00037798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149df  00000000  00000000  00053698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9729  00000000  00000000  00068077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001117a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f0  00000000  00000000  001117f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e34 	.word	0x08004e34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004e34 	.word	0x08004e34

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fca6 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f826 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fa16 	bl	8000604 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f9c6 	bl	8000568 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80001dc:	f000 f9f4 	bl	80005c8 <MX_DMA_Init>
  MX_ADC1_Init();
 80001e0:	f000 f87a 	bl	80002d8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80001e4:	f000 f914 	bl	8000410 <MX_TIM1_Init>
  MX_I2C1_Init();
 80001e8:	f000 f8d2 	bl	8000390 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */




  TIM1->CCR1 = CCR;
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <main+0x4c>)
 80001ee:	881a      	ldrh	r2, [r3, #0]
 80001f0:	4b09      	ldr	r3, [pc, #36]	; (8000218 <main+0x50>)
 80001f2:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001f4:	2100      	movs	r1, #0
 80001f6:	4809      	ldr	r0, [pc, #36]	; (800021c <main+0x54>)
 80001f8:	f003 fb46 	bl	8003888 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_WritePin(GPIOA, TestA_Pin, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000206:	f001 fd43 	bl	8001c90 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800020a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020e:	f000 fceb 	bl	8000be8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, TestA_Pin, GPIO_PIN_SET);
 8000212:	e7f3      	b.n	80001fc <main+0x34>
 8000214:	20000000 	.word	0x20000000
 8000218:	40012c00 	.word	0x40012c00
 800021c:	200000c8 	.word	0x200000c8

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b09c      	sub	sp, #112	; 0x70
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f004 fdf8 	bl	8004e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000244:	463b      	mov	r3, r7
 8000246:	2234      	movs	r2, #52	; 0x34
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f004 fdea 	bl	8004e24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000250:	2302      	movs	r3, #2
 8000252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000258:	2310      	movs	r3, #16
 800025a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000260:	2300      	movs	r3, #0
 8000262:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000264:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000268:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fe4c 	bl	8001f0c <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800027a:	f000 fa57 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000294:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fe74 	bl	8002f88 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002a6:	f000 fa41 	bl	800072c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 80002aa:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 80002ae:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002b4:	2300      	movs	r3, #0
 80002b6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80002b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002be:	463b      	mov	r3, r7
 80002c0:	4618      	mov	r0, r3
 80002c2:	f003 f897 	bl	80033f4 <HAL_RCCEx_PeriphCLKConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002cc:	f000 fa2e 	bl	800072c <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3770      	adds	r7, #112	; 0x70
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002de:	463b      	mov	r3, r7
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
 80002ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ee:	4b27      	ldr	r3, [pc, #156]	; (800038c <MX_ADC1_Init+0xb4>)
 80002f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f6:	4b25      	ldr	r3, [pc, #148]	; (800038c <MX_ADC1_Init+0xb4>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002fc:	4b23      	ldr	r3, [pc, #140]	; (800038c <MX_ADC1_Init+0xb4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000302:	4b22      	ldr	r3, [pc, #136]	; (800038c <MX_ADC1_Init+0xb4>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000308:	4b20      	ldr	r3, [pc, #128]	; (800038c <MX_ADC1_Init+0xb4>)
 800030a:	2201      	movs	r2, #1
 800030c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800030e:	4b1f      	ldr	r3, [pc, #124]	; (800038c <MX_ADC1_Init+0xb4>)
 8000310:	2200      	movs	r2, #0
 8000312:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000316:	4b1d      	ldr	r3, [pc, #116]	; (800038c <MX_ADC1_Init+0xb4>)
 8000318:	2200      	movs	r2, #0
 800031a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <MX_ADC1_Init+0xb4>)
 800031e:	2201      	movs	r2, #1
 8000320:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000322:	4b1a      	ldr	r3, [pc, #104]	; (800038c <MX_ADC1_Init+0xb4>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <MX_ADC1_Init+0xb4>)
 800032a:	2201      	movs	r2, #1
 800032c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800032e:	4b17      	ldr	r3, [pc, #92]	; (800038c <MX_ADC1_Init+0xb4>)
 8000330:	2200      	movs	r2, #0
 8000332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <MX_ADC1_Init+0xb4>)
 8000338:	2204      	movs	r2, #4
 800033a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800033c:	4b13      	ldr	r3, [pc, #76]	; (800038c <MX_ADC1_Init+0xb4>)
 800033e:	2200      	movs	r2, #0
 8000340:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <MX_ADC1_Init+0xb4>)
 8000344:	2200      	movs	r2, #0
 8000346:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4810      	ldr	r0, [pc, #64]	; (800038c <MX_ADC1_Init+0xb4>)
 800034a:	f000 fc71 	bl	8000c30 <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000354:	f000 f9ea 	bl	800072c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000358:	2309      	movs	r3, #9
 800035a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800035c:	2301      	movs	r3, #1
 800035e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000360:	2301      	movs	r3, #1
 8000362:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000368:	2300      	movs	r3, #0
 800036a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000370:	463b      	mov	r3, r7
 8000372:	4619      	mov	r1, r3
 8000374:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_ADC1_Init+0xb4>)
 8000376:	f000 fde1 	bl	8000f3c <HAL_ADC_ConfigChannel>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000380:	f000 f9d4 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000384:	bf00      	nop
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	2000002c 	.word	0x2000002c

08000390 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <MX_I2C1_Init+0x74>)
 8000396:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <MX_I2C1_Init+0x78>)
 8000398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <MX_I2C1_Init+0x74>)
 800039c:	4a1b      	ldr	r2, [pc, #108]	; (800040c <MX_I2C1_Init+0x7c>)
 800039e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003a0:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_I2C1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <MX_I2C1_Init+0x74>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ac:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <MX_I2C1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_I2C1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_I2C1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ca:	480e      	ldr	r0, [pc, #56]	; (8000404 <MX_I2C1_Init+0x74>)
 80003cc:	f001 fc78 	bl	8001cc0 <HAL_I2C_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003d6:	f000 f9a9 	bl	800072c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003da:	2100      	movs	r1, #0
 80003dc:	4809      	ldr	r0, [pc, #36]	; (8000404 <MX_I2C1_Init+0x74>)
 80003de:	f001 fcfe 	bl	8001dde <HAL_I2CEx_ConfigAnalogFilter>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003e8:	f000 f9a0 	bl	800072c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003ec:	2100      	movs	r1, #0
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_I2C1_Init+0x74>)
 80003f0:	f001 fd40 	bl	8001e74 <HAL_I2CEx_ConfigDigitalFilter>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003fa:	f000 f997 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	2000007c 	.word	0x2000007c
 8000408:	40005400 	.word	0x40005400
 800040c:	2000090e 	.word	0x2000090e

08000410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b09a      	sub	sp, #104	; 0x68
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000416:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000424:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
 800043e:	611a      	str	r2, [r3, #16]
 8000440:	615a      	str	r2, [r3, #20]
 8000442:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	222c      	movs	r2, #44	; 0x2c
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f004 fcea 	bl	8004e24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000450:	4b43      	ldr	r3, [pc, #268]	; (8000560 <MX_TIM1_Init+0x150>)
 8000452:	4a44      	ldr	r2, [pc, #272]	; (8000564 <MX_TIM1_Init+0x154>)
 8000454:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000456:	4b42      	ldr	r3, [pc, #264]	; (8000560 <MX_TIM1_Init+0x150>)
 8000458:	2247      	movs	r2, #71	; 0x47
 800045a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045c:	4b40      	ldr	r3, [pc, #256]	; (8000560 <MX_TIM1_Init+0x150>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000462:	4b3f      	ldr	r3, [pc, #252]	; (8000560 <MX_TIM1_Init+0x150>)
 8000464:	2263      	movs	r2, #99	; 0x63
 8000466:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000468:	4b3d      	ldr	r3, [pc, #244]	; (8000560 <MX_TIM1_Init+0x150>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800046e:	4b3c      	ldr	r3, [pc, #240]	; (8000560 <MX_TIM1_Init+0x150>)
 8000470:	2200      	movs	r2, #0
 8000472:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000474:	4b3a      	ldr	r3, [pc, #232]	; (8000560 <MX_TIM1_Init+0x150>)
 8000476:	2200      	movs	r2, #0
 8000478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800047a:	4839      	ldr	r0, [pc, #228]	; (8000560 <MX_TIM1_Init+0x150>)
 800047c:	f003 f94c 	bl	8003718 <HAL_TIM_Base_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000486:	f000 f951 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800048a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800048e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000490:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000494:	4619      	mov	r1, r3
 8000496:	4832      	ldr	r0, [pc, #200]	; (8000560 <MX_TIM1_Init+0x150>)
 8000498:	f003 fbf0 	bl	8003c7c <HAL_TIM_ConfigClockSource>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80004a2:	f000 f943 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004a6:	482e      	ldr	r0, [pc, #184]	; (8000560 <MX_TIM1_Init+0x150>)
 80004a8:	f003 f98d 	bl	80037c6 <HAL_TIM_PWM_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80004b2:	f000 f93b 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b6:	2300      	movs	r3, #0
 80004b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004ba:	2300      	movs	r3, #0
 80004bc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004c6:	4619      	mov	r1, r3
 80004c8:	4825      	ldr	r0, [pc, #148]	; (8000560 <MX_TIM1_Init+0x150>)
 80004ca:	f004 f875 	bl	80045b8 <HAL_TIMEx_MasterConfigSynchronization>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80004d4:	f000 f92a 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d8:	2360      	movs	r3, #96	; 0x60
 80004da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004e0:	2300      	movs	r3, #0
 80004e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004e4:	2300      	movs	r3, #0
 80004e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004ec:	2300      	movs	r3, #0
 80004ee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004f0:	2300      	movs	r3, #0
 80004f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f8:	2200      	movs	r2, #0
 80004fa:	4619      	mov	r1, r3
 80004fc:	4818      	ldr	r0, [pc, #96]	; (8000560 <MX_TIM1_Init+0x150>)
 80004fe:	f003 faa9 	bl	8003a54 <HAL_TIM_PWM_ConfigChannel>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000508:	f000 f910 	bl	800072c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000524:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800052e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4619      	mov	r1, r3
 8000540:	4807      	ldr	r0, [pc, #28]	; (8000560 <MX_TIM1_Init+0x150>)
 8000542:	f004 f89f 	bl	8004684 <HAL_TIMEx_ConfigBreakDeadTime>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800054c:	f000 f8ee 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <MX_TIM1_Init+0x150>)
 8000552:	f000 f9f9 	bl	8000948 <HAL_TIM_MspPostInit>

}
 8000556:	bf00      	nop
 8000558:	3768      	adds	r7, #104	; 0x68
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200000c8 	.word	0x200000c8
 8000564:	40012c00 	.word	0x40012c00

08000568 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 800056e:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <MX_USART2_UART_Init+0x5c>)
 8000570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 8000574:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 800058e:	220c      	movs	r2, #12
 8000590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 80005ac:	f004 f8e2 	bl	8004774 <HAL_UART_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005b6:	f000 f8b9 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000158 	.word	0x20000158
 80005c4:	40004400 	.word	0x40004400

080005c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_DMA_Init+0x38>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <MX_DMA_Init+0x38>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_DMA_Init+0x38>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200c      	movs	r0, #12
 80005ec:	f001 f89d 	bl	800172a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005f0:	200c      	movs	r0, #12
 80005f2:	f001 f8b6 	bl	8001762 <HAL_NVIC_EnableIRQ>

}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b41      	ldr	r3, [pc, #260]	; (8000720 <MX_GPIO_Init+0x11c>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a40      	ldr	r2, [pc, #256]	; (8000720 <MX_GPIO_Init+0x11c>)
 8000620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <MX_GPIO_Init+0x11c>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b3b      	ldr	r3, [pc, #236]	; (8000720 <MX_GPIO_Init+0x11c>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a3a      	ldr	r2, [pc, #232]	; (8000720 <MX_GPIO_Init+0x11c>)
 8000638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b38      	ldr	r3, [pc, #224]	; (8000720 <MX_GPIO_Init+0x11c>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b35      	ldr	r3, [pc, #212]	; (8000720 <MX_GPIO_Init+0x11c>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a34      	ldr	r2, [pc, #208]	; (8000720 <MX_GPIO_Init+0x11c>)
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b32      	ldr	r3, [pc, #200]	; (8000720 <MX_GPIO_Init+0x11c>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <MX_GPIO_Init+0x11c>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a2e      	ldr	r2, [pc, #184]	; (8000720 <MX_GPIO_Init+0x11c>)
 8000668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <MX_GPIO_Init+0x11c>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000680:	4828      	ldr	r0, [pc, #160]	; (8000724 <MX_GPIO_Init+0x120>)
 8000682:	f001 fb05 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TestA_Pin|TestB_Pin|TestC_Pin|PA15_PIN_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f001 fafe 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC10_PIN_GPIO_Port, PC10_PIN_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069a:	4823      	ldr	r0, [pc, #140]	; (8000728 <MX_GPIO_Init+0x124>)
 800069c:	f001 faf8 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	481c      	ldr	r0, [pc, #112]	; (8000728 <MX_GPIO_Init+0x124>)
 80006b8:	f001 f978 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <MX_GPIO_Init+0x120>)
 80006d6:	f001 f969 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : TestA_Pin TestB_Pin TestC_Pin PA15_PIN_Pin */
  GPIO_InitStruct.Pin = TestA_Pin|TestB_Pin|TestC_Pin|PA15_PIN_Pin;
 80006da:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f6:	f001 f959 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10_PIN_Pin */
  GPIO_InitStruct.Pin = PC10_PIN_Pin;
 80006fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PC10_PIN_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_GPIO_Init+0x124>)
 8000714:	f001 f94a 	bl	80019ac <HAL_GPIO_Init>

}
 8000718:	bf00      	nop
 800071a:	3728      	adds	r7, #40	; 0x28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	48000400 	.word	0x48000400
 8000728:	48000800 	.word	0x48000800

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_MspInit+0x44>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <HAL_MspInit+0x44>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_MspInit+0x44>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_MspInit+0x44>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_MspInit+0x44>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_MspInit+0x44>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800076e:	2007      	movs	r0, #7
 8000770:	f000 ffd0 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007a0:	d13c      	bne.n	800081c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <HAL_ADC_MspInit+0xa4>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	4a1f      	ldr	r2, [pc, #124]	; (8000824 <HAL_ADC_MspInit+0xa4>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6153      	str	r3, [r2, #20]
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <HAL_ADC_MspInit+0xa4>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <HAL_ADC_MspInit+0xa4>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_ADC_MspInit+0xa4>)
 80007c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <HAL_ADC_MspInit+0xa4>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_ADC_MspInit+0xa4>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a13      	ldr	r2, [pc, #76]	; (8000824 <HAL_ADC_MspInit+0xa4>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_ADC_MspInit+0xa4>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    PA6     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ea:	2308      	movs	r3, #8
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ee:	2303      	movs	r3, #3
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	480a      	ldr	r0, [pc, #40]	; (8000828 <HAL_ADC_MspInit+0xa8>)
 80007fe:	f001 f8d5 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	2303      	movs	r3, #3
 8000808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f001 f8c8 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000
 8000828:	48000800 	.word	0x48000800

0800082c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <HAL_I2C_MspInit+0x7c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d127      	bne.n	800089e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <HAL_I2C_MspInit+0x80>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a16      	ldr	r2, [pc, #88]	; (80008ac <HAL_I2C_MspInit+0x80>)
 8000854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000858:	6153      	str	r3, [r2, #20]
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <HAL_I2C_MspInit+0x80>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000866:	23c0      	movs	r3, #192	; 0xc0
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086a:	2312      	movs	r3, #18
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000876:	2304      	movs	r3, #4
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <HAL_I2C_MspInit+0x84>)
 8000882:	f001 f893 	bl	80019ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_I2C_MspInit+0x80>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_I2C_MspInit+0x80>)
 800088c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000890:	61d3      	str	r3, [r2, #28]
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_I2C_MspInit+0x80>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40005400 	.word	0x40005400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48000400 	.word	0x48000400

080008b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <HAL_TIM_Base_MspInit+0x84>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d133      	bne.n	800092e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_TIM_Base_MspInit+0x88>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <HAL_TIM_Base_MspInit+0x88>)
 80008cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <HAL_TIM_Base_MspInit+0x88>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 80008e0:	4a18      	ldr	r2, [pc, #96]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 80008e2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 80008e6:	2210      	movs	r2, #16
 80008e8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 80008f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008fc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 8000900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000904:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 8000914:	f000 ff3f 	bl	8001796 <HAL_DMA_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800091e:	f7ff ff05 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a06      	ldr	r2, [pc, #24]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
 8000928:	4a05      	ldr	r2, [pc, #20]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40012c00 	.word	0x40012c00
 800093c:	40021000 	.word	0x40021000
 8000940:	20000114 	.word	0x20000114
 8000944:	4002001c 	.word	0x4002001c

08000948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a11      	ldr	r2, [pc, #68]	; (80009ac <HAL_TIM_MspPostInit+0x64>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d11b      	bne.n	80009a2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_TIM_MspPostInit+0x68>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <HAL_TIM_MspPostInit+0x68>)
 8000970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_TIM_MspPostInit+0x68>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000982:	2301      	movs	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_TIM_MspPostInit+0x6c>)
 800099e:	f001 f805 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3720      	adds	r7, #32
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40012c00 	.word	0x40012c00
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48000800 	.word	0x48000800

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x7c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d128      	bne.n	8000a2c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_UART_MspInit+0x80>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <HAL_UART_MspInit+0x80>)
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_UART_MspInit+0x80>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_UART_MspInit+0x80>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_UART_MspInit+0x80>)
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	6153      	str	r3, [r2, #20]
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_UART_MspInit+0x80>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f000 ffc0 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40021000 	.word	0x40021000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f88e 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <DMA1_Channel2_IRQHandler+0x10>)
 8000a96:	f000 fec5 	bl	8001824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000114 	.word	0x20000114

08000aa4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ace:	490e      	ldr	r1, [pc, #56]	; (8000b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <LoopForever+0xe>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae4:	4c0b      	ldr	r4, [pc, #44]	; (8000b14 <LoopForever+0x16>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000af2:	f7ff ffd7 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f004 f971 	bl	8004ddc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afa:	f7ff fb65 	bl	80001c8 <main>

08000afe <LoopForever>:

LoopForever:
    b LoopForever
 8000afe:	e7fe      	b.n	8000afe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b00:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b0c:	08004e8c 	.word	0x08004e8c
  ldr r2, =_sbss
 8000b10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b14:	200001e0 	.word	0x200001e0

08000b18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_Init+0x28>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_Init+0x28>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 fdf1 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fdfe 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fe09 	bl	800177e <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b84:	f000 fdd1 	bl	800172a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000004 	.word	0x20000004
 8000ba0:	2000000c 	.word	0x2000000c
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	2000000c 	.word	0x2000000c
 8000bcc:	200001dc 	.word	0x200001dc

08000bd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200001dc 	.word	0x200001dc

08000be8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff ffee 	bl	8000bd0 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffde 	bl	8000bd0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000000c 	.word	0x2000000c

08000c30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b09a      	sub	sp, #104	; 0x68
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e169      	b.n	8000f24 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d176      	bne.n	8000d50 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d152      	bne.n	8000d10 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff fd7b 	bl	8000780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d13b      	bne.n	8000d10 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f000 fc05 	bl	80014a8 <ADC_Disable>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d12f      	bne.n	8000d10 <HAL_ADC_Init+0xe0>
 8000cb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d12b      	bne.n	8000d10 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cc0:	f023 0302 	bic.w	r3, r3, #2
 8000cc4:	f043 0202 	orr.w	r2, r3, #2
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cda:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cea:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cec:	4b8f      	ldr	r3, [pc, #572]	; (8000f2c <HAL_ADC_Init+0x2fc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a8f      	ldr	r2, [pc, #572]	; (8000f30 <HAL_ADC_Init+0x300>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	0c9a      	lsrs	r2, r3, #18
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d02:	e002      	b.n	8000d0a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f9      	bne.n	8000d04 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d007      	beq.n	8000d2e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d2c:	d110      	bne.n	8000d50 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f023 0312 	bic.w	r3, r3, #18
 8000d36:	f043 0210 	orr.w	r2, r3, #16
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f043 0201 	orr.w	r2, r3, #1
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f040 80d6 	bne.w	8000f0a <HAL_ADC_Init+0x2da>
 8000d5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 80d1 	bne.w	8000f0a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 80c9 	bne.w	8000f0a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d80:	f043 0202 	orr.w	r2, r3, #2
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d88:	4b6a      	ldr	r3, [pc, #424]	; (8000f34 <HAL_ADC_Init+0x304>)
 8000d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d108      	bne.n	8000db0 <HAL_ADC_Init+0x180>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d101      	bne.n	8000db0 <HAL_ADC_Init+0x180>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <HAL_ADC_Init+0x182>
 8000db0:	2300      	movs	r3, #0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d11c      	bne.n	8000df0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000db6:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d010      	beq.n	8000dde <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d107      	bne.n	8000dd8 <HAL_ADC_Init+0x1a8>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d101      	bne.n	8000dd8 <HAL_ADC_Init+0x1a8>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <HAL_ADC_Init+0x1aa>
 8000dd8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d108      	bne.n	8000df0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	431a      	orrs	r2, r3
 8000dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dee:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7e5b      	ldrb	r3, [r3, #25]
 8000df4:	035b      	lsls	r3, r3, #13
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000dfa:	2a01      	cmp	r2, #1
 8000dfc:	d002      	beq.n	8000e04 <HAL_ADC_Init+0x1d4>
 8000dfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e02:	e000      	b.n	8000e06 <HAL_ADC_Init+0x1d6>
 8000e04:	2200      	movs	r2, #0
 8000e06:	431a      	orrs	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e16:	4313      	orrs	r3, r2
 8000e18:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d11b      	bne.n	8000e5c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7e5b      	ldrb	r3, [r3, #25]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d109      	bne.n	8000e40 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	3b01      	subs	r3, #1
 8000e32:	045a      	lsls	r2, r3, #17
 8000e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e36:	4313      	orrs	r3, r2
 8000e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8000e3e:	e00d      	b.n	8000e5c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e48:	f043 0220 	orr.w	r2, r3, #32
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e54:	f043 0201 	orr.w	r2, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d007      	beq.n	8000e74 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e70:	4313      	orrs	r3, r2
 8000e72:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d114      	bne.n	8000eac <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e90:	f023 0302 	bic.w	r3, r3, #2
 8000e94:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7e1b      	ldrb	r3, [r3, #24]
 8000e9a:	039a      	lsls	r2, r3, #14
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <HAL_ADC_Init+0x308>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	6812      	ldr	r2, [r2, #0]
 8000eba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d10c      	bne.n	8000ee2 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f023 010f 	bic.w	r1, r3, #15
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	1e5a      	subs	r2, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	631a      	str	r2, [r3, #48]	; 0x30
 8000ee0:	e007      	b.n	8000ef2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 020f 	bic.w	r2, r2, #15
 8000ef0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f023 0303 	bic.w	r3, r3, #3
 8000f00:	f043 0201 	orr.w	r2, r3, #1
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	641a      	str	r2, [r3, #64]	; 0x40
 8000f08:	e00a      	b.n	8000f20 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f023 0312 	bic.w	r3, r3, #18
 8000f12:	f043 0210 	orr.w	r2, r3, #16
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3768      	adds	r7, #104	; 0x68
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000004 	.word	0x20000004
 8000f30:	431bde83 	.word	0x431bde83
 8000f34:	50000300 	.word	0x50000300
 8000f38:	fff0c007 	.word	0xfff0c007

08000f3c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b09b      	sub	sp, #108	; 0x6c
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_ConfigChannel+0x22>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e299      	b.n	8001492 <HAL_ADC_ConfigChannel+0x556>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f040 827d 	bne.w	8001470 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d81c      	bhi.n	8000fb8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	461a      	mov	r2, r3
 8000f92:	231f      	movs	r3, #31
 8000f94:	4093      	lsls	r3, r2
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4019      	ands	r1, r3
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa00 f203 	lsl.w	r2, r0, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb6:	e063      	b.n	8001080 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b09      	cmp	r3, #9
 8000fbe:	d81e      	bhi.n	8000ffe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	3b1e      	subs	r3, #30
 8000fd4:	221f      	movs	r2, #31
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	4019      	ands	r1, r3
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	3b1e      	subs	r3, #30
 8000ff0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
 8000ffc:	e040      	b.n	8001080 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b0e      	cmp	r3, #14
 8001004:	d81e      	bhi.n	8001044 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	3b3c      	subs	r3, #60	; 0x3c
 800101a:	221f      	movs	r2, #31
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	4019      	ands	r1, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	3b3c      	subs	r3, #60	; 0x3c
 8001036:	fa00 f203 	lsl.w	r2, r0, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	639a      	str	r2, [r3, #56]	; 0x38
 8001042:	e01d      	b.n	8001080 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	3b5a      	subs	r3, #90	; 0x5a
 8001058:	221f      	movs	r2, #31
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	4019      	ands	r1, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	3b5a      	subs	r3, #90	; 0x5a
 8001074:	fa00 f203 	lsl.w	r2, r0, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b00      	cmp	r3, #0
 800108c:	f040 80e5 	bne.w	800125a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b09      	cmp	r3, #9
 8001096:	d91c      	bls.n	80010d2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6999      	ldr	r1, [r3, #24]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	3b1e      	subs	r3, #30
 80010aa:	2207      	movs	r2, #7
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4019      	ands	r1, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	6898      	ldr	r0, [r3, #8]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	3b1e      	subs	r3, #30
 80010c4:	fa00 f203 	lsl.w	r2, r0, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	619a      	str	r2, [r3, #24]
 80010d0:	e019      	b.n	8001106 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6959      	ldr	r1, [r3, #20]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	2207      	movs	r2, #7
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	4019      	ands	r1, r3
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	6898      	ldr	r0, [r3, #8]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	fa00 f203 	lsl.w	r2, r0, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	3b01      	subs	r3, #1
 8001124:	2b03      	cmp	r3, #3
 8001126:	d84f      	bhi.n	80011c8 <HAL_ADC_ConfigChannel+0x28c>
 8001128:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <HAL_ADC_ConfigChannel+0x1f4>)
 800112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112e:	bf00      	nop
 8001130:	08001141 	.word	0x08001141
 8001134:	08001163 	.word	0x08001163
 8001138:	08001185 	.word	0x08001185
 800113c:	080011a7 	.word	0x080011a7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001146:	4b99      	ldr	r3, [pc, #612]	; (80013ac <HAL_ADC_ConfigChannel+0x470>)
 8001148:	4013      	ands	r3, r2
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	0691      	lsls	r1, r2, #26
 8001150:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001152:	430a      	orrs	r2, r1
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800115e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001160:	e07e      	b.n	8001260 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001168:	4b90      	ldr	r3, [pc, #576]	; (80013ac <HAL_ADC_ConfigChannel+0x470>)
 800116a:	4013      	ands	r3, r2
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	0691      	lsls	r1, r2, #26
 8001172:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001174:	430a      	orrs	r2, r1
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001180:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001182:	e06d      	b.n	8001260 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800118a:	4b88      	ldr	r3, [pc, #544]	; (80013ac <HAL_ADC_ConfigChannel+0x470>)
 800118c:	4013      	ands	r3, r2
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	0691      	lsls	r1, r2, #26
 8001194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001196:	430a      	orrs	r2, r1
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011a2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011a4:	e05c      	b.n	8001260 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011ac:	4b7f      	ldr	r3, [pc, #508]	; (80013ac <HAL_ADC_ConfigChannel+0x470>)
 80011ae:	4013      	ands	r3, r2
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	0691      	lsls	r1, r2, #26
 80011b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011b8:	430a      	orrs	r2, r1
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011c4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011c6:	e04b      	b.n	8001260 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	069b      	lsls	r3, r3, #26
 80011d8:	429a      	cmp	r2, r3
 80011da:	d107      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011ea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80011f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	069b      	lsls	r3, r3, #26
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d107      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800120e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001216:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	069b      	lsls	r3, r3, #26
 8001220:	429a      	cmp	r2, r3
 8001222:	d107      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001232:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800123a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	069b      	lsls	r3, r3, #26
 8001244:	429a      	cmp	r2, r3
 8001246:	d10a      	bne.n	800125e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001256:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001258:	e001      	b.n	800125e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800125a:	bf00      	nop
 800125c:	e000      	b.n	8001260 <HAL_ADC_ConfigChannel+0x324>
      break;
 800125e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d108      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x344>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x344>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_ADC_ConfigChannel+0x346>
 8001280:	2300      	movs	r3, #0
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 80ff 	bne.w	8001486 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d00f      	beq.n	80012b0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	400a      	ands	r2, r1
 80012aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80012ae:	e049      	b.n	8001344 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2201      	movs	r2, #1
 80012be:	409a      	lsls	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b09      	cmp	r3, #9
 80012d0:	d91c      	bls.n	800130c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6999      	ldr	r1, [r3, #24]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	3b1b      	subs	r3, #27
 80012e4:	2207      	movs	r2, #7
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	4019      	ands	r1, r3
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	6898      	ldr	r0, [r3, #8]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	3b1b      	subs	r3, #27
 80012fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	619a      	str	r2, [r3, #24]
 800130a:	e01b      	b.n	8001344 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6959      	ldr	r1, [r3, #20]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	2207      	movs	r2, #7
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	4019      	ands	r1, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6898      	ldr	r0, [r3, #8]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	fa00 f203 	lsl.w	r2, r0, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_ADC_ConfigChannel+0x474>)
 8001346:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b10      	cmp	r3, #16
 800134e:	d105      	bne.n	800135c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001358:	2b00      	cmp	r3, #0
 800135a:	d014      	beq.n	8001386 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001360:	2b11      	cmp	r3, #17
 8001362:	d105      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00a      	beq.n	8001386 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001374:	2b12      	cmp	r3, #18
 8001376:	f040 8086 	bne.w	8001486 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800137a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001382:	2b00      	cmp	r3, #0
 8001384:	d17f      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d10d      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x478>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d106      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x478>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e005      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x47a>
 80013aa:	bf00      	nop
 80013ac:	83fff000 	.word	0x83fff000
 80013b0:	50000300 	.word	0x50000300
 80013b4:	2300      	movs	r3, #0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d150      	bne.n	800145c <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013ba:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d010      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d107      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x4a0>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x4a0>
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <HAL_ADC_ConfigChannel+0x4a2>
 80013dc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d13c      	bne.n	800145c <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b10      	cmp	r3, #16
 80013e8:	d11d      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x4ea>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f2:	d118      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80013f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_ADC_ConfigChannel+0x564>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a27      	ldr	r2, [pc, #156]	; (80014a4 <HAL_ADC_ConfigChannel+0x568>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9a      	lsrs	r2, r3, #18
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001416:	e002      	b.n	800141e <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3b01      	subs	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f9      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001424:	e02e      	b.n	8001484 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b11      	cmp	r3, #17
 800142c:	d10b      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x50a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001436:	d106      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001442:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001444:	e01e      	b.n	8001484 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b12      	cmp	r3, #18
 800144c:	d11a      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800144e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001458:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800145a:	e013      	b.n	8001484 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f043 0220 	orr.w	r2, r3, #32
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800146e:	e00a      	b.n	8001486 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f043 0220 	orr.w	r2, r3, #32
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001482:	e000      	b.n	8001486 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001484:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800148e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001492:	4618      	mov	r0, r3
 8001494:	376c      	adds	r7, #108	; 0x6c
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000004 	.word	0x20000004
 80014a4:	431bde83 	.word	0x431bde83

080014a8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d108      	bne.n	80014d4 <ADC_Disable+0x2c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <ADC_Disable+0x2c>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <ADC_Disable+0x2e>
 80014d4:	2300      	movs	r3, #0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d047      	beq.n	800156a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 030d 	and.w	r3, r3, #13
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d10f      	bne.n	8001508 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0202 	orr.w	r2, r2, #2
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2203      	movs	r2, #3
 80014fe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001500:	f7ff fb66 	bl	8000bd0 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001506:	e029      	b.n	800155c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f043 0210 	orr.w	r2, r3, #16
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e023      	b.n	800156c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001524:	f7ff fb54 	bl	8000bd0 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d914      	bls.n	800155c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	d10d      	bne.n	800155c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f043 0210 	orr.w	r2, r3, #16
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e007      	b.n	800156c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b01      	cmp	r3, #1
 8001568:	d0dc      	beq.n	8001524 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001590:	4013      	ands	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800159c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <__NVIC_GetPriorityGrouping+0x18>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 0307 	and.w	r3, r3, #7
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db0b      	blt.n	8001602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 021f 	and.w	r2, r3, #31
 80015f0:	4907      	ldr	r1, [pc, #28]	; (8001610 <__NVIC_EnableIRQ+0x38>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	2001      	movs	r0, #1
 80015fa:	fa00 f202 	lsl.w	r2, r0, r2
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000e100 	.word	0xe000e100

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	2b04      	cmp	r3, #4
 8001684:	bf28      	it	cs
 8001686:	2304      	movcs	r3, #4
 8001688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3304      	adds	r3, #4
 800168e:	2b06      	cmp	r3, #6
 8001690:	d902      	bls.n	8001698 <NVIC_EncodePriority+0x30>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b03      	subs	r3, #3
 8001696:	e000      	b.n	800169a <NVIC_EncodePriority+0x32>
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	4313      	orrs	r3, r2
         );
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f4:	f7ff ff8e 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff29 	bl	8001574 <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff3e 	bl	80015bc <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff8e 	bl	8001668 <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5d 	bl	8001614 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff31 	bl	80015d8 <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffa2 	bl	80016d0 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e037      	b.n	800181c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f8b4 	bl	800196c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}  
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	2204      	movs	r2, #4
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d024      	beq.n	8001896 <HAL_DMA_IRQHandler+0x72>
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	d01f      	beq.n	8001896 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d107      	bne.n	8001874 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0204 	bic.w	r2, r2, #4
 8001872:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187c:	2104      	movs	r1, #4
 800187e:	fa01 f202 	lsl.w	r2, r1, r2
 8001882:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	2b00      	cmp	r3, #0
 800188a:	d06a      	beq.n	8001962 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001894:	e065      	b.n	8001962 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	2202      	movs	r2, #2
 800189c:	409a      	lsls	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d02c      	beq.n	8001900 <HAL_DMA_IRQHandler+0xdc>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d027      	beq.n	8001900 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0320 	and.w	r3, r3, #32
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10b      	bne.n	80018d6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 020a 	bic.w	r2, r2, #10
 80018cc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018de:	2102      	movs	r1, #2
 80018e0:	fa01 f202 	lsl.w	r2, r1, r2
 80018e4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d035      	beq.n	8001962 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80018fe:	e030      	b.n	8001962 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	2208      	movs	r2, #8
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d028      	beq.n	8001962 <HAL_DMA_IRQHandler+0x13e>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d023      	beq.n	8001962 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 020e 	bic.w	r2, r2, #14
 8001928:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001932:	2101      	movs	r1, #1
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	2b00      	cmp	r3, #0
 8001956:	d004      	beq.n	8001962 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	4798      	blx	r3
    }
  }
}  
 8001960:	e7ff      	b.n	8001962 <HAL_DMA_IRQHandler+0x13e>
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <DMA_CalcBaseAndBitshift+0x34>)
 800197c:	4413      	add	r3, r2
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <DMA_CalcBaseAndBitshift+0x38>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	009a      	lsls	r2, r3, #2
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <DMA_CalcBaseAndBitshift+0x3c>)
 8001990:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	bffdfff8 	.word	0xbffdfff8
 80019a4:	cccccccd 	.word	0xcccccccd
 80019a8:	40020000 	.word	0x40020000

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ba:	e14e      	b.n	8001c5a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2101      	movs	r1, #1
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 8140 	beq.w	8001c54 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d005      	beq.n	80019ec <HAL_GPIO_Init+0x40>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d130      	bne.n	8001a4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a22:	2201      	movs	r2, #1
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	f003 0201 	and.w	r2, r3, #1
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d017      	beq.n	8001a8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d123      	bne.n	8001ade <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	08da      	lsrs	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3208      	adds	r2, #8
 8001a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	691a      	ldr	r2, [r3, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	08da      	lsrs	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3208      	adds	r2, #8
 8001ad8:	6939      	ldr	r1, [r7, #16]
 8001ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0203 	and.w	r2, r3, #3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 809a 	beq.w	8001c54 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b20:	4b55      	ldr	r3, [pc, #340]	; (8001c78 <HAL_GPIO_Init+0x2cc>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a54      	ldr	r2, [pc, #336]	; (8001c78 <HAL_GPIO_Init+0x2cc>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b52      	ldr	r3, [pc, #328]	; (8001c78 <HAL_GPIO_Init+0x2cc>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b38:	4a50      	ldr	r2, [pc, #320]	; (8001c7c <HAL_GPIO_Init+0x2d0>)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	3302      	adds	r3, #2
 8001b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b62:	d013      	beq.n	8001b8c <HAL_GPIO_Init+0x1e0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a46      	ldr	r2, [pc, #280]	; (8001c80 <HAL_GPIO_Init+0x2d4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d00d      	beq.n	8001b88 <HAL_GPIO_Init+0x1dc>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a45      	ldr	r2, [pc, #276]	; (8001c84 <HAL_GPIO_Init+0x2d8>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d007      	beq.n	8001b84 <HAL_GPIO_Init+0x1d8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a44      	ldr	r2, [pc, #272]	; (8001c88 <HAL_GPIO_Init+0x2dc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d101      	bne.n	8001b80 <HAL_GPIO_Init+0x1d4>
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e006      	b.n	8001b8e <HAL_GPIO_Init+0x1e2>
 8001b80:	2305      	movs	r3, #5
 8001b82:	e004      	b.n	8001b8e <HAL_GPIO_Init+0x1e2>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e002      	b.n	8001b8e <HAL_GPIO_Init+0x1e2>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_GPIO_Init+0x1e2>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	f002 0203 	and.w	r2, r2, #3
 8001b94:	0092      	lsls	r2, r2, #2
 8001b96:	4093      	lsls	r3, r2
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b9e:	4937      	ldr	r1, [pc, #220]	; (8001c7c <HAL_GPIO_Init+0x2d0>)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bac:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <HAL_GPIO_Init+0x2e0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bd0:	4a2e      	ldr	r2, [pc, #184]	; (8001c8c <HAL_GPIO_Init+0x2e0>)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_GPIO_Init+0x2e0>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bfa:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <HAL_GPIO_Init+0x2e0>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_GPIO_Init+0x2e0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c24:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <HAL_GPIO_Init+0x2e0>)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_GPIO_Init+0x2e0>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_GPIO_Init+0x2e0>)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f47f aea9 	bne.w	80019bc <HAL_GPIO_Init+0x10>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	bf00      	nop
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	48000400 	.word	0x48000400
 8001c84:	48000800 	.word	0x48000800
 8001c88:	48000c00 	.word	0x48000c00
 8001c8c:	40010400 	.word	0x40010400

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e081      	b.n	8001dd6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fda0 	bl	800082c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2224      	movs	r2, #36	; 0x24
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d107      	bne.n	8001d3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	e006      	b.n	8001d48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d104      	bne.n	8001d5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69d9      	ldr	r1, [r3, #28]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1a      	ldr	r2, [r3, #32]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d138      	bne.n	8001e66 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e032      	b.n	8001e68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2224      	movs	r2, #36	; 0x24
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e30:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6819      	ldr	r1, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e66:	2302      	movs	r3, #2
  }
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d139      	bne.n	8001efe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e033      	b.n	8001f00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2224      	movs	r2, #36	; 0x24
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ec6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001efe:	2302      	movs	r3, #2
  }
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f001 b823 	b.w	8002f78 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 817d 	beq.w	8002242 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f48:	4bbc      	ldr	r3, [pc, #752]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d00c      	beq.n	8001f6e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f54:	4bb9      	ldr	r3, [pc, #740]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d15c      	bne.n	800201a <HAL_RCC_OscConfig+0x10e>
 8001f60:	4bb6      	ldr	r3, [pc, #728]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d155      	bne.n	800201a <HAL_RCC_OscConfig+0x10e>
 8001f6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f72:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x94>
 8001f9a:	4ba8      	ldr	r3, [pc, #672]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	e015      	b.n	8001fcc <HAL_RCC_OscConfig+0xc0>
 8001fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001fbc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001fc8:	4b9c      	ldr	r3, [pc, #624]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001fd4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001fd8:	fa92 f2a2 	rbit	r2, r2
 8001fdc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001fe0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001fe4:	fab2 f282 	clz	r2, r2
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f042 0220 	orr.w	r2, r2, #32
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	f002 021f 	and.w	r2, r2, #31
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 811f 	beq.w	8002240 <HAL_RCC_OscConfig+0x334>
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 8116 	bne.w	8002240 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	f000 bfaf 	b.w	8002f78 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x12e>
 800202c:	4b83      	ldr	r3, [pc, #524]	; (800223c <HAL_RCC_OscConfig+0x330>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a82      	ldr	r2, [pc, #520]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e036      	b.n	80020a8 <HAL_RCC_OscConfig+0x19c>
 800203a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x158>
 800204a:	4b7c      	ldr	r3, [pc, #496]	; (800223c <HAL_RCC_OscConfig+0x330>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a7b      	ldr	r2, [pc, #492]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8002050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b79      	ldr	r3, [pc, #484]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a78      	ldr	r2, [pc, #480]	; (800223c <HAL_RCC_OscConfig+0x330>)
 800205c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e021      	b.n	80020a8 <HAL_RCC_OscConfig+0x19c>
 8002064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002068:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x184>
 8002076:	4b71      	ldr	r3, [pc, #452]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a70      	ldr	r2, [pc, #448]	; (800223c <HAL_RCC_OscConfig+0x330>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b6e      	ldr	r3, [pc, #440]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a6d      	ldr	r2, [pc, #436]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0x19c>
 8002090:	4b6a      	ldr	r3, [pc, #424]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a69      	ldr	r2, [pc, #420]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_OscConfig+0x330>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a66      	ldr	r2, [pc, #408]	; (800223c <HAL_RCC_OscConfig+0x330>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020a8:	4b64      	ldr	r3, [pc, #400]	; (800223c <HAL_RCC_OscConfig+0x330>)
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	f023 020f 	bic.w	r2, r3, #15
 80020b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	495f      	ldr	r1, [pc, #380]	; (800223c <HAL_RCC_OscConfig+0x330>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d059      	beq.n	8002186 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7fe fd7d 	bl	8000bd0 <HAL_GetTick>
 80020d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020dc:	f7fe fd78 	bl	8000bd0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b64      	cmp	r3, #100	; 0x64
 80020ea:	d902      	bls.n	80020f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	f000 bf43 	b.w	8002f78 <HAL_RCC_OscConfig+0x106c>
 80020f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002106:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_RCC_OscConfig+0x218>
 800211e:	4b47      	ldr	r3, [pc, #284]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	e015      	b.n	8002150 <HAL_RCC_OscConfig+0x244>
 8002124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002128:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800213c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002140:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800214c:	4b3b      	ldr	r3, [pc, #236]	; (800223c <HAL_RCC_OscConfig+0x330>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002154:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002158:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800215c:	fa92 f2a2 	rbit	r2, r2
 8002160:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002164:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002168:	fab2 f282 	clz	r2, r2
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f042 0220 	orr.w	r2, r2, #32
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	f002 021f 	and.w	r2, r2, #31
 8002178:	2101      	movs	r1, #1
 800217a:	fa01 f202 	lsl.w	r2, r1, r2
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ab      	beq.n	80020dc <HAL_RCC_OscConfig+0x1d0>
 8002184:	e05d      	b.n	8002242 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7fe fd23 	bl	8000bd0 <HAL_GetTick>
 800218a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002190:	f7fe fd1e 	bl	8000bd0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b64      	cmp	r3, #100	; 0x64
 800219e:	d902      	bls.n	80021a6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	f000 bee9 	b.w	8002f78 <HAL_RCC_OscConfig+0x106c>
 80021a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021aa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80021ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d102      	bne.n	80021d8 <HAL_RCC_OscConfig+0x2cc>
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_RCC_OscConfig+0x330>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	e015      	b.n	8002204 <HAL_RCC_OscConfig+0x2f8>
 80021d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021dc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80021e4:	fa93 f3a3 	rbit	r3, r3
 80021e8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002200:	4b0e      	ldr	r3, [pc, #56]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002208:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800220c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002210:	fa92 f2a2 	rbit	r2, r2
 8002214:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002218:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800221c:	fab2 f282 	clz	r2, r2
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	f042 0220 	orr.w	r2, r2, #32
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	f002 021f 	and.w	r2, r2, #31
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f202 	lsl.w	r2, r1, r2
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ab      	bne.n	8002190 <HAL_RCC_OscConfig+0x284>
 8002238:	e003      	b.n	8002242 <HAL_RCC_OscConfig+0x336>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002246:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 817d 	beq.w	8002552 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002258:	4ba6      	ldr	r3, [pc, #664]	; (80024f4 <HAL_RCC_OscConfig+0x5e8>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002264:	4ba3      	ldr	r3, [pc, #652]	; (80024f4 <HAL_RCC_OscConfig+0x5e8>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b08      	cmp	r3, #8
 800226e:	d172      	bne.n	8002356 <HAL_RCC_OscConfig+0x44a>
 8002270:	4ba0      	ldr	r3, [pc, #640]	; (80024f4 <HAL_RCC_OscConfig+0x5e8>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d16c      	bne.n	8002356 <HAL_RCC_OscConfig+0x44a>
 800227c:	2302      	movs	r3, #2
 800227e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800228e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d102      	bne.n	80022ac <HAL_RCC_OscConfig+0x3a0>
 80022a6:	4b93      	ldr	r3, [pc, #588]	; (80024f4 <HAL_RCC_OscConfig+0x5e8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	e013      	b.n	80022d4 <HAL_RCC_OscConfig+0x3c8>
 80022ac:	2302      	movs	r3, #2
 80022ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80022c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80022d0:	4b88      	ldr	r3, [pc, #544]	; (80024f4 <HAL_RCC_OscConfig+0x5e8>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	2202      	movs	r2, #2
 80022d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80022da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80022de:	fa92 f2a2 	rbit	r2, r2
 80022e2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80022e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80022ea:	fab2 f282 	clz	r2, r2
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	f042 0220 	orr.w	r2, r2, #32
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	f002 021f 	and.w	r2, r2, #31
 80022fa:	2101      	movs	r1, #1
 80022fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCC_OscConfig+0x410>
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d002      	beq.n	800231c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	f000 be2e 	b.w	8002f78 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b75      	ldr	r3, [pc, #468]	; (80024f4 <HAL_RCC_OscConfig+0x5e8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002328:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	21f8      	movs	r1, #248	; 0xf8
 8002332:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800233a:	fa91 f1a1 	rbit	r1, r1
 800233e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002342:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002346:	fab1 f181 	clz	r1, r1
 800234a:	b2c9      	uxtb	r1, r1
 800234c:	408b      	lsls	r3, r1
 800234e:	4969      	ldr	r1, [pc, #420]	; (80024f4 <HAL_RCC_OscConfig+0x5e8>)
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002354:	e0fd      	b.n	8002552 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8088 	beq.w	8002478 <HAL_RCC_OscConfig+0x56c>
 8002368:	2301      	movs	r3, #1
 800236a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800237a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002388:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	461a      	mov	r2, r3
 8002390:	2301      	movs	r3, #1
 8002392:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe fc1c 	bl	8000bd0 <HAL_GetTick>
 8002398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239e:	f7fe fc17 	bl	8000bd0 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d902      	bls.n	80023b4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	f000 bde2 	b.w	8002f78 <HAL_RCC_OscConfig+0x106c>
 80023b4:	2302      	movs	r3, #2
 80023b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80023c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d102      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4d8>
 80023de:	4b45      	ldr	r3, [pc, #276]	; (80024f4 <HAL_RCC_OscConfig+0x5e8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	e013      	b.n	800240c <HAL_RCC_OscConfig+0x500>
 80023e4:	2302      	movs	r3, #2
 80023e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023f6:	2302      	movs	r3, #2
 80023f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002408:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <HAL_RCC_OscConfig+0x5e8>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	2202      	movs	r2, #2
 800240e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002412:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002416:	fa92 f2a2 	rbit	r2, r2
 800241a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800241e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002422:	fab2 f282 	clz	r2, r2
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	f042 0220 	orr.w	r2, r2, #32
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	f002 021f 	and.w	r2, r2, #31
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f202 	lsl.w	r2, r1, r2
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0af      	beq.n	800239e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_RCC_OscConfig+0x5e8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	21f8      	movs	r1, #248	; 0xf8
 8002454:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800245c:	fa91 f1a1 	rbit	r1, r1
 8002460:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002464:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002468:	fab1 f181 	clz	r1, r1
 800246c:	b2c9      	uxtb	r1, r1
 800246e:	408b      	lsls	r3, r1
 8002470:	4920      	ldr	r1, [pc, #128]	; (80024f4 <HAL_RCC_OscConfig+0x5e8>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
 8002476:	e06c      	b.n	8002552 <HAL_RCC_OscConfig+0x646>
 8002478:	2301      	movs	r3, #1
 800247a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800248a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002498:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	461a      	mov	r2, r3
 80024a0:	2300      	movs	r3, #0
 80024a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fe fb94 	bl	8000bd0 <HAL_GetTick>
 80024a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ae:	f7fe fb8f 	bl	8000bd0 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d902      	bls.n	80024c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	f000 bd5a 	b.w	8002f78 <HAL_RCC_OscConfig+0x106c>
 80024c4:	2302      	movs	r3, #2
 80024c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80024d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d104      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5ec>
 80024ee:	4b01      	ldr	r3, [pc, #4]	; (80024f4 <HAL_RCC_OscConfig+0x5e8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e015      	b.n	8002520 <HAL_RCC_OscConfig+0x614>
 80024f4:	40021000 	.word	0x40021000
 80024f8:	2302      	movs	r3, #2
 80024fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800250a:	2302      	movs	r3, #2
 800250c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002510:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800251c:	4bc8      	ldr	r3, [pc, #800]	; (8002840 <HAL_RCC_OscConfig+0x934>)
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	2202      	movs	r2, #2
 8002522:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002526:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800252a:	fa92 f2a2 	rbit	r2, r2
 800252e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002532:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002536:	fab2 f282 	clz	r2, r2
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	f042 0220 	orr.w	r2, r2, #32
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f002 021f 	and.w	r2, r2, #31
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f202 	lsl.w	r2, r1, r2
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ad      	bne.n	80024ae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8110 	beq.w	8002788 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d079      	beq.n	800266c <HAL_RCC_OscConfig+0x760>
 8002578:	2301      	movs	r3, #1
 800257a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800258a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	4bab      	ldr	r3, [pc, #684]	; (8002844 <HAL_RCC_OscConfig+0x938>)
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	461a      	mov	r2, r3
 800259e:	2301      	movs	r3, #1
 80025a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fb15 	bl	8000bd0 <HAL_GetTick>
 80025a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ac:	f7fe fb10 	bl	8000bd0 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d902      	bls.n	80025c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	f000 bcdb 	b.w	8002f78 <HAL_RCC_OscConfig+0x106c>
 80025c2:	2302      	movs	r3, #2
 80025c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025dc:	2202      	movs	r2, #2
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	fa93 f2a3 	rbit	r2, r3
 80025ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002600:	2202      	movs	r2, #2
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	fa93 f2a3 	rbit	r2, r3
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800261a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261c:	4b88      	ldr	r3, [pc, #544]	; (8002840 <HAL_RCC_OscConfig+0x934>)
 800261e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002628:	2102      	movs	r1, #2
 800262a:	6019      	str	r1, [r3, #0]
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f1a3 	rbit	r1, r3
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002642:	6019      	str	r1, [r3, #0]
  return result;
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0a0      	beq.n	80025ac <HAL_RCC_OscConfig+0x6a0>
 800266a:	e08d      	b.n	8002788 <HAL_RCC_OscConfig+0x87c>
 800266c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002670:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fa93 f2a3 	rbit	r2, r3
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800268e:	601a      	str	r2, [r3, #0]
  return result;
 8002690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002694:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002698:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b68      	ldr	r3, [pc, #416]	; (8002844 <HAL_RCC_OscConfig+0x938>)
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	461a      	mov	r2, r3
 80026aa:	2300      	movs	r3, #0
 80026ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ae:	f7fe fa8f 	bl	8000bd0 <HAL_GetTick>
 80026b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b8:	f7fe fa8a 	bl	8000bd0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d902      	bls.n	80026ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	f000 bc55 	b.w	8002f78 <HAL_RCC_OscConfig+0x106c>
 80026ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026d6:	2202      	movs	r2, #2
 80026d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f2a3 	rbit	r2, r3
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026fa:	2202      	movs	r2, #2
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	fa93 f2a3 	rbit	r2, r3
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800271e:	2202      	movs	r2, #2
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002738:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273a:	4b41      	ldr	r3, [pc, #260]	; (8002840 <HAL_RCC_OscConfig+0x934>)
 800273c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002746:	2102      	movs	r1, #2
 8002748:	6019      	str	r1, [r3, #0]
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fa93 f1a3 	rbit	r1, r3
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002760:	6019      	str	r1, [r3, #0]
  return result;
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d197      	bne.n	80026b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 81a1 	beq.w	8002ae0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a4:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_RCC_OscConfig+0x934>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d116      	bne.n	80027de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b0:	4b23      	ldr	r3, [pc, #140]	; (8002840 <HAL_RCC_OscConfig+0x934>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	4a22      	ldr	r2, [pc, #136]	; (8002840 <HAL_RCC_OscConfig+0x934>)
 80027b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ba:	61d3      	str	r3, [r2, #28]
 80027bc:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_RCC_OscConfig+0x934>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80027d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027d8:	2301      	movs	r3, #1
 80027da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027de:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <HAL_RCC_OscConfig+0x93c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d11a      	bne.n	8002820 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_RCC_OscConfig+0x93c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a16      	ldr	r2, [pc, #88]	; (8002848 <HAL_RCC_OscConfig+0x93c>)
 80027f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f6:	f7fe f9eb 	bl	8000bd0 <HAL_GetTick>
 80027fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	e009      	b.n	8002814 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002800:	f7fe f9e6 	bl	8000bd0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b64      	cmp	r3, #100	; 0x64
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e3b1      	b.n	8002f78 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_RCC_OscConfig+0x93c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ef      	beq.n	8002800 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10d      	bne.n	800284c <HAL_RCC_OscConfig+0x940>
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_RCC_OscConfig+0x934>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a02      	ldr	r2, [pc, #8]	; (8002840 <HAL_RCC_OscConfig+0x934>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	e03c      	b.n	80028b8 <HAL_RCC_OscConfig+0x9ac>
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	10908120 	.word	0x10908120
 8002848:	40007000 	.word	0x40007000
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10c      	bne.n	8002876 <HAL_RCC_OscConfig+0x96a>
 800285c:	4bc1      	ldr	r3, [pc, #772]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4ac0      	ldr	r2, [pc, #768]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	6213      	str	r3, [r2, #32]
 8002868:	4bbe      	ldr	r3, [pc, #760]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4abd      	ldr	r2, [pc, #756]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 800286e:	f023 0304 	bic.w	r3, r3, #4
 8002872:	6213      	str	r3, [r2, #32]
 8002874:	e020      	b.n	80028b8 <HAL_RCC_OscConfig+0x9ac>
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b05      	cmp	r3, #5
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x994>
 8002886:	4bb7      	ldr	r3, [pc, #732]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4ab6      	ldr	r2, [pc, #728]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 800288c:	f043 0304 	orr.w	r3, r3, #4
 8002890:	6213      	str	r3, [r2, #32]
 8002892:	4bb4      	ldr	r3, [pc, #720]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	4ab3      	ldr	r2, [pc, #716]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6213      	str	r3, [r2, #32]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0x9ac>
 80028a0:	4bb0      	ldr	r3, [pc, #704]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4aaf      	ldr	r2, [pc, #700]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	6213      	str	r3, [r2, #32]
 80028ac:	4bad      	ldr	r3, [pc, #692]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4aac      	ldr	r2, [pc, #688]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 80028b2:	f023 0304 	bic.w	r3, r3, #4
 80028b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8081 	beq.w	80029cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ca:	f7fe f981 	bl	8000bd0 <HAL_GetTick>
 80028ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe f97c 	bl	8000bd0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e345      	b.n	8002f78 <HAL_RCC_OscConfig+0x106c>
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028f4:	2202      	movs	r2, #2
 80028f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	fa93 f2a3 	rbit	r2, r3
 8002906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002918:	2202      	movs	r2, #2
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f2a3 	rbit	r2, r3
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002932:	601a      	str	r2, [r3, #0]
  return result;
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800293c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d102      	bne.n	8002958 <HAL_RCC_OscConfig+0xa4c>
 8002952:	4b84      	ldr	r3, [pc, #528]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	e013      	b.n	8002980 <HAL_RCC_OscConfig+0xa74>
 8002958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002960:	2202      	movs	r2, #2
 8002962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002968:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	fa93 f2a3 	rbit	r2, r3
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	4b79      	ldr	r3, [pc, #484]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002984:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002988:	2102      	movs	r1, #2
 800298a:	6011      	str	r1, [r2, #0]
 800298c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002990:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	fa92 f1a2 	rbit	r1, r2
 800299a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800299e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029a2:	6011      	str	r1, [r2, #0]
  return result;
 80029a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029a8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	fab2 f282 	clz	r2, r2
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	f002 021f 	and.w	r2, r2, #31
 80029be:	2101      	movs	r1, #1
 80029c0:	fa01 f202 	lsl.w	r2, r1, r2
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d084      	beq.n	80028d4 <HAL_RCC_OscConfig+0x9c8>
 80029ca:	e07f      	b.n	8002acc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7fe f900 	bl	8000bd0 <HAL_GetTick>
 80029d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d4:	e00b      	b.n	80029ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe f8fb 	bl	8000bd0 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e2c4      	b.n	8002f78 <HAL_RCC_OscConfig+0x106c>
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80029f6:	2202      	movs	r2, #2
 80029f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a30:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a34:	601a      	str	r2, [r3, #0]
  return result;
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d102      	bne.n	8002a5a <HAL_RCC_OscConfig+0xb4e>
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	e013      	b.n	8002a82 <HAL_RCC_OscConfig+0xb76>
 8002a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a62:	2202      	movs	r2, #2
 8002a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f2a3 	rbit	r2, r3
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	6011      	str	r1, [r2, #0]
 8002a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a92:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	fa92 f1a2 	rbit	r1, r2
 8002a9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002aa4:	6011      	str	r1, [r2, #0]
  return result;
 8002aa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aaa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	fab2 f282 	clz	r2, r2
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	f002 021f 	and.w	r2, r2, #31
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d184      	bne.n	80029d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002acc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 8002ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ade:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8242 	beq.w	8002f76 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <HAL_RCC_OscConfig+0xc58>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	f000 8213 	beq.w	8002f26 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	f040 8162 	bne.w	8002dd6 <HAL_RCC_OscConfig+0xeca>
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	fa93 f2a3 	rbit	r2, r3
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b36:	601a      	str	r2, [r3, #0]
  return result;
 8002b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	461a      	mov	r2, r3
 8002b54:	2300      	movs	r3, #0
 8002b56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe f83a 	bl	8000bd0 <HAL_GetTick>
 8002b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b60:	e00c      	b.n	8002b7c <HAL_RCC_OscConfig+0xc70>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe f832 	bl	8000bd0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e1fd      	b.n	8002f78 <HAL_RCC_OscConfig+0x106c>
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	fa93 f2a3 	rbit	r2, r3
 8002b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ba0:	601a      	str	r2, [r3, #0]
  return result;
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002baa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d102      	bne.n	8002bc6 <HAL_RCC_OscConfig+0xcba>
 8002bc0:	4bb0      	ldr	r3, [pc, #704]	; (8002e84 <HAL_RCC_OscConfig+0xf78>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e027      	b.n	8002c16 <HAL_RCC_OscConfig+0xd0a>
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	fa93 f2a3 	rbit	r2, r3
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	fa93 f2a3 	rbit	r2, r3
 8002c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	4b9c      	ldr	r3, [pc, #624]	; (8002e84 <HAL_RCC_OscConfig+0xf78>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c1a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c22:	6011      	str	r1, [r2, #0]
 8002c24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c28:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	fa92 f1a2 	rbit	r1, r2
 8002c32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c36:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c3a:	6011      	str	r1, [r2, #0]
  return result;
 8002c3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c40:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	fab2 f282 	clz	r2, r2
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f042 0220 	orr.w	r2, r2, #32
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	f002 021f 	and.w	r2, r2, #31
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d182      	bne.n	8002b68 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c62:	4b88      	ldr	r3, [pc, #544]	; (8002e84 <HAL_RCC_OscConfig+0xf78>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	430b      	orrs	r3, r1
 8002c84:	497f      	ldr	r1, [pc, #508]	; (8002e84 <HAL_RCC_OscConfig+0xf78>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	fa93 f2a3 	rbit	r2, r3
 8002ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002caa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cae:	601a      	str	r2, [r3, #0]
  return result;
 8002cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cb8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2301      	movs	r3, #1
 8002cce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fd ff7e 	bl	8000bd0 <HAL_GetTick>
 8002cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd8:	e009      	b.n	8002cee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cda:	f7fd ff79 	bl	8000bd0 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e144      	b.n	8002f78 <HAL_RCC_OscConfig+0x106c>
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	fa93 f2a3 	rbit	r2, r3
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d12:	601a      	str	r2, [r3, #0]
  return result;
 8002d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d18:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <HAL_RCC_OscConfig+0xe2c>
 8002d32:	4b54      	ldr	r3, [pc, #336]	; (8002e84 <HAL_RCC_OscConfig+0xf78>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	e027      	b.n	8002d88 <HAL_RCC_OscConfig+0xe7c>
 8002d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	fa93 f2a3 	rbit	r2, r3
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <HAL_RCC_OscConfig+0xf78>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d8c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d94:	6011      	str	r1, [r2, #0]
 8002d96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d9a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	fa92 f1a2 	rbit	r1, r2
 8002da4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002da8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002dac:	6011      	str	r1, [r2, #0]
  return result;
 8002dae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002db2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	fab2 f282 	clz	r2, r2
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	f042 0220 	orr.w	r2, r2, #32
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	f002 021f 	and.w	r2, r2, #31
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d082      	beq.n	8002cda <HAL_RCC_OscConfig+0xdce>
 8002dd4:	e0cf      	b.n	8002f76 <HAL_RCC_OscConfig+0x106a>
 8002dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dda:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002dde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fa93 f2a3 	rbit	r2, r3
 8002df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002dfa:	601a      	str	r2, [r3, #0]
  return result;
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	461a      	mov	r2, r3
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fd fed8 	bl	8000bd0 <HAL_GetTick>
 8002e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e24:	e009      	b.n	8002e3a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e26:	f7fd fed3 	bl	8000bd0 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e09e      	b.n	8002f78 <HAL_RCC_OscConfig+0x106c>
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	fa93 f2a3 	rbit	r2, r3
 8002e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e5e:	601a      	str	r2, [r3, #0]
  return result;
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d104      	bne.n	8002e88 <HAL_RCC_OscConfig+0xf7c>
 8002e7e:	4b01      	ldr	r3, [pc, #4]	; (8002e84 <HAL_RCC_OscConfig+0xf78>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	e029      	b.n	8002ed8 <HAL_RCC_OscConfig+0xfcc>
 8002e84:	40021000 	.word	0x40021000
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	fa93 f2a3 	rbit	r2, r3
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	fa93 f2a3 	rbit	r2, r3
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <HAL_RCC_OscConfig+0x1078>)
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002edc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ee0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ee4:	6011      	str	r1, [r2, #0]
 8002ee6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	fa92 f1a2 	rbit	r1, r2
 8002ef4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ef8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002efc:	6011      	str	r1, [r2, #0]
  return result;
 8002efe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f02:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	f042 0220 	orr.w	r2, r2, #32
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f002 021f 	and.w	r2, r2, #31
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d180      	bne.n	8002e26 <HAL_RCC_OscConfig+0xf1a>
 8002f24:	e027      	b.n	8002f76 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e01e      	b.n	8002f78 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f3a:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_RCC_OscConfig+0x1078>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f46:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10b      	bne.n	8002f72 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002f5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000

08002f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b09e      	sub	sp, #120	; 0x78
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e162      	b.n	8003266 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b90      	ldr	r3, [pc, #576]	; (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d910      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b8d      	ldr	r3, [pc, #564]	; (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 0207 	bic.w	r2, r3, #7
 8002fb6:	498b      	ldr	r1, [pc, #556]	; (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b89      	ldr	r3, [pc, #548]	; (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e14a      	b.n	8003266 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fdc:	4b82      	ldr	r3, [pc, #520]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	497f      	ldr	r1, [pc, #508]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80dc 	beq.w	80031b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d13c      	bne.n	800307e <HAL_RCC_ClockConfig+0xf6>
 8003004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003008:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	b2db      	uxtb	r3, r3
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d102      	bne.n	800302e <HAL_RCC_ClockConfig+0xa6>
 8003028:	4b6f      	ldr	r3, [pc, #444]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	e00f      	b.n	800304e <HAL_RCC_ClockConfig+0xc6>
 800302e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003032:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	667b      	str	r3, [r7, #100]	; 0x64
 800303c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003040:	663b      	str	r3, [r7, #96]	; 0x60
 8003042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800304a:	4b67      	ldr	r3, [pc, #412]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003052:	65ba      	str	r2, [r7, #88]	; 0x58
 8003054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003056:	fa92 f2a2 	rbit	r2, r2
 800305a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800305c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800305e:	fab2 f282 	clz	r2, r2
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	f042 0220 	orr.w	r2, r2, #32
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	f002 021f 	and.w	r2, r2, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f202 	lsl.w	r2, r1, r2
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d17b      	bne.n	8003172 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0f3      	b.n	8003266 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d13c      	bne.n	8003100 <HAL_RCC_ClockConfig+0x178>
 8003086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800308a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x128>
 80030aa:	4b4f      	ldr	r3, [pc, #316]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	e00f      	b.n	80030d0 <HAL_RCC_ClockConfig+0x148>
 80030b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	647b      	str	r3, [r7, #68]	; 0x44
 80030be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030c2:	643b      	str	r3, [r7, #64]	; 0x40
 80030c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030cc:	4b46      	ldr	r3, [pc, #280]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80030d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030d8:	fa92 f2a2 	rbit	r2, r2
 80030dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80030de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030e0:	fab2 f282 	clz	r2, r2
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f042 0220 	orr.w	r2, r2, #32
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	f002 021f 	and.w	r2, r2, #31
 80030f0:	2101      	movs	r1, #1
 80030f2:	fa01 f202 	lsl.w	r2, r1, r2
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d13a      	bne.n	8003172 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0b2      	b.n	8003266 <HAL_RCC_ClockConfig+0x2de>
 8003100:	2302      	movs	r3, #2
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d102      	bne.n	8003128 <HAL_RCC_ClockConfig+0x1a0>
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	e00d      	b.n	8003144 <HAL_RCC_ClockConfig+0x1bc>
 8003128:	2302      	movs	r3, #2
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
 8003134:	2302      	movs	r3, #2
 8003136:	623b      	str	r3, [r7, #32]
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	61fb      	str	r3, [r7, #28]
 8003140:	4b29      	ldr	r3, [pc, #164]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	2202      	movs	r2, #2
 8003146:	61ba      	str	r2, [r7, #24]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	fa92 f2a2 	rbit	r2, r2
 800314e:	617a      	str	r2, [r7, #20]
  return result;
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	fab2 f282 	clz	r2, r2
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f042 0220 	orr.w	r2, r2, #32
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f002 021f 	and.w	r2, r2, #31
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e079      	b.n	8003266 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f023 0203 	bic.w	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	491a      	ldr	r1, [pc, #104]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003184:	f7fd fd24 	bl	8000bd0 <HAL_GetTick>
 8003188:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318c:	f7fd fd20 	bl	8000bd0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e061      	b.n	8003266 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 020c 	and.w	r2, r3, #12
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d1eb      	bne.n	800318c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d214      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 0207 	bic.w	r2, r3, #7
 80031ca:	4906      	ldr	r1, [pc, #24]	; (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e040      	b.n	8003266 <HAL_RCC_ClockConfig+0x2de>
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_RCC_ClockConfig+0x2e8>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	491a      	ldr	r1, [pc, #104]	; (8003270 <HAL_RCC_ClockConfig+0x2e8>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <HAL_RCC_ClockConfig+0x2e8>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4912      	ldr	r1, [pc, #72]	; (8003270 <HAL_RCC_ClockConfig+0x2e8>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800322a:	f000 f829 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800322e:	4601      	mov	r1, r0
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <HAL_RCC_ClockConfig+0x2e8>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003238:	22f0      	movs	r2, #240	; 0xf0
 800323a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	fa92 f2a2 	rbit	r2, r2
 8003242:	60fa      	str	r2, [r7, #12]
  return result;
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	fab2 f282 	clz	r2, r2
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	40d3      	lsrs	r3, r2
 800324e:	4a09      	ldr	r2, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x2ec>)
 8003250:	5cd3      	ldrb	r3, [r2, r3]
 8003252:	fa21 f303 	lsr.w	r3, r1, r3
 8003256:	4a08      	ldr	r2, [pc, #32]	; (8003278 <HAL_RCC_ClockConfig+0x2f0>)
 8003258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <HAL_RCC_ClockConfig+0x2f4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fc72 	bl	8000b48 <HAL_InitTick>
  
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3778      	adds	r7, #120	; 0x78
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	08004e4c 	.word	0x08004e4c
 8003278:	20000004 	.word	0x20000004
 800327c:	20000008 	.word	0x20000008

08003280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	b480      	push	{r7}
 8003282:	b08b      	sub	sp, #44	; 0x2c
 8003284:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	2300      	movs	r3, #0
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	2300      	movs	r3, #0
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800329a:	4b29      	ldr	r3, [pc, #164]	; (8003340 <HAL_RCC_GetSysClockFreq+0xc0>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d002      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x30>
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_GetSysClockFreq+0x36>
 80032ae:	e03c      	b.n	800332a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032b0:	4b24      	ldr	r3, [pc, #144]	; (8003344 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032b2:	623b      	str	r3, [r7, #32]
      break;
 80032b4:	e03c      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80032c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	fa92 f2a2 	rbit	r2, r2
 80032c8:	607a      	str	r2, [r7, #4]
  return result;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	fab2 f282 	clz	r2, r2
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	40d3      	lsrs	r3, r2
 80032d4:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80032da:	4b19      	ldr	r3, [pc, #100]	; (8003340 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	220f      	movs	r2, #15
 80032e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	fa92 f2a2 	rbit	r2, r2
 80032ec:	60fa      	str	r2, [r7, #12]
  return result;
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	fab2 f282 	clz	r2, r2
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	40d3      	lsrs	r3, r2
 80032f8:	4a14      	ldr	r2, [pc, #80]	; (800334c <HAL_RCC_GetSysClockFreq+0xcc>)
 80032fa:	5cd3      	ldrb	r3, [r2, r3]
 80032fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003308:	4a0e      	ldr	r2, [pc, #56]	; (8003344 <HAL_RCC_GetSysClockFreq+0xc4>)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
 8003318:	e004      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	4a0c      	ldr	r2, [pc, #48]	; (8003350 <HAL_RCC_GetSysClockFreq+0xd0>)
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	623b      	str	r3, [r7, #32]
      break;
 8003328:	e002      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_RCC_GetSysClockFreq+0xc4>)
 800332c:	623b      	str	r3, [r7, #32]
      break;
 800332e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003330:	6a3b      	ldr	r3, [r7, #32]
}
 8003332:	4618      	mov	r0, r3
 8003334:	372c      	adds	r7, #44	; 0x2c
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000
 8003344:	007a1200 	.word	0x007a1200
 8003348:	08004e64 	.word	0x08004e64
 800334c:	08004e74 	.word	0x08004e74
 8003350:	003d0900 	.word	0x003d0900

08003354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_RCC_GetHCLKFreq+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000004 	.word	0x20000004

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003372:	f7ff ffef 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003376:	4601      	mov	r1, r0
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003380:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003384:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	fa92 f2a2 	rbit	r2, r2
 800338c:	603a      	str	r2, [r7, #0]
  return result;
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	fab2 f282 	clz	r2, r2
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	40d3      	lsrs	r3, r2
 8003398:	4a04      	ldr	r2, [pc, #16]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800339a:	5cd3      	ldrb	r3, [r2, r3]
 800339c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000
 80033ac:	08004e5c 	.word	0x08004e5c

080033b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80033b6:	f7ff ffcd 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 80033ba:	4601      	mov	r1, r0
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80033c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80033c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	fa92 f2a2 	rbit	r2, r2
 80033d0:	603a      	str	r2, [r7, #0]
  return result;
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	fab2 f282 	clz	r2, r2
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	40d3      	lsrs	r3, r2
 80033dc:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80033de:	5cd3      	ldrb	r3, [r2, r3]
 80033e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000
 80033f0:	08004e5c 	.word	0x08004e5c

080033f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b092      	sub	sp, #72	; 0x48
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003404:	2300      	movs	r3, #0
 8003406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80d4 	beq.w	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003418:	4b4e      	ldr	r3, [pc, #312]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10e      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003424:	4b4b      	ldr	r3, [pc, #300]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	4a4a      	ldr	r2, [pc, #296]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342e:	61d3      	str	r3, [r2, #28]
 8003430:	4b48      	ldr	r3, [pc, #288]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	4b45      	ldr	r3, [pc, #276]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d118      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344e:	4b42      	ldr	r3, [pc, #264]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a41      	ldr	r2, [pc, #260]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003458:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345a:	f7fd fbb9 	bl	8000bd0 <HAL_GetTick>
 800345e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	e008      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7fd fbb5 	bl	8000bd0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b64      	cmp	r3, #100	; 0x64
 800346e:	d901      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e14b      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003480:	4b34      	ldr	r3, [pc, #208]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003488:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800348a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8084 	beq.w	800359a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800349c:	429a      	cmp	r2, r3
 800349e:	d07c      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034a0:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b26      	ldr	r3, [pc, #152]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	461a      	mov	r2, r3
 80034ca:	2301      	movs	r3, #1
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	461a      	mov	r2, r3
 80034ee:	2300      	movs	r3, #0
 80034f0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034f2:	4a18      	ldr	r2, [pc, #96]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d04b      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003502:	f7fd fb65 	bl	8000bd0 <HAL_GetTick>
 8003506:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fd fb61 	bl	8000bd0 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	; 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0f5      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003520:	2302      	movs	r3, #2
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
 800352c:	2302      	movs	r3, #2
 800352e:	623b      	str	r3, [r7, #32]
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	61fb      	str	r3, [r7, #28]
  return result;
 8003538:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f043 0302 	orr.w	r3, r3, #2
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d108      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800354e:	4b01      	ldr	r3, [pc, #4]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	e00d      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003554:	40021000 	.word	0x40021000
 8003558:	40007000 	.word	0x40007000
 800355c:	10908100 	.word	0x10908100
 8003560:	2302      	movs	r3, #2
 8003562:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	4b69      	ldr	r3, [pc, #420]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	2202      	movs	r2, #2
 8003572:	613a      	str	r2, [r7, #16]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	fa92 f2a2 	rbit	r2, r2
 800357a:	60fa      	str	r2, [r7, #12]
  return result;
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	fab2 f282 	clz	r2, r2
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	f002 021f 	and.w	r2, r2, #31
 800358e:	2101      	movs	r1, #1
 8003590:	fa01 f202 	lsl.w	r2, r1, r2
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0b7      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800359a:	4b5e      	ldr	r3, [pc, #376]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	495b      	ldr	r1, [pc, #364]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b4:	4b57      	ldr	r3, [pc, #348]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	4a56      	ldr	r2, [pc, #344]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035cc:	4b51      	ldr	r3, [pc, #324]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	f023 0203 	bic.w	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	494e      	ldr	r1, [pc, #312]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ea:	4b4a      	ldr	r3, [pc, #296]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f023 0210 	bic.w	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	4947      	ldr	r1, [pc, #284]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003608:	4b42      	ldr	r3, [pc, #264]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	493f      	ldr	r1, [pc, #252]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003616:	4313      	orrs	r3, r2
 8003618:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003626:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f023 0220 	bic.w	r2, r3, #32
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	4938      	ldr	r1, [pc, #224]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003634:	4313      	orrs	r3, r2
 8003636:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003644:	4b33      	ldr	r3, [pc, #204]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	4930      	ldr	r1, [pc, #192]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003652:	4313      	orrs	r3, r2
 8003654:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003662:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	4929      	ldr	r1, [pc, #164]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003680:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	4921      	ldr	r1, [pc, #132]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800368e:	4313      	orrs	r3, r2
 8003690:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	491a      	ldr	r1, [pc, #104]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80036bc:	4b15      	ldr	r3, [pc, #84]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	4912      	ldr	r1, [pc, #72]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80036da:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	490b      	ldr	r1, [pc, #44]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	4903      	ldr	r1, [pc, #12]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003706:	4313      	orrs	r3, r2
 8003708:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3748      	adds	r7, #72	; 0x48
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000

08003718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e049      	b.n	80037be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fd f8b8 	bl	80008b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f000 fb5a 	bl	8003e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e049      	b.n	800386c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d106      	bne.n	80037f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f841 	bl	8003874 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f000 fb03 	bl	8003e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d109      	bne.n	80038ac <HAL_TIM_PWM_Start+0x24>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e03c      	b.n	8003926 <HAL_TIM_PWM_Start+0x9e>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d109      	bne.n	80038c6 <HAL_TIM_PWM_Start+0x3e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	bf14      	ite	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	2300      	moveq	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	e02f      	b.n	8003926 <HAL_TIM_PWM_Start+0x9e>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d109      	bne.n	80038e0 <HAL_TIM_PWM_Start+0x58>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	bf14      	ite	ne
 80038d8:	2301      	movne	r3, #1
 80038da:	2300      	moveq	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e022      	b.n	8003926 <HAL_TIM_PWM_Start+0x9e>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d109      	bne.n	80038fa <HAL_TIM_PWM_Start+0x72>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	bf14      	ite	ne
 80038f2:	2301      	movne	r3, #1
 80038f4:	2300      	moveq	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	e015      	b.n	8003926 <HAL_TIM_PWM_Start+0x9e>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d109      	bne.n	8003914 <HAL_TIM_PWM_Start+0x8c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e008      	b.n	8003926 <HAL_TIM_PWM_Start+0x9e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e083      	b.n	8003a36 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d104      	bne.n	800393e <HAL_TIM_PWM_Start+0xb6>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800393c:	e023      	b.n	8003986 <HAL_TIM_PWM_Start+0xfe>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b04      	cmp	r3, #4
 8003942:	d104      	bne.n	800394e <HAL_TIM_PWM_Start+0xc6>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800394c:	e01b      	b.n	8003986 <HAL_TIM_PWM_Start+0xfe>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d104      	bne.n	800395e <HAL_TIM_PWM_Start+0xd6>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800395c:	e013      	b.n	8003986 <HAL_TIM_PWM_Start+0xfe>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b0c      	cmp	r3, #12
 8003962:	d104      	bne.n	800396e <HAL_TIM_PWM_Start+0xe6>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800396c:	e00b      	b.n	8003986 <HAL_TIM_PWM_Start+0xfe>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b10      	cmp	r3, #16
 8003972:	d104      	bne.n	800397e <HAL_TIM_PWM_Start+0xf6>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800397c:	e003      	b.n	8003986 <HAL_TIM_PWM_Start+0xfe>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2201      	movs	r2, #1
 800398c:	6839      	ldr	r1, [r7, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fdec 	bl	800456c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a29      	ldr	r2, [pc, #164]	; (8003a40 <HAL_TIM_PWM_Start+0x1b8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00e      	beq.n	80039bc <HAL_TIM_PWM_Start+0x134>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <HAL_TIM_PWM_Start+0x1bc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d009      	beq.n	80039bc <HAL_TIM_PWM_Start+0x134>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a26      	ldr	r2, [pc, #152]	; (8003a48 <HAL_TIM_PWM_Start+0x1c0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_TIM_PWM_Start+0x134>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a25      	ldr	r2, [pc, #148]	; (8003a4c <HAL_TIM_PWM_Start+0x1c4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <HAL_TIM_PWM_Start+0x138>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_TIM_PWM_Start+0x13a>
 80039c0:	2300      	movs	r3, #0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a19      	ldr	r2, [pc, #100]	; (8003a40 <HAL_TIM_PWM_Start+0x1b8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d009      	beq.n	80039f4 <HAL_TIM_PWM_Start+0x16c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d004      	beq.n	80039f4 <HAL_TIM_PWM_Start+0x16c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_TIM_PWM_Start+0x1bc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d115      	bne.n	8003a20 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <HAL_TIM_PWM_Start+0x1c8>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d015      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x1aa>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d011      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1e:	e008      	b.n	8003a32 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e000      	b.n	8003a34 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40012c00 	.word	0x40012c00
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40014400 	.word	0x40014400
 8003a4c:	40014800 	.word	0x40014800
 8003a50:	00010007 	.word	0x00010007

08003a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e0ff      	b.n	8003c72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b14      	cmp	r3, #20
 8003a7e:	f200 80f0 	bhi.w	8003c62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a82:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003add 	.word	0x08003add
 8003a8c:	08003c63 	.word	0x08003c63
 8003a90:	08003c63 	.word	0x08003c63
 8003a94:	08003c63 	.word	0x08003c63
 8003a98:	08003b1d 	.word	0x08003b1d
 8003a9c:	08003c63 	.word	0x08003c63
 8003aa0:	08003c63 	.word	0x08003c63
 8003aa4:	08003c63 	.word	0x08003c63
 8003aa8:	08003b5f 	.word	0x08003b5f
 8003aac:	08003c63 	.word	0x08003c63
 8003ab0:	08003c63 	.word	0x08003c63
 8003ab4:	08003c63 	.word	0x08003c63
 8003ab8:	08003b9f 	.word	0x08003b9f
 8003abc:	08003c63 	.word	0x08003c63
 8003ac0:	08003c63 	.word	0x08003c63
 8003ac4:	08003c63 	.word	0x08003c63
 8003ac8:	08003be1 	.word	0x08003be1
 8003acc:	08003c63 	.word	0x08003c63
 8003ad0:	08003c63 	.word	0x08003c63
 8003ad4:	08003c63 	.word	0x08003c63
 8003ad8:	08003c21 	.word	0x08003c21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fa02 	bl	8003eec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0208 	orr.w	r2, r2, #8
 8003af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0204 	bic.w	r2, r2, #4
 8003b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6999      	ldr	r1, [r3, #24]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	619a      	str	r2, [r3, #24]
      break;
 8003b1a:	e0a5      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fa68 	bl	8003ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6999      	ldr	r1, [r3, #24]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	021a      	lsls	r2, r3, #8
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	619a      	str	r2, [r3, #24]
      break;
 8003b5c:	e084      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fac7 	bl	80040f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0208 	orr.w	r2, r2, #8
 8003b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0204 	bic.w	r2, r2, #4
 8003b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69d9      	ldr	r1, [r3, #28]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	61da      	str	r2, [r3, #28]
      break;
 8003b9c:	e064      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fb25 	bl	80041f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69d9      	ldr	r1, [r3, #28]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	021a      	lsls	r2, r3, #8
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	61da      	str	r2, [r3, #28]
      break;
 8003bde:	e043      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fb68 	bl	80042bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0208 	orr.w	r2, r2, #8
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0204 	bic.w	r2, r2, #4
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c1e:	e023      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fba6 	bl	8004378 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	021a      	lsls	r2, r3, #8
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c60:	e002      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
      break;
 8003c66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop

08003c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_TIM_ConfigClockSource+0x1c>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e0b6      	b.n	8003e06 <HAL_TIM_ConfigClockSource+0x18a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd4:	d03e      	beq.n	8003d54 <HAL_TIM_ConfigClockSource+0xd8>
 8003cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cda:	f200 8087 	bhi.w	8003dec <HAL_TIM_ConfigClockSource+0x170>
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce2:	f000 8086 	beq.w	8003df2 <HAL_TIM_ConfigClockSource+0x176>
 8003ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cea:	d87f      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x170>
 8003cec:	2b70      	cmp	r3, #112	; 0x70
 8003cee:	d01a      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0xaa>
 8003cf0:	2b70      	cmp	r3, #112	; 0x70
 8003cf2:	d87b      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x170>
 8003cf4:	2b60      	cmp	r3, #96	; 0x60
 8003cf6:	d050      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x11e>
 8003cf8:	2b60      	cmp	r3, #96	; 0x60
 8003cfa:	d877      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x170>
 8003cfc:	2b50      	cmp	r3, #80	; 0x50
 8003cfe:	d03c      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0xfe>
 8003d00:	2b50      	cmp	r3, #80	; 0x50
 8003d02:	d873      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x170>
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d058      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x13e>
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d86f      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x170>
 8003d0c:	2b30      	cmp	r3, #48	; 0x30
 8003d0e:	d064      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x15e>
 8003d10:	2b30      	cmp	r3, #48	; 0x30
 8003d12:	d86b      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x170>
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d060      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x15e>
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d867      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x170>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d05c      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x15e>
 8003d20:	2b10      	cmp	r3, #16
 8003d22:	d05a      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x15e>
 8003d24:	e062      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6899      	ldr	r1, [r3, #8]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f000 fbf9 	bl	800452c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	609a      	str	r2, [r3, #8]
      break;
 8003d52:	e04f      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6899      	ldr	r1, [r3, #8]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f000 fbe2 	bl	800452c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d76:	609a      	str	r2, [r3, #8]
      break;
 8003d78:	e03c      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6859      	ldr	r1, [r3, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	461a      	mov	r2, r3
 8003d88:	f000 fb56 	bl	8004438 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2150      	movs	r1, #80	; 0x50
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fbaf 	bl	80044f6 <TIM_ITRx_SetConfig>
      break;
 8003d98:	e02c      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	461a      	mov	r2, r3
 8003da8:	f000 fb75 	bl	8004496 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2160      	movs	r1, #96	; 0x60
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fb9f 	bl	80044f6 <TIM_ITRx_SetConfig>
      break;
 8003db8:	e01c      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f000 fb36 	bl	8004438 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2140      	movs	r1, #64	; 0x40
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fb8f 	bl	80044f6 <TIM_ITRx_SetConfig>
      break;
 8003dd8:	e00c      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4619      	mov	r1, r3
 8003de4:	4610      	mov	r0, r2
 8003de6:	f000 fb86 	bl	80044f6 <TIM_ITRx_SetConfig>
      break;
 8003dea:	e003      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
      break;
 8003df0:	e000      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a2e      	ldr	r2, [pc, #184]	; (8003edc <TIM_Base_SetConfig+0xcc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d003      	beq.n	8003e30 <TIM_Base_SetConfig+0x20>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2e:	d108      	bne.n	8003e42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a25      	ldr	r2, [pc, #148]	; (8003edc <TIM_Base_SetConfig+0xcc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00f      	beq.n	8003e6a <TIM_Base_SetConfig+0x5a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e50:	d00b      	beq.n	8003e6a <TIM_Base_SetConfig+0x5a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a22      	ldr	r2, [pc, #136]	; (8003ee0 <TIM_Base_SetConfig+0xd0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <TIM_Base_SetConfig+0x5a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a21      	ldr	r2, [pc, #132]	; (8003ee4 <TIM_Base_SetConfig+0xd4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_Base_SetConfig+0x5a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a20      	ldr	r2, [pc, #128]	; (8003ee8 <TIM_Base_SetConfig+0xd8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d108      	bne.n	8003e7c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a0e      	ldr	r2, [pc, #56]	; (8003edc <TIM_Base_SetConfig+0xcc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00b      	beq.n	8003ec0 <TIM_Base_SetConfig+0xb0>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a0d      	ldr	r2, [pc, #52]	; (8003ee0 <TIM_Base_SetConfig+0xd0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d007      	beq.n	8003ec0 <TIM_Base_SetConfig+0xb0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <TIM_Base_SetConfig+0xd4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_Base_SetConfig+0xb0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <TIM_Base_SetConfig+0xd8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d103      	bne.n	8003ec8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	615a      	str	r2, [r3, #20]
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	40014400 	.word	0x40014400
 8003ee8:	40014800 	.word	0x40014800

08003eec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f023 0201 	bic.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0303 	bic.w	r3, r3, #3
 8003f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f023 0302 	bic.w	r3, r3, #2
 8003f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a28      	ldr	r2, [pc, #160]	; (8003fe8 <TIM_OC1_SetConfig+0xfc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00b      	beq.n	8003f64 <TIM_OC1_SetConfig+0x78>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a27      	ldr	r2, [pc, #156]	; (8003fec <TIM_OC1_SetConfig+0x100>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <TIM_OC1_SetConfig+0x78>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a26      	ldr	r2, [pc, #152]	; (8003ff0 <TIM_OC1_SetConfig+0x104>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_OC1_SetConfig+0x78>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a25      	ldr	r2, [pc, #148]	; (8003ff4 <TIM_OC1_SetConfig+0x108>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d10c      	bne.n	8003f7e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f023 0308 	bic.w	r3, r3, #8
 8003f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f023 0304 	bic.w	r3, r3, #4
 8003f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <TIM_OC1_SetConfig+0xfc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00b      	beq.n	8003f9e <TIM_OC1_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a18      	ldr	r2, [pc, #96]	; (8003fec <TIM_OC1_SetConfig+0x100>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <TIM_OC1_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <TIM_OC1_SetConfig+0x104>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <TIM_OC1_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a16      	ldr	r2, [pc, #88]	; (8003ff4 <TIM_OC1_SetConfig+0x108>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d111      	bne.n	8003fc2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	621a      	str	r2, [r3, #32]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40012c00 	.word	0x40012c00
 8003fec:	40014000 	.word	0x40014000
 8003ff0:	40014400 	.word	0x40014400
 8003ff4:	40014800 	.word	0x40014800

08003ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	f023 0210 	bic.w	r2, r3, #16
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0320 	bic.w	r3, r3, #32
 8004046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a24      	ldr	r2, [pc, #144]	; (80040e8 <TIM_OC2_SetConfig+0xf0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d10d      	bne.n	8004078 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004076:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a1b      	ldr	r2, [pc, #108]	; (80040e8 <TIM_OC2_SetConfig+0xf0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00b      	beq.n	8004098 <TIM_OC2_SetConfig+0xa0>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a1a      	ldr	r2, [pc, #104]	; (80040ec <TIM_OC2_SetConfig+0xf4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d007      	beq.n	8004098 <TIM_OC2_SetConfig+0xa0>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a19      	ldr	r2, [pc, #100]	; (80040f0 <TIM_OC2_SetConfig+0xf8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC2_SetConfig+0xa0>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <TIM_OC2_SetConfig+0xfc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d113      	bne.n	80040c0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800409e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040a6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40014000 	.word	0x40014000
 80040f0:	40014400 	.word	0x40014400
 80040f4:	40014800 	.word	0x40014800

080040f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a23      	ldr	r2, [pc, #140]	; (80041e4 <TIM_OC3_SetConfig+0xec>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10d      	bne.n	8004176 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004174:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <TIM_OC3_SetConfig+0xec>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_OC3_SetConfig+0x9e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <TIM_OC3_SetConfig+0xf0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_OC3_SetConfig+0x9e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a18      	ldr	r2, [pc, #96]	; (80041ec <TIM_OC3_SetConfig+0xf4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_OC3_SetConfig+0x9e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a17      	ldr	r2, [pc, #92]	; (80041f0 <TIM_OC3_SetConfig+0xf8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d113      	bne.n	80041be <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800419c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	621a      	str	r2, [r3, #32]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800

080041f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	031b      	lsls	r3, r3, #12
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a16      	ldr	r2, [pc, #88]	; (80042ac <TIM_OC4_SetConfig+0xb8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00b      	beq.n	8004270 <TIM_OC4_SetConfig+0x7c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <TIM_OC4_SetConfig+0xbc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <TIM_OC4_SetConfig+0x7c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a14      	ldr	r2, [pc, #80]	; (80042b4 <TIM_OC4_SetConfig+0xc0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_OC4_SetConfig+0x7c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <TIM_OC4_SetConfig+0xc4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d109      	bne.n	8004284 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004276:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	019b      	lsls	r3, r3, #6
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40012c00 	.word	0x40012c00
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40014400 	.word	0x40014400
 80042b8:	40014800 	.word	0x40014800

080042bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004300:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a15      	ldr	r2, [pc, #84]	; (8004368 <TIM_OC5_SetConfig+0xac>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00b      	beq.n	800432e <TIM_OC5_SetConfig+0x72>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a14      	ldr	r2, [pc, #80]	; (800436c <TIM_OC5_SetConfig+0xb0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d007      	beq.n	800432e <TIM_OC5_SetConfig+0x72>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a13      	ldr	r2, [pc, #76]	; (8004370 <TIM_OC5_SetConfig+0xb4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_OC5_SetConfig+0x72>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a12      	ldr	r2, [pc, #72]	; (8004374 <TIM_OC5_SetConfig+0xb8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d109      	bne.n	8004342 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004334:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	621a      	str	r2, [r3, #32]
}
 800435c:	bf00      	nop
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40014000 	.word	0x40014000
 8004370:	40014400 	.word	0x40014400
 8004374:	40014800 	.word	0x40014800

08004378 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	051b      	lsls	r3, r3, #20
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a16      	ldr	r2, [pc, #88]	; (8004428 <TIM_OC6_SetConfig+0xb0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00b      	beq.n	80043ec <TIM_OC6_SetConfig+0x74>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a15      	ldr	r2, [pc, #84]	; (800442c <TIM_OC6_SetConfig+0xb4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <TIM_OC6_SetConfig+0x74>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a14      	ldr	r2, [pc, #80]	; (8004430 <TIM_OC6_SetConfig+0xb8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_OC6_SetConfig+0x74>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a13      	ldr	r2, [pc, #76]	; (8004434 <TIM_OC6_SetConfig+0xbc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d109      	bne.n	8004400 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	029b      	lsls	r3, r3, #10
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40014000 	.word	0x40014000
 8004430:	40014400 	.word	0x40014400
 8004434:	40014800 	.word	0x40014800

08004438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f023 0201 	bic.w	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f023 030a 	bic.w	r3, r3, #10
 8004474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004496:	b480      	push	{r7}
 8004498:	b087      	sub	sp, #28
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f023 0210 	bic.w	r2, r3, #16
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	031b      	lsls	r3, r3, #12
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	f043 0307 	orr.w	r3, r3, #7
 8004518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	021a      	lsls	r2, r3, #8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	431a      	orrs	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4313      	orrs	r3, r2
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	609a      	str	r2, [r3, #8]
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	2201      	movs	r2, #1
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1a      	ldr	r2, [r3, #32]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	43db      	mvns	r3, r3
 800458e:	401a      	ands	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	fa01 f303 	lsl.w	r3, r1, r3
 80045a4:	431a      	orrs	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e04f      	b.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a21      	ldr	r2, [pc, #132]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d108      	bne.n	800460c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004600:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a14      	ldr	r2, [pc, #80]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d009      	beq.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004638:	d004      	beq.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a10      	ldr	r2, [pc, #64]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d10c      	bne.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	4313      	orrs	r3, r2
 8004654:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40014000 	.word	0x40014000

08004684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800469c:	2302      	movs	r3, #2
 800469e:	e060      	b.n	8004762 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	041b      	lsls	r3, r3, #16
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a14      	ldr	r2, [pc, #80]	; (8004770 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d115      	bne.n	8004750 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	051b      	lsls	r3, r3, #20
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40012c00 	.word	0x40012c00

08004774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e040      	b.n	8004808 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc f90e 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2224      	movs	r2, #36	; 0x24
 80047a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f82c 	bl	8004810 <UART_SetConfig>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e022      	b.n	8004808 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f956 	bl	8004a7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f9dd 	bl	8004bc0 <UART_CheckIdleState>
 8004806:	4603      	mov	r3, r0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b8a      	ldr	r3, [pc, #552]	; (8004a64 <UART_SetConfig+0x254>)
 800483c:	4013      	ands	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	6979      	ldr	r1, [r7, #20]
 8004844:	430b      	orrs	r3, r1
 8004846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	430a      	orrs	r2, r1
 8004880:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a78      	ldr	r2, [pc, #480]	; (8004a68 <UART_SetConfig+0x258>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d120      	bne.n	80048ce <UART_SetConfig+0xbe>
 800488c:	4b77      	ldr	r3, [pc, #476]	; (8004a6c <UART_SetConfig+0x25c>)
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	2b03      	cmp	r3, #3
 8004896:	d817      	bhi.n	80048c8 <UART_SetConfig+0xb8>
 8004898:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <UART_SetConfig+0x90>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048b1 	.word	0x080048b1
 80048a4:	080048bd 	.word	0x080048bd
 80048a8:	080048c3 	.word	0x080048c3
 80048ac:	080048b7 	.word	0x080048b7
 80048b0:	2300      	movs	r3, #0
 80048b2:	77fb      	strb	r3, [r7, #31]
 80048b4:	e01d      	b.n	80048f2 <UART_SetConfig+0xe2>
 80048b6:	2302      	movs	r3, #2
 80048b8:	77fb      	strb	r3, [r7, #31]
 80048ba:	e01a      	b.n	80048f2 <UART_SetConfig+0xe2>
 80048bc:	2304      	movs	r3, #4
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e017      	b.n	80048f2 <UART_SetConfig+0xe2>
 80048c2:	2308      	movs	r3, #8
 80048c4:	77fb      	strb	r3, [r7, #31]
 80048c6:	e014      	b.n	80048f2 <UART_SetConfig+0xe2>
 80048c8:	2310      	movs	r3, #16
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e011      	b.n	80048f2 <UART_SetConfig+0xe2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a67      	ldr	r2, [pc, #412]	; (8004a70 <UART_SetConfig+0x260>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d102      	bne.n	80048de <UART_SetConfig+0xce>
 80048d8:	2300      	movs	r3, #0
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e009      	b.n	80048f2 <UART_SetConfig+0xe2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a64      	ldr	r2, [pc, #400]	; (8004a74 <UART_SetConfig+0x264>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d102      	bne.n	80048ee <UART_SetConfig+0xde>
 80048e8:	2300      	movs	r3, #0
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e001      	b.n	80048f2 <UART_SetConfig+0xe2>
 80048ee:	2310      	movs	r3, #16
 80048f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fa:	d15b      	bne.n	80049b4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80048fc:	7ffb      	ldrb	r3, [r7, #31]
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d827      	bhi.n	8004952 <UART_SetConfig+0x142>
 8004902:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0xf8>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	0800492d 	.word	0x0800492d
 800490c:	08004935 	.word	0x08004935
 8004910:	0800493d 	.word	0x0800493d
 8004914:	08004953 	.word	0x08004953
 8004918:	08004943 	.word	0x08004943
 800491c:	08004953 	.word	0x08004953
 8004920:	08004953 	.word	0x08004953
 8004924:	08004953 	.word	0x08004953
 8004928:	0800494b 	.word	0x0800494b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800492c:	f7fe fd1e 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8004930:	61b8      	str	r0, [r7, #24]
        break;
 8004932:	e013      	b.n	800495c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004934:	f7fe fd3c 	bl	80033b0 <HAL_RCC_GetPCLK2Freq>
 8004938:	61b8      	str	r0, [r7, #24]
        break;
 800493a:	e00f      	b.n	800495c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800493c:	4b4e      	ldr	r3, [pc, #312]	; (8004a78 <UART_SetConfig+0x268>)
 800493e:	61bb      	str	r3, [r7, #24]
        break;
 8004940:	e00c      	b.n	800495c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004942:	f7fe fc9d 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 8004946:	61b8      	str	r0, [r7, #24]
        break;
 8004948:	e008      	b.n	800495c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494e:	61bb      	str	r3, [r7, #24]
        break;
 8004950:	e004      	b.n	800495c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	77bb      	strb	r3, [r7, #30]
        break;
 800495a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d074      	beq.n	8004a4c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	005a      	lsls	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	441a      	add	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	fbb2 f3f3 	udiv	r3, r2, r3
 8004976:	b29b      	uxth	r3, r3
 8004978:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b0f      	cmp	r3, #15
 800497e:	d916      	bls.n	80049ae <UART_SetConfig+0x19e>
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004986:	d212      	bcs.n	80049ae <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	b29b      	uxth	r3, r3
 800498c:	f023 030f 	bic.w	r3, r3, #15
 8004990:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	b29b      	uxth	r3, r3
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	b29a      	uxth	r2, r3
 800499e:	89fb      	ldrh	r3, [r7, #14]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	89fa      	ldrh	r2, [r7, #14]
 80049aa:	60da      	str	r2, [r3, #12]
 80049ac:	e04e      	b.n	8004a4c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	77bb      	strb	r3, [r7, #30]
 80049b2:	e04b      	b.n	8004a4c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049b4:	7ffb      	ldrb	r3, [r7, #31]
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d827      	bhi.n	8004a0a <UART_SetConfig+0x1fa>
 80049ba:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <UART_SetConfig+0x1b0>)
 80049bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c0:	080049e5 	.word	0x080049e5
 80049c4:	080049ed 	.word	0x080049ed
 80049c8:	080049f5 	.word	0x080049f5
 80049cc:	08004a0b 	.word	0x08004a0b
 80049d0:	080049fb 	.word	0x080049fb
 80049d4:	08004a0b 	.word	0x08004a0b
 80049d8:	08004a0b 	.word	0x08004a0b
 80049dc:	08004a0b 	.word	0x08004a0b
 80049e0:	08004a03 	.word	0x08004a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e4:	f7fe fcc2 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 80049e8:	61b8      	str	r0, [r7, #24]
        break;
 80049ea:	e013      	b.n	8004a14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049ec:	f7fe fce0 	bl	80033b0 <HAL_RCC_GetPCLK2Freq>
 80049f0:	61b8      	str	r0, [r7, #24]
        break;
 80049f2:	e00f      	b.n	8004a14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f4:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <UART_SetConfig+0x268>)
 80049f6:	61bb      	str	r3, [r7, #24]
        break;
 80049f8:	e00c      	b.n	8004a14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049fa:	f7fe fc41 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 80049fe:	61b8      	str	r0, [r7, #24]
        break;
 8004a00:	e008      	b.n	8004a14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a06:	61bb      	str	r3, [r7, #24]
        break;
 8004a08:	e004      	b.n	8004a14 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	77bb      	strb	r3, [r7, #30]
        break;
 8004a12:	bf00      	nop
    }

    if (pclk != 0U)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d018      	beq.n	8004a4c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	085a      	lsrs	r2, r3, #1
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	441a      	add	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b0f      	cmp	r3, #15
 8004a34:	d908      	bls.n	8004a48 <UART_SetConfig+0x238>
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3c:	d204      	bcs.n	8004a48 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	e001      	b.n	8004a4c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a58:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	efff69f3 	.word	0xefff69f3
 8004a68:	40013800 	.word	0x40013800
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	40004400 	.word	0x40004400
 8004a74:	40004800 	.word	0x40004800
 8004a78:	007a1200 	.word	0x007a1200

08004a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01a      	beq.n	8004b92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7a:	d10a      	bne.n	8004b92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bd0:	f7fb fffe 	bl	8000bd0 <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d10e      	bne.n	8004c02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f82d 	bl	8004c52 <UART_WaitOnFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e023      	b.n	8004c4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d10e      	bne.n	8004c2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f817 	bl	8004c52 <UART_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e00d      	b.n	8004c4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b09c      	sub	sp, #112	; 0x70
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c62:	e0a5      	b.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c6a:	f000 80a1 	beq.w	8004db0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6e:	f7fb ffaf 	bl	8000bd0 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d13e      	bne.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c98:	667b      	str	r3, [r7, #100]	; 0x64
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ca8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e6      	bne.n	8004c84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3308      	adds	r3, #8
 8004cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc8:	f023 0301 	bic.w	r3, r3, #1
 8004ccc:	663b      	str	r3, [r7, #96]	; 0x60
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e5      	bne.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e067      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d04f      	beq.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1e:	d147      	bne.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	e853 3f00 	ldrex	r3, [r3]
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d48:	637b      	str	r3, [r7, #52]	; 0x34
 8004d4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d50:	e841 2300 	strex	r3, r2, [r1]
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e6      	bne.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3308      	adds	r3, #8
 8004d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f023 0301 	bic.w	r3, r3, #1
 8004d72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d7c:	623a      	str	r2, [r7, #32]
 8004d7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	69f9      	ldr	r1, [r7, #28]
 8004d82:	6a3a      	ldr	r2, [r7, #32]
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e5      	bne.n	8004d5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e010      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	f43f af4a 	beq.w	8004c64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3770      	adds	r7, #112	; 0x70
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <__libc_init_array>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	4d0d      	ldr	r5, [pc, #52]	; (8004e14 <__libc_init_array+0x38>)
 8004de0:	4c0d      	ldr	r4, [pc, #52]	; (8004e18 <__libc_init_array+0x3c>)
 8004de2:	1b64      	subs	r4, r4, r5
 8004de4:	10a4      	asrs	r4, r4, #2
 8004de6:	2600      	movs	r6, #0
 8004de8:	42a6      	cmp	r6, r4
 8004dea:	d109      	bne.n	8004e00 <__libc_init_array+0x24>
 8004dec:	4d0b      	ldr	r5, [pc, #44]	; (8004e1c <__libc_init_array+0x40>)
 8004dee:	4c0c      	ldr	r4, [pc, #48]	; (8004e20 <__libc_init_array+0x44>)
 8004df0:	f000 f820 	bl	8004e34 <_init>
 8004df4:	1b64      	subs	r4, r4, r5
 8004df6:	10a4      	asrs	r4, r4, #2
 8004df8:	2600      	movs	r6, #0
 8004dfa:	42a6      	cmp	r6, r4
 8004dfc:	d105      	bne.n	8004e0a <__libc_init_array+0x2e>
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e04:	4798      	blx	r3
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7ee      	b.n	8004de8 <__libc_init_array+0xc>
 8004e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0e:	4798      	blx	r3
 8004e10:	3601      	adds	r6, #1
 8004e12:	e7f2      	b.n	8004dfa <__libc_init_array+0x1e>
 8004e14:	08004e84 	.word	0x08004e84
 8004e18:	08004e84 	.word	0x08004e84
 8004e1c:	08004e84 	.word	0x08004e84
 8004e20:	08004e88 	.word	0x08004e88

08004e24 <memset>:
 8004e24:	4402      	add	r2, r0
 8004e26:	4603      	mov	r3, r0
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d100      	bne.n	8004e2e <memset+0xa>
 8004e2c:	4770      	bx	lr
 8004e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e32:	e7f9      	b.n	8004e28 <memset+0x4>

08004e34 <_init>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr

08004e40 <_fini>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr
