
SFM3300SensRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047ac  080047ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080047ac  080047ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047ac  080047ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047ac  080047ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000010  080047c0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080047c0  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f48  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000187c  00000000  00000000  00027f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  000297f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  00029fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010e50  00000000  00000000  0002a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3ad  00000000  00000000  0003b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000645cb  00000000  00000000  0004589d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a9e68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc8  00000000  00000000  000a9eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004664 	.word	0x08004664

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004664 	.word	0x08004664

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 fb3d 	bl	80018a8 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 fa5f 	bl	80016f8 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fec6 	bl	8000fd4 <__aeabi_dsub>
 8000248:	f001 fa56 	bl	80016f8 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_fdiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	464f      	mov	r7, r9
 8000260:	4646      	mov	r6, r8
 8000262:	46d6      	mov	lr, sl
 8000264:	0245      	lsls	r5, r0, #9
 8000266:	b5c0      	push	{r6, r7, lr}
 8000268:	0047      	lsls	r7, r0, #1
 800026a:	1c0c      	adds	r4, r1, #0
 800026c:	0a6d      	lsrs	r5, r5, #9
 800026e:	0e3f      	lsrs	r7, r7, #24
 8000270:	0fc6      	lsrs	r6, r0, #31
 8000272:	2f00      	cmp	r7, #0
 8000274:	d100      	bne.n	8000278 <__aeabi_fdiv+0x1c>
 8000276:	e070      	b.n	800035a <__aeabi_fdiv+0xfe>
 8000278:	2fff      	cmp	r7, #255	; 0xff
 800027a:	d100      	bne.n	800027e <__aeabi_fdiv+0x22>
 800027c:	e075      	b.n	800036a <__aeabi_fdiv+0x10e>
 800027e:	00eb      	lsls	r3, r5, #3
 8000280:	2580      	movs	r5, #128	; 0x80
 8000282:	04ed      	lsls	r5, r5, #19
 8000284:	431d      	orrs	r5, r3
 8000286:	2300      	movs	r3, #0
 8000288:	4699      	mov	r9, r3
 800028a:	469a      	mov	sl, r3
 800028c:	3f7f      	subs	r7, #127	; 0x7f
 800028e:	0260      	lsls	r0, r4, #9
 8000290:	0a43      	lsrs	r3, r0, #9
 8000292:	4698      	mov	r8, r3
 8000294:	0063      	lsls	r3, r4, #1
 8000296:	0e1b      	lsrs	r3, r3, #24
 8000298:	0fe4      	lsrs	r4, r4, #31
 800029a:	2b00      	cmp	r3, #0
 800029c:	d04e      	beq.n	800033c <__aeabi_fdiv+0xe0>
 800029e:	2bff      	cmp	r3, #255	; 0xff
 80002a0:	d046      	beq.n	8000330 <__aeabi_fdiv+0xd4>
 80002a2:	4642      	mov	r2, r8
 80002a4:	00d0      	lsls	r0, r2, #3
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	04d2      	lsls	r2, r2, #19
 80002aa:	4302      	orrs	r2, r0
 80002ac:	4690      	mov	r8, r2
 80002ae:	2200      	movs	r2, #0
 80002b0:	3b7f      	subs	r3, #127	; 0x7f
 80002b2:	0031      	movs	r1, r6
 80002b4:	1aff      	subs	r7, r7, r3
 80002b6:	464b      	mov	r3, r9
 80002b8:	4061      	eors	r1, r4
 80002ba:	b2c9      	uxtb	r1, r1
 80002bc:	4313      	orrs	r3, r2
 80002be:	2b0f      	cmp	r3, #15
 80002c0:	d900      	bls.n	80002c4 <__aeabi_fdiv+0x68>
 80002c2:	e0b5      	b.n	8000430 <__aeabi_fdiv+0x1d4>
 80002c4:	486e      	ldr	r0, [pc, #440]	; (8000480 <__aeabi_fdiv+0x224>)
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	58c3      	ldr	r3, [r0, r3]
 80002ca:	469f      	mov	pc, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	4698      	mov	r8, r3
 80002d0:	0026      	movs	r6, r4
 80002d2:	4645      	mov	r5, r8
 80002d4:	4692      	mov	sl, r2
 80002d6:	4653      	mov	r3, sl
 80002d8:	2b02      	cmp	r3, #2
 80002da:	d100      	bne.n	80002de <__aeabi_fdiv+0x82>
 80002dc:	e089      	b.n	80003f2 <__aeabi_fdiv+0x196>
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d100      	bne.n	80002e4 <__aeabi_fdiv+0x88>
 80002e2:	e09e      	b.n	8000422 <__aeabi_fdiv+0x1c6>
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d018      	beq.n	800031a <__aeabi_fdiv+0xbe>
 80002e8:	003b      	movs	r3, r7
 80002ea:	337f      	adds	r3, #127	; 0x7f
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	dd69      	ble.n	80003c4 <__aeabi_fdiv+0x168>
 80002f0:	076a      	lsls	r2, r5, #29
 80002f2:	d004      	beq.n	80002fe <__aeabi_fdiv+0xa2>
 80002f4:	220f      	movs	r2, #15
 80002f6:	402a      	ands	r2, r5
 80002f8:	2a04      	cmp	r2, #4
 80002fa:	d000      	beq.n	80002fe <__aeabi_fdiv+0xa2>
 80002fc:	3504      	adds	r5, #4
 80002fe:	012a      	lsls	r2, r5, #4
 8000300:	d503      	bpl.n	800030a <__aeabi_fdiv+0xae>
 8000302:	4b60      	ldr	r3, [pc, #384]	; (8000484 <__aeabi_fdiv+0x228>)
 8000304:	401d      	ands	r5, r3
 8000306:	003b      	movs	r3, r7
 8000308:	3380      	adds	r3, #128	; 0x80
 800030a:	2bfe      	cmp	r3, #254	; 0xfe
 800030c:	dd00      	ble.n	8000310 <__aeabi_fdiv+0xb4>
 800030e:	e070      	b.n	80003f2 <__aeabi_fdiv+0x196>
 8000310:	01ad      	lsls	r5, r5, #6
 8000312:	0a6d      	lsrs	r5, r5, #9
 8000314:	b2d8      	uxtb	r0, r3
 8000316:	e002      	b.n	800031e <__aeabi_fdiv+0xc2>
 8000318:	000e      	movs	r6, r1
 800031a:	2000      	movs	r0, #0
 800031c:	2500      	movs	r5, #0
 800031e:	05c0      	lsls	r0, r0, #23
 8000320:	4328      	orrs	r0, r5
 8000322:	07f6      	lsls	r6, r6, #31
 8000324:	4330      	orrs	r0, r6
 8000326:	bce0      	pop	{r5, r6, r7}
 8000328:	46ba      	mov	sl, r7
 800032a:	46b1      	mov	r9, r6
 800032c:	46a8      	mov	r8, r5
 800032e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000330:	4643      	mov	r3, r8
 8000332:	2b00      	cmp	r3, #0
 8000334:	d13f      	bne.n	80003b6 <__aeabi_fdiv+0x15a>
 8000336:	2202      	movs	r2, #2
 8000338:	3fff      	subs	r7, #255	; 0xff
 800033a:	e003      	b.n	8000344 <__aeabi_fdiv+0xe8>
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d12d      	bne.n	800039e <__aeabi_fdiv+0x142>
 8000342:	2201      	movs	r2, #1
 8000344:	0031      	movs	r1, r6
 8000346:	464b      	mov	r3, r9
 8000348:	4061      	eors	r1, r4
 800034a:	b2c9      	uxtb	r1, r1
 800034c:	4313      	orrs	r3, r2
 800034e:	2b0f      	cmp	r3, #15
 8000350:	d834      	bhi.n	80003bc <__aeabi_fdiv+0x160>
 8000352:	484d      	ldr	r0, [pc, #308]	; (8000488 <__aeabi_fdiv+0x22c>)
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	58c3      	ldr	r3, [r0, r3]
 8000358:	469f      	mov	pc, r3
 800035a:	2d00      	cmp	r5, #0
 800035c:	d113      	bne.n	8000386 <__aeabi_fdiv+0x12a>
 800035e:	2304      	movs	r3, #4
 8000360:	4699      	mov	r9, r3
 8000362:	3b03      	subs	r3, #3
 8000364:	2700      	movs	r7, #0
 8000366:	469a      	mov	sl, r3
 8000368:	e791      	b.n	800028e <__aeabi_fdiv+0x32>
 800036a:	2d00      	cmp	r5, #0
 800036c:	d105      	bne.n	800037a <__aeabi_fdiv+0x11e>
 800036e:	2308      	movs	r3, #8
 8000370:	4699      	mov	r9, r3
 8000372:	3b06      	subs	r3, #6
 8000374:	27ff      	movs	r7, #255	; 0xff
 8000376:	469a      	mov	sl, r3
 8000378:	e789      	b.n	800028e <__aeabi_fdiv+0x32>
 800037a:	230c      	movs	r3, #12
 800037c:	4699      	mov	r9, r3
 800037e:	3b09      	subs	r3, #9
 8000380:	27ff      	movs	r7, #255	; 0xff
 8000382:	469a      	mov	sl, r3
 8000384:	e783      	b.n	800028e <__aeabi_fdiv+0x32>
 8000386:	0028      	movs	r0, r5
 8000388:	f001 fa98 	bl	80018bc <__clzsi2>
 800038c:	2776      	movs	r7, #118	; 0x76
 800038e:	1f43      	subs	r3, r0, #5
 8000390:	409d      	lsls	r5, r3
 8000392:	2300      	movs	r3, #0
 8000394:	427f      	negs	r7, r7
 8000396:	4699      	mov	r9, r3
 8000398:	469a      	mov	sl, r3
 800039a:	1a3f      	subs	r7, r7, r0
 800039c:	e777      	b.n	800028e <__aeabi_fdiv+0x32>
 800039e:	4640      	mov	r0, r8
 80003a0:	f001 fa8c 	bl	80018bc <__clzsi2>
 80003a4:	4642      	mov	r2, r8
 80003a6:	1f43      	subs	r3, r0, #5
 80003a8:	409a      	lsls	r2, r3
 80003aa:	2376      	movs	r3, #118	; 0x76
 80003ac:	425b      	negs	r3, r3
 80003ae:	4690      	mov	r8, r2
 80003b0:	1a1b      	subs	r3, r3, r0
 80003b2:	2200      	movs	r2, #0
 80003b4:	e77d      	b.n	80002b2 <__aeabi_fdiv+0x56>
 80003b6:	23ff      	movs	r3, #255	; 0xff
 80003b8:	2203      	movs	r2, #3
 80003ba:	e77a      	b.n	80002b2 <__aeabi_fdiv+0x56>
 80003bc:	000e      	movs	r6, r1
 80003be:	20ff      	movs	r0, #255	; 0xff
 80003c0:	2500      	movs	r5, #0
 80003c2:	e7ac      	b.n	800031e <__aeabi_fdiv+0xc2>
 80003c4:	2001      	movs	r0, #1
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	281b      	cmp	r0, #27
 80003ca:	dca6      	bgt.n	800031a <__aeabi_fdiv+0xbe>
 80003cc:	379e      	adds	r7, #158	; 0x9e
 80003ce:	002a      	movs	r2, r5
 80003d0:	40bd      	lsls	r5, r7
 80003d2:	40c2      	lsrs	r2, r0
 80003d4:	1e6b      	subs	r3, r5, #1
 80003d6:	419d      	sbcs	r5, r3
 80003d8:	4315      	orrs	r5, r2
 80003da:	076b      	lsls	r3, r5, #29
 80003dc:	d004      	beq.n	80003e8 <__aeabi_fdiv+0x18c>
 80003de:	230f      	movs	r3, #15
 80003e0:	402b      	ands	r3, r5
 80003e2:	2b04      	cmp	r3, #4
 80003e4:	d000      	beq.n	80003e8 <__aeabi_fdiv+0x18c>
 80003e6:	3504      	adds	r5, #4
 80003e8:	016b      	lsls	r3, r5, #5
 80003ea:	d544      	bpl.n	8000476 <__aeabi_fdiv+0x21a>
 80003ec:	2001      	movs	r0, #1
 80003ee:	2500      	movs	r5, #0
 80003f0:	e795      	b.n	800031e <__aeabi_fdiv+0xc2>
 80003f2:	20ff      	movs	r0, #255	; 0xff
 80003f4:	2500      	movs	r5, #0
 80003f6:	e792      	b.n	800031e <__aeabi_fdiv+0xc2>
 80003f8:	2580      	movs	r5, #128	; 0x80
 80003fa:	2600      	movs	r6, #0
 80003fc:	20ff      	movs	r0, #255	; 0xff
 80003fe:	03ed      	lsls	r5, r5, #15
 8000400:	e78d      	b.n	800031e <__aeabi_fdiv+0xc2>
 8000402:	2300      	movs	r3, #0
 8000404:	4698      	mov	r8, r3
 8000406:	2080      	movs	r0, #128	; 0x80
 8000408:	03c0      	lsls	r0, r0, #15
 800040a:	4205      	tst	r5, r0
 800040c:	d009      	beq.n	8000422 <__aeabi_fdiv+0x1c6>
 800040e:	4643      	mov	r3, r8
 8000410:	4203      	tst	r3, r0
 8000412:	d106      	bne.n	8000422 <__aeabi_fdiv+0x1c6>
 8000414:	4645      	mov	r5, r8
 8000416:	4305      	orrs	r5, r0
 8000418:	026d      	lsls	r5, r5, #9
 800041a:	0026      	movs	r6, r4
 800041c:	20ff      	movs	r0, #255	; 0xff
 800041e:	0a6d      	lsrs	r5, r5, #9
 8000420:	e77d      	b.n	800031e <__aeabi_fdiv+0xc2>
 8000422:	2080      	movs	r0, #128	; 0x80
 8000424:	03c0      	lsls	r0, r0, #15
 8000426:	4305      	orrs	r5, r0
 8000428:	026d      	lsls	r5, r5, #9
 800042a:	20ff      	movs	r0, #255	; 0xff
 800042c:	0a6d      	lsrs	r5, r5, #9
 800042e:	e776      	b.n	800031e <__aeabi_fdiv+0xc2>
 8000430:	4642      	mov	r2, r8
 8000432:	016b      	lsls	r3, r5, #5
 8000434:	0150      	lsls	r0, r2, #5
 8000436:	4283      	cmp	r3, r0
 8000438:	d219      	bcs.n	800046e <__aeabi_fdiv+0x212>
 800043a:	221b      	movs	r2, #27
 800043c:	2500      	movs	r5, #0
 800043e:	3f01      	subs	r7, #1
 8000440:	2601      	movs	r6, #1
 8000442:	001c      	movs	r4, r3
 8000444:	006d      	lsls	r5, r5, #1
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	2c00      	cmp	r4, #0
 800044a:	db01      	blt.n	8000450 <__aeabi_fdiv+0x1f4>
 800044c:	4298      	cmp	r0, r3
 800044e:	d801      	bhi.n	8000454 <__aeabi_fdiv+0x1f8>
 8000450:	1a1b      	subs	r3, r3, r0
 8000452:	4335      	orrs	r5, r6
 8000454:	3a01      	subs	r2, #1
 8000456:	2a00      	cmp	r2, #0
 8000458:	d1f3      	bne.n	8000442 <__aeabi_fdiv+0x1e6>
 800045a:	1e5a      	subs	r2, r3, #1
 800045c:	4193      	sbcs	r3, r2
 800045e:	431d      	orrs	r5, r3
 8000460:	003b      	movs	r3, r7
 8000462:	337f      	adds	r3, #127	; 0x7f
 8000464:	000e      	movs	r6, r1
 8000466:	2b00      	cmp	r3, #0
 8000468:	dd00      	ble.n	800046c <__aeabi_fdiv+0x210>
 800046a:	e741      	b.n	80002f0 <__aeabi_fdiv+0x94>
 800046c:	e7aa      	b.n	80003c4 <__aeabi_fdiv+0x168>
 800046e:	221a      	movs	r2, #26
 8000470:	2501      	movs	r5, #1
 8000472:	1a1b      	subs	r3, r3, r0
 8000474:	e7e4      	b.n	8000440 <__aeabi_fdiv+0x1e4>
 8000476:	01ad      	lsls	r5, r5, #6
 8000478:	2000      	movs	r0, #0
 800047a:	0a6d      	lsrs	r5, r5, #9
 800047c:	e74f      	b.n	800031e <__aeabi_fdiv+0xc2>
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	0800469c 	.word	0x0800469c
 8000484:	f7ffffff 	.word	0xf7ffffff
 8000488:	080046dc 	.word	0x080046dc

0800048c <__aeabi_ui2f>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	1e05      	subs	r5, r0, #0
 8000490:	d00e      	beq.n	80004b0 <__aeabi_ui2f+0x24>
 8000492:	f001 fa13 	bl	80018bc <__clzsi2>
 8000496:	239e      	movs	r3, #158	; 0x9e
 8000498:	0004      	movs	r4, r0
 800049a:	1a1b      	subs	r3, r3, r0
 800049c:	2b96      	cmp	r3, #150	; 0x96
 800049e:	dc0c      	bgt.n	80004ba <__aeabi_ui2f+0x2e>
 80004a0:	2808      	cmp	r0, #8
 80004a2:	dd01      	ble.n	80004a8 <__aeabi_ui2f+0x1c>
 80004a4:	3c08      	subs	r4, #8
 80004a6:	40a5      	lsls	r5, r4
 80004a8:	026d      	lsls	r5, r5, #9
 80004aa:	0a6d      	lsrs	r5, r5, #9
 80004ac:	b2d8      	uxtb	r0, r3
 80004ae:	e001      	b.n	80004b4 <__aeabi_ui2f+0x28>
 80004b0:	2000      	movs	r0, #0
 80004b2:	2500      	movs	r5, #0
 80004b4:	05c0      	lsls	r0, r0, #23
 80004b6:	4328      	orrs	r0, r5
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	2b99      	cmp	r3, #153	; 0x99
 80004bc:	dd09      	ble.n	80004d2 <__aeabi_ui2f+0x46>
 80004be:	0002      	movs	r2, r0
 80004c0:	0029      	movs	r1, r5
 80004c2:	321b      	adds	r2, #27
 80004c4:	4091      	lsls	r1, r2
 80004c6:	1e4a      	subs	r2, r1, #1
 80004c8:	4191      	sbcs	r1, r2
 80004ca:	2205      	movs	r2, #5
 80004cc:	1a12      	subs	r2, r2, r0
 80004ce:	40d5      	lsrs	r5, r2
 80004d0:	430d      	orrs	r5, r1
 80004d2:	2c05      	cmp	r4, #5
 80004d4:	dc12      	bgt.n	80004fc <__aeabi_ui2f+0x70>
 80004d6:	0029      	movs	r1, r5
 80004d8:	4e0c      	ldr	r6, [pc, #48]	; (800050c <__aeabi_ui2f+0x80>)
 80004da:	4031      	ands	r1, r6
 80004dc:	076a      	lsls	r2, r5, #29
 80004de:	d009      	beq.n	80004f4 <__aeabi_ui2f+0x68>
 80004e0:	200f      	movs	r0, #15
 80004e2:	4028      	ands	r0, r5
 80004e4:	2804      	cmp	r0, #4
 80004e6:	d005      	beq.n	80004f4 <__aeabi_ui2f+0x68>
 80004e8:	3104      	adds	r1, #4
 80004ea:	014a      	lsls	r2, r1, #5
 80004ec:	d502      	bpl.n	80004f4 <__aeabi_ui2f+0x68>
 80004ee:	239f      	movs	r3, #159	; 0x9f
 80004f0:	4031      	ands	r1, r6
 80004f2:	1b1b      	subs	r3, r3, r4
 80004f4:	0189      	lsls	r1, r1, #6
 80004f6:	0a4d      	lsrs	r5, r1, #9
 80004f8:	b2d8      	uxtb	r0, r3
 80004fa:	e7db      	b.n	80004b4 <__aeabi_ui2f+0x28>
 80004fc:	1f62      	subs	r2, r4, #5
 80004fe:	4095      	lsls	r5, r2
 8000500:	0029      	movs	r1, r5
 8000502:	4e02      	ldr	r6, [pc, #8]	; (800050c <__aeabi_ui2f+0x80>)
 8000504:	4031      	ands	r1, r6
 8000506:	076a      	lsls	r2, r5, #29
 8000508:	d0f4      	beq.n	80004f4 <__aeabi_ui2f+0x68>
 800050a:	e7e9      	b.n	80004e0 <__aeabi_ui2f+0x54>
 800050c:	fbffffff 	.word	0xfbffffff

08000510 <__aeabi_ddiv>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	4657      	mov	r7, sl
 8000514:	464e      	mov	r6, r9
 8000516:	4645      	mov	r5, r8
 8000518:	46de      	mov	lr, fp
 800051a:	b5e0      	push	{r5, r6, r7, lr}
 800051c:	4681      	mov	r9, r0
 800051e:	0005      	movs	r5, r0
 8000520:	030c      	lsls	r4, r1, #12
 8000522:	0048      	lsls	r0, r1, #1
 8000524:	4692      	mov	sl, r2
 8000526:	001f      	movs	r7, r3
 8000528:	b085      	sub	sp, #20
 800052a:	0b24      	lsrs	r4, r4, #12
 800052c:	0d40      	lsrs	r0, r0, #21
 800052e:	0fce      	lsrs	r6, r1, #31
 8000530:	2800      	cmp	r0, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_ddiv+0x26>
 8000534:	e156      	b.n	80007e4 <__aeabi_ddiv+0x2d4>
 8000536:	4bd4      	ldr	r3, [pc, #848]	; (8000888 <__aeabi_ddiv+0x378>)
 8000538:	4298      	cmp	r0, r3
 800053a:	d100      	bne.n	800053e <__aeabi_ddiv+0x2e>
 800053c:	e172      	b.n	8000824 <__aeabi_ddiv+0x314>
 800053e:	0f6b      	lsrs	r3, r5, #29
 8000540:	00e4      	lsls	r4, r4, #3
 8000542:	431c      	orrs	r4, r3
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	041b      	lsls	r3, r3, #16
 8000548:	4323      	orrs	r3, r4
 800054a:	4698      	mov	r8, r3
 800054c:	4bcf      	ldr	r3, [pc, #828]	; (800088c <__aeabi_ddiv+0x37c>)
 800054e:	00ed      	lsls	r5, r5, #3
 8000550:	469b      	mov	fp, r3
 8000552:	2300      	movs	r3, #0
 8000554:	4699      	mov	r9, r3
 8000556:	4483      	add	fp, r0
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	033c      	lsls	r4, r7, #12
 800055c:	007b      	lsls	r3, r7, #1
 800055e:	4650      	mov	r0, sl
 8000560:	0b24      	lsrs	r4, r4, #12
 8000562:	0d5b      	lsrs	r3, r3, #21
 8000564:	0fff      	lsrs	r7, r7, #31
 8000566:	2b00      	cmp	r3, #0
 8000568:	d100      	bne.n	800056c <__aeabi_ddiv+0x5c>
 800056a:	e11f      	b.n	80007ac <__aeabi_ddiv+0x29c>
 800056c:	4ac6      	ldr	r2, [pc, #792]	; (8000888 <__aeabi_ddiv+0x378>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d100      	bne.n	8000574 <__aeabi_ddiv+0x64>
 8000572:	e162      	b.n	800083a <__aeabi_ddiv+0x32a>
 8000574:	49c5      	ldr	r1, [pc, #788]	; (800088c <__aeabi_ddiv+0x37c>)
 8000576:	0f42      	lsrs	r2, r0, #29
 8000578:	468c      	mov	ip, r1
 800057a:	00e4      	lsls	r4, r4, #3
 800057c:	4659      	mov	r1, fp
 800057e:	4314      	orrs	r4, r2
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	4463      	add	r3, ip
 8000584:	0412      	lsls	r2, r2, #16
 8000586:	1acb      	subs	r3, r1, r3
 8000588:	4314      	orrs	r4, r2
 800058a:	469b      	mov	fp, r3
 800058c:	00c2      	lsls	r2, r0, #3
 800058e:	2000      	movs	r0, #0
 8000590:	0033      	movs	r3, r6
 8000592:	407b      	eors	r3, r7
 8000594:	469a      	mov	sl, r3
 8000596:	464b      	mov	r3, r9
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d827      	bhi.n	80005ec <__aeabi_ddiv+0xdc>
 800059c:	49bc      	ldr	r1, [pc, #752]	; (8000890 <__aeabi_ddiv+0x380>)
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	58cb      	ldr	r3, [r1, r3]
 80005a2:	469f      	mov	pc, r3
 80005a4:	46b2      	mov	sl, r6
 80005a6:	9b00      	ldr	r3, [sp, #0]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d016      	beq.n	80005da <__aeabi_ddiv+0xca>
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d100      	bne.n	80005b2 <__aeabi_ddiv+0xa2>
 80005b0:	e28e      	b.n	8000ad0 <__aeabi_ddiv+0x5c0>
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d000      	beq.n	80005b8 <__aeabi_ddiv+0xa8>
 80005b6:	e0d9      	b.n	800076c <__aeabi_ddiv+0x25c>
 80005b8:	2300      	movs	r3, #0
 80005ba:	2400      	movs	r4, #0
 80005bc:	2500      	movs	r5, #0
 80005be:	4652      	mov	r2, sl
 80005c0:	051b      	lsls	r3, r3, #20
 80005c2:	4323      	orrs	r3, r4
 80005c4:	07d2      	lsls	r2, r2, #31
 80005c6:	4313      	orrs	r3, r2
 80005c8:	0028      	movs	r0, r5
 80005ca:	0019      	movs	r1, r3
 80005cc:	b005      	add	sp, #20
 80005ce:	bcf0      	pop	{r4, r5, r6, r7}
 80005d0:	46bb      	mov	fp, r7
 80005d2:	46b2      	mov	sl, r6
 80005d4:	46a9      	mov	r9, r5
 80005d6:	46a0      	mov	r8, r4
 80005d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005da:	2400      	movs	r4, #0
 80005dc:	2500      	movs	r5, #0
 80005de:	4baa      	ldr	r3, [pc, #680]	; (8000888 <__aeabi_ddiv+0x378>)
 80005e0:	e7ed      	b.n	80005be <__aeabi_ddiv+0xae>
 80005e2:	46ba      	mov	sl, r7
 80005e4:	46a0      	mov	r8, r4
 80005e6:	0015      	movs	r5, r2
 80005e8:	9000      	str	r0, [sp, #0]
 80005ea:	e7dc      	b.n	80005a6 <__aeabi_ddiv+0x96>
 80005ec:	4544      	cmp	r4, r8
 80005ee:	d200      	bcs.n	80005f2 <__aeabi_ddiv+0xe2>
 80005f0:	e1c7      	b.n	8000982 <__aeabi_ddiv+0x472>
 80005f2:	d100      	bne.n	80005f6 <__aeabi_ddiv+0xe6>
 80005f4:	e1c2      	b.n	800097c <__aeabi_ddiv+0x46c>
 80005f6:	2301      	movs	r3, #1
 80005f8:	425b      	negs	r3, r3
 80005fa:	469c      	mov	ip, r3
 80005fc:	002e      	movs	r6, r5
 80005fe:	4640      	mov	r0, r8
 8000600:	2500      	movs	r5, #0
 8000602:	44e3      	add	fp, ip
 8000604:	0223      	lsls	r3, r4, #8
 8000606:	0e14      	lsrs	r4, r2, #24
 8000608:	431c      	orrs	r4, r3
 800060a:	0c1b      	lsrs	r3, r3, #16
 800060c:	4699      	mov	r9, r3
 800060e:	0423      	lsls	r3, r4, #16
 8000610:	0c1f      	lsrs	r7, r3, #16
 8000612:	0212      	lsls	r2, r2, #8
 8000614:	4649      	mov	r1, r9
 8000616:	9200      	str	r2, [sp, #0]
 8000618:	9701      	str	r7, [sp, #4]
 800061a:	f7ff fdfb 	bl	8000214 <__aeabi_uidivmod>
 800061e:	0002      	movs	r2, r0
 8000620:	437a      	muls	r2, r7
 8000622:	040b      	lsls	r3, r1, #16
 8000624:	0c31      	lsrs	r1, r6, #16
 8000626:	4680      	mov	r8, r0
 8000628:	4319      	orrs	r1, r3
 800062a:	428a      	cmp	r2, r1
 800062c:	d907      	bls.n	800063e <__aeabi_ddiv+0x12e>
 800062e:	2301      	movs	r3, #1
 8000630:	425b      	negs	r3, r3
 8000632:	469c      	mov	ip, r3
 8000634:	1909      	adds	r1, r1, r4
 8000636:	44e0      	add	r8, ip
 8000638:	428c      	cmp	r4, r1
 800063a:	d800      	bhi.n	800063e <__aeabi_ddiv+0x12e>
 800063c:	e207      	b.n	8000a4e <__aeabi_ddiv+0x53e>
 800063e:	1a88      	subs	r0, r1, r2
 8000640:	4649      	mov	r1, r9
 8000642:	f7ff fde7 	bl	8000214 <__aeabi_uidivmod>
 8000646:	0409      	lsls	r1, r1, #16
 8000648:	468c      	mov	ip, r1
 800064a:	0431      	lsls	r1, r6, #16
 800064c:	4666      	mov	r6, ip
 800064e:	9a01      	ldr	r2, [sp, #4]
 8000650:	0c09      	lsrs	r1, r1, #16
 8000652:	4342      	muls	r2, r0
 8000654:	0003      	movs	r3, r0
 8000656:	4331      	orrs	r1, r6
 8000658:	428a      	cmp	r2, r1
 800065a:	d904      	bls.n	8000666 <__aeabi_ddiv+0x156>
 800065c:	1909      	adds	r1, r1, r4
 800065e:	3b01      	subs	r3, #1
 8000660:	428c      	cmp	r4, r1
 8000662:	d800      	bhi.n	8000666 <__aeabi_ddiv+0x156>
 8000664:	e1ed      	b.n	8000a42 <__aeabi_ddiv+0x532>
 8000666:	1a88      	subs	r0, r1, r2
 8000668:	4642      	mov	r2, r8
 800066a:	0412      	lsls	r2, r2, #16
 800066c:	431a      	orrs	r2, r3
 800066e:	4690      	mov	r8, r2
 8000670:	4641      	mov	r1, r8
 8000672:	9b00      	ldr	r3, [sp, #0]
 8000674:	040e      	lsls	r6, r1, #16
 8000676:	0c1b      	lsrs	r3, r3, #16
 8000678:	001f      	movs	r7, r3
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	9b00      	ldr	r3, [sp, #0]
 800067e:	0c36      	lsrs	r6, r6, #16
 8000680:	041b      	lsls	r3, r3, #16
 8000682:	0c19      	lsrs	r1, r3, #16
 8000684:	000b      	movs	r3, r1
 8000686:	4373      	muls	r3, r6
 8000688:	0c12      	lsrs	r2, r2, #16
 800068a:	437e      	muls	r6, r7
 800068c:	9103      	str	r1, [sp, #12]
 800068e:	4351      	muls	r1, r2
 8000690:	437a      	muls	r2, r7
 8000692:	0c1f      	lsrs	r7, r3, #16
 8000694:	46bc      	mov	ip, r7
 8000696:	1876      	adds	r6, r6, r1
 8000698:	4466      	add	r6, ip
 800069a:	42b1      	cmp	r1, r6
 800069c:	d903      	bls.n	80006a6 <__aeabi_ddiv+0x196>
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	0249      	lsls	r1, r1, #9
 80006a2:	468c      	mov	ip, r1
 80006a4:	4462      	add	r2, ip
 80006a6:	0c31      	lsrs	r1, r6, #16
 80006a8:	188a      	adds	r2, r1, r2
 80006aa:	0431      	lsls	r1, r6, #16
 80006ac:	041e      	lsls	r6, r3, #16
 80006ae:	0c36      	lsrs	r6, r6, #16
 80006b0:	198e      	adds	r6, r1, r6
 80006b2:	4290      	cmp	r0, r2
 80006b4:	d302      	bcc.n	80006bc <__aeabi_ddiv+0x1ac>
 80006b6:	d112      	bne.n	80006de <__aeabi_ddiv+0x1ce>
 80006b8:	42b5      	cmp	r5, r6
 80006ba:	d210      	bcs.n	80006de <__aeabi_ddiv+0x1ce>
 80006bc:	4643      	mov	r3, r8
 80006be:	1e59      	subs	r1, r3, #1
 80006c0:	9b00      	ldr	r3, [sp, #0]
 80006c2:	469c      	mov	ip, r3
 80006c4:	4465      	add	r5, ip
 80006c6:	001f      	movs	r7, r3
 80006c8:	429d      	cmp	r5, r3
 80006ca:	419b      	sbcs	r3, r3
 80006cc:	425b      	negs	r3, r3
 80006ce:	191b      	adds	r3, r3, r4
 80006d0:	18c0      	adds	r0, r0, r3
 80006d2:	4284      	cmp	r4, r0
 80006d4:	d200      	bcs.n	80006d8 <__aeabi_ddiv+0x1c8>
 80006d6:	e1a0      	b.n	8000a1a <__aeabi_ddiv+0x50a>
 80006d8:	d100      	bne.n	80006dc <__aeabi_ddiv+0x1cc>
 80006da:	e19b      	b.n	8000a14 <__aeabi_ddiv+0x504>
 80006dc:	4688      	mov	r8, r1
 80006de:	1bae      	subs	r6, r5, r6
 80006e0:	42b5      	cmp	r5, r6
 80006e2:	41ad      	sbcs	r5, r5
 80006e4:	1a80      	subs	r0, r0, r2
 80006e6:	426d      	negs	r5, r5
 80006e8:	1b40      	subs	r0, r0, r5
 80006ea:	4284      	cmp	r4, r0
 80006ec:	d100      	bne.n	80006f0 <__aeabi_ddiv+0x1e0>
 80006ee:	e1d5      	b.n	8000a9c <__aeabi_ddiv+0x58c>
 80006f0:	4649      	mov	r1, r9
 80006f2:	f7ff fd8f 	bl	8000214 <__aeabi_uidivmod>
 80006f6:	9a01      	ldr	r2, [sp, #4]
 80006f8:	040b      	lsls	r3, r1, #16
 80006fa:	4342      	muls	r2, r0
 80006fc:	0c31      	lsrs	r1, r6, #16
 80006fe:	0005      	movs	r5, r0
 8000700:	4319      	orrs	r1, r3
 8000702:	428a      	cmp	r2, r1
 8000704:	d900      	bls.n	8000708 <__aeabi_ddiv+0x1f8>
 8000706:	e16c      	b.n	80009e2 <__aeabi_ddiv+0x4d2>
 8000708:	1a88      	subs	r0, r1, r2
 800070a:	4649      	mov	r1, r9
 800070c:	f7ff fd82 	bl	8000214 <__aeabi_uidivmod>
 8000710:	9a01      	ldr	r2, [sp, #4]
 8000712:	0436      	lsls	r6, r6, #16
 8000714:	4342      	muls	r2, r0
 8000716:	0409      	lsls	r1, r1, #16
 8000718:	0c36      	lsrs	r6, r6, #16
 800071a:	0003      	movs	r3, r0
 800071c:	430e      	orrs	r6, r1
 800071e:	42b2      	cmp	r2, r6
 8000720:	d900      	bls.n	8000724 <__aeabi_ddiv+0x214>
 8000722:	e153      	b.n	80009cc <__aeabi_ddiv+0x4bc>
 8000724:	9803      	ldr	r0, [sp, #12]
 8000726:	1ab6      	subs	r6, r6, r2
 8000728:	0002      	movs	r2, r0
 800072a:	042d      	lsls	r5, r5, #16
 800072c:	431d      	orrs	r5, r3
 800072e:	9f02      	ldr	r7, [sp, #8]
 8000730:	042b      	lsls	r3, r5, #16
 8000732:	0c1b      	lsrs	r3, r3, #16
 8000734:	435a      	muls	r2, r3
 8000736:	437b      	muls	r3, r7
 8000738:	469c      	mov	ip, r3
 800073a:	0c29      	lsrs	r1, r5, #16
 800073c:	4348      	muls	r0, r1
 800073e:	0c13      	lsrs	r3, r2, #16
 8000740:	4484      	add	ip, r0
 8000742:	4463      	add	r3, ip
 8000744:	4379      	muls	r1, r7
 8000746:	4298      	cmp	r0, r3
 8000748:	d903      	bls.n	8000752 <__aeabi_ddiv+0x242>
 800074a:	2080      	movs	r0, #128	; 0x80
 800074c:	0240      	lsls	r0, r0, #9
 800074e:	4684      	mov	ip, r0
 8000750:	4461      	add	r1, ip
 8000752:	0c18      	lsrs	r0, r3, #16
 8000754:	0412      	lsls	r2, r2, #16
 8000756:	041b      	lsls	r3, r3, #16
 8000758:	0c12      	lsrs	r2, r2, #16
 800075a:	1841      	adds	r1, r0, r1
 800075c:	189b      	adds	r3, r3, r2
 800075e:	428e      	cmp	r6, r1
 8000760:	d200      	bcs.n	8000764 <__aeabi_ddiv+0x254>
 8000762:	e0ff      	b.n	8000964 <__aeabi_ddiv+0x454>
 8000764:	d100      	bne.n	8000768 <__aeabi_ddiv+0x258>
 8000766:	e0fa      	b.n	800095e <__aeabi_ddiv+0x44e>
 8000768:	2301      	movs	r3, #1
 800076a:	431d      	orrs	r5, r3
 800076c:	4a49      	ldr	r2, [pc, #292]	; (8000894 <__aeabi_ddiv+0x384>)
 800076e:	445a      	add	r2, fp
 8000770:	2a00      	cmp	r2, #0
 8000772:	dc00      	bgt.n	8000776 <__aeabi_ddiv+0x266>
 8000774:	e0aa      	b.n	80008cc <__aeabi_ddiv+0x3bc>
 8000776:	076b      	lsls	r3, r5, #29
 8000778:	d000      	beq.n	800077c <__aeabi_ddiv+0x26c>
 800077a:	e13d      	b.n	80009f8 <__aeabi_ddiv+0x4e8>
 800077c:	08ed      	lsrs	r5, r5, #3
 800077e:	4643      	mov	r3, r8
 8000780:	01db      	lsls	r3, r3, #7
 8000782:	d506      	bpl.n	8000792 <__aeabi_ddiv+0x282>
 8000784:	4642      	mov	r2, r8
 8000786:	4b44      	ldr	r3, [pc, #272]	; (8000898 <__aeabi_ddiv+0x388>)
 8000788:	401a      	ands	r2, r3
 800078a:	4690      	mov	r8, r2
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	00d2      	lsls	r2, r2, #3
 8000790:	445a      	add	r2, fp
 8000792:	4b42      	ldr	r3, [pc, #264]	; (800089c <__aeabi_ddiv+0x38c>)
 8000794:	429a      	cmp	r2, r3
 8000796:	dd00      	ble.n	800079a <__aeabi_ddiv+0x28a>
 8000798:	e71f      	b.n	80005da <__aeabi_ddiv+0xca>
 800079a:	4643      	mov	r3, r8
 800079c:	075b      	lsls	r3, r3, #29
 800079e:	431d      	orrs	r5, r3
 80007a0:	4643      	mov	r3, r8
 80007a2:	0552      	lsls	r2, r2, #21
 80007a4:	025c      	lsls	r4, r3, #9
 80007a6:	0b24      	lsrs	r4, r4, #12
 80007a8:	0d53      	lsrs	r3, r2, #21
 80007aa:	e708      	b.n	80005be <__aeabi_ddiv+0xae>
 80007ac:	4652      	mov	r2, sl
 80007ae:	4322      	orrs	r2, r4
 80007b0:	d100      	bne.n	80007b4 <__aeabi_ddiv+0x2a4>
 80007b2:	e07b      	b.n	80008ac <__aeabi_ddiv+0x39c>
 80007b4:	2c00      	cmp	r4, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_ddiv+0x2aa>
 80007b8:	e0fa      	b.n	80009b0 <__aeabi_ddiv+0x4a0>
 80007ba:	0020      	movs	r0, r4
 80007bc:	f001 f87e 	bl	80018bc <__clzsi2>
 80007c0:	0002      	movs	r2, r0
 80007c2:	3a0b      	subs	r2, #11
 80007c4:	231d      	movs	r3, #29
 80007c6:	0001      	movs	r1, r0
 80007c8:	1a9b      	subs	r3, r3, r2
 80007ca:	4652      	mov	r2, sl
 80007cc:	3908      	subs	r1, #8
 80007ce:	40da      	lsrs	r2, r3
 80007d0:	408c      	lsls	r4, r1
 80007d2:	4314      	orrs	r4, r2
 80007d4:	4652      	mov	r2, sl
 80007d6:	408a      	lsls	r2, r1
 80007d8:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <__aeabi_ddiv+0x390>)
 80007da:	4458      	add	r0, fp
 80007dc:	469b      	mov	fp, r3
 80007de:	4483      	add	fp, r0
 80007e0:	2000      	movs	r0, #0
 80007e2:	e6d5      	b.n	8000590 <__aeabi_ddiv+0x80>
 80007e4:	464b      	mov	r3, r9
 80007e6:	4323      	orrs	r3, r4
 80007e8:	4698      	mov	r8, r3
 80007ea:	d044      	beq.n	8000876 <__aeabi_ddiv+0x366>
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	d100      	bne.n	80007f2 <__aeabi_ddiv+0x2e2>
 80007f0:	e0ce      	b.n	8000990 <__aeabi_ddiv+0x480>
 80007f2:	0020      	movs	r0, r4
 80007f4:	f001 f862 	bl	80018bc <__clzsi2>
 80007f8:	0001      	movs	r1, r0
 80007fa:	0002      	movs	r2, r0
 80007fc:	390b      	subs	r1, #11
 80007fe:	231d      	movs	r3, #29
 8000800:	1a5b      	subs	r3, r3, r1
 8000802:	4649      	mov	r1, r9
 8000804:	0010      	movs	r0, r2
 8000806:	40d9      	lsrs	r1, r3
 8000808:	3808      	subs	r0, #8
 800080a:	4084      	lsls	r4, r0
 800080c:	000b      	movs	r3, r1
 800080e:	464d      	mov	r5, r9
 8000810:	4323      	orrs	r3, r4
 8000812:	4698      	mov	r8, r3
 8000814:	4085      	lsls	r5, r0
 8000816:	4823      	ldr	r0, [pc, #140]	; (80008a4 <__aeabi_ddiv+0x394>)
 8000818:	1a83      	subs	r3, r0, r2
 800081a:	469b      	mov	fp, r3
 800081c:	2300      	movs	r3, #0
 800081e:	4699      	mov	r9, r3
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	e69a      	b.n	800055a <__aeabi_ddiv+0x4a>
 8000824:	464b      	mov	r3, r9
 8000826:	4323      	orrs	r3, r4
 8000828:	4698      	mov	r8, r3
 800082a:	d11d      	bne.n	8000868 <__aeabi_ddiv+0x358>
 800082c:	2308      	movs	r3, #8
 800082e:	4699      	mov	r9, r3
 8000830:	3b06      	subs	r3, #6
 8000832:	2500      	movs	r5, #0
 8000834:	4683      	mov	fp, r0
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	e68f      	b.n	800055a <__aeabi_ddiv+0x4a>
 800083a:	4652      	mov	r2, sl
 800083c:	4322      	orrs	r2, r4
 800083e:	d109      	bne.n	8000854 <__aeabi_ddiv+0x344>
 8000840:	2302      	movs	r3, #2
 8000842:	4649      	mov	r1, r9
 8000844:	4319      	orrs	r1, r3
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <__aeabi_ddiv+0x398>)
 8000848:	4689      	mov	r9, r1
 800084a:	469c      	mov	ip, r3
 800084c:	2400      	movs	r4, #0
 800084e:	2002      	movs	r0, #2
 8000850:	44e3      	add	fp, ip
 8000852:	e69d      	b.n	8000590 <__aeabi_ddiv+0x80>
 8000854:	2303      	movs	r3, #3
 8000856:	464a      	mov	r2, r9
 8000858:	431a      	orrs	r2, r3
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <__aeabi_ddiv+0x398>)
 800085c:	4691      	mov	r9, r2
 800085e:	469c      	mov	ip, r3
 8000860:	4652      	mov	r2, sl
 8000862:	2003      	movs	r0, #3
 8000864:	44e3      	add	fp, ip
 8000866:	e693      	b.n	8000590 <__aeabi_ddiv+0x80>
 8000868:	230c      	movs	r3, #12
 800086a:	4699      	mov	r9, r3
 800086c:	3b09      	subs	r3, #9
 800086e:	46a0      	mov	r8, r4
 8000870:	4683      	mov	fp, r0
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	e671      	b.n	800055a <__aeabi_ddiv+0x4a>
 8000876:	2304      	movs	r3, #4
 8000878:	4699      	mov	r9, r3
 800087a:	2300      	movs	r3, #0
 800087c:	469b      	mov	fp, r3
 800087e:	3301      	adds	r3, #1
 8000880:	2500      	movs	r5, #0
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	e669      	b.n	800055a <__aeabi_ddiv+0x4a>
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	000007ff 	.word	0x000007ff
 800088c:	fffffc01 	.word	0xfffffc01
 8000890:	0800471c 	.word	0x0800471c
 8000894:	000003ff 	.word	0x000003ff
 8000898:	feffffff 	.word	0xfeffffff
 800089c:	000007fe 	.word	0x000007fe
 80008a0:	000003f3 	.word	0x000003f3
 80008a4:	fffffc0d 	.word	0xfffffc0d
 80008a8:	fffff801 	.word	0xfffff801
 80008ac:	4649      	mov	r1, r9
 80008ae:	2301      	movs	r3, #1
 80008b0:	4319      	orrs	r1, r3
 80008b2:	4689      	mov	r9, r1
 80008b4:	2400      	movs	r4, #0
 80008b6:	2001      	movs	r0, #1
 80008b8:	e66a      	b.n	8000590 <__aeabi_ddiv+0x80>
 80008ba:	2300      	movs	r3, #0
 80008bc:	2480      	movs	r4, #128	; 0x80
 80008be:	469a      	mov	sl, r3
 80008c0:	2500      	movs	r5, #0
 80008c2:	4b8a      	ldr	r3, [pc, #552]	; (8000aec <__aeabi_ddiv+0x5dc>)
 80008c4:	0324      	lsls	r4, r4, #12
 80008c6:	e67a      	b.n	80005be <__aeabi_ddiv+0xae>
 80008c8:	2501      	movs	r5, #1
 80008ca:	426d      	negs	r5, r5
 80008cc:	2301      	movs	r3, #1
 80008ce:	1a9b      	subs	r3, r3, r2
 80008d0:	2b38      	cmp	r3, #56	; 0x38
 80008d2:	dd00      	ble.n	80008d6 <__aeabi_ddiv+0x3c6>
 80008d4:	e670      	b.n	80005b8 <__aeabi_ddiv+0xa8>
 80008d6:	2b1f      	cmp	r3, #31
 80008d8:	dc00      	bgt.n	80008dc <__aeabi_ddiv+0x3cc>
 80008da:	e0bf      	b.n	8000a5c <__aeabi_ddiv+0x54c>
 80008dc:	211f      	movs	r1, #31
 80008de:	4249      	negs	r1, r1
 80008e0:	1a8a      	subs	r2, r1, r2
 80008e2:	4641      	mov	r1, r8
 80008e4:	40d1      	lsrs	r1, r2
 80008e6:	000a      	movs	r2, r1
 80008e8:	2b20      	cmp	r3, #32
 80008ea:	d004      	beq.n	80008f6 <__aeabi_ddiv+0x3e6>
 80008ec:	4641      	mov	r1, r8
 80008ee:	4b80      	ldr	r3, [pc, #512]	; (8000af0 <__aeabi_ddiv+0x5e0>)
 80008f0:	445b      	add	r3, fp
 80008f2:	4099      	lsls	r1, r3
 80008f4:	430d      	orrs	r5, r1
 80008f6:	1e6b      	subs	r3, r5, #1
 80008f8:	419d      	sbcs	r5, r3
 80008fa:	2307      	movs	r3, #7
 80008fc:	432a      	orrs	r2, r5
 80008fe:	001d      	movs	r5, r3
 8000900:	2400      	movs	r4, #0
 8000902:	4015      	ands	r5, r2
 8000904:	4213      	tst	r3, r2
 8000906:	d100      	bne.n	800090a <__aeabi_ddiv+0x3fa>
 8000908:	e0d4      	b.n	8000ab4 <__aeabi_ddiv+0x5a4>
 800090a:	210f      	movs	r1, #15
 800090c:	2300      	movs	r3, #0
 800090e:	4011      	ands	r1, r2
 8000910:	2904      	cmp	r1, #4
 8000912:	d100      	bne.n	8000916 <__aeabi_ddiv+0x406>
 8000914:	e0cb      	b.n	8000aae <__aeabi_ddiv+0x59e>
 8000916:	1d11      	adds	r1, r2, #4
 8000918:	4291      	cmp	r1, r2
 800091a:	4192      	sbcs	r2, r2
 800091c:	4252      	negs	r2, r2
 800091e:	189b      	adds	r3, r3, r2
 8000920:	000a      	movs	r2, r1
 8000922:	0219      	lsls	r1, r3, #8
 8000924:	d400      	bmi.n	8000928 <__aeabi_ddiv+0x418>
 8000926:	e0c2      	b.n	8000aae <__aeabi_ddiv+0x59e>
 8000928:	2301      	movs	r3, #1
 800092a:	2400      	movs	r4, #0
 800092c:	2500      	movs	r5, #0
 800092e:	e646      	b.n	80005be <__aeabi_ddiv+0xae>
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	4641      	mov	r1, r8
 8000934:	031b      	lsls	r3, r3, #12
 8000936:	4219      	tst	r1, r3
 8000938:	d008      	beq.n	800094c <__aeabi_ddiv+0x43c>
 800093a:	421c      	tst	r4, r3
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x43c>
 800093e:	431c      	orrs	r4, r3
 8000940:	0324      	lsls	r4, r4, #12
 8000942:	46ba      	mov	sl, r7
 8000944:	0015      	movs	r5, r2
 8000946:	4b69      	ldr	r3, [pc, #420]	; (8000aec <__aeabi_ddiv+0x5dc>)
 8000948:	0b24      	lsrs	r4, r4, #12
 800094a:	e638      	b.n	80005be <__aeabi_ddiv+0xae>
 800094c:	2480      	movs	r4, #128	; 0x80
 800094e:	4643      	mov	r3, r8
 8000950:	0324      	lsls	r4, r4, #12
 8000952:	431c      	orrs	r4, r3
 8000954:	0324      	lsls	r4, r4, #12
 8000956:	46b2      	mov	sl, r6
 8000958:	4b64      	ldr	r3, [pc, #400]	; (8000aec <__aeabi_ddiv+0x5dc>)
 800095a:	0b24      	lsrs	r4, r4, #12
 800095c:	e62f      	b.n	80005be <__aeabi_ddiv+0xae>
 800095e:	2b00      	cmp	r3, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_ddiv+0x454>
 8000962:	e703      	b.n	800076c <__aeabi_ddiv+0x25c>
 8000964:	19a6      	adds	r6, r4, r6
 8000966:	1e68      	subs	r0, r5, #1
 8000968:	42a6      	cmp	r6, r4
 800096a:	d200      	bcs.n	800096e <__aeabi_ddiv+0x45e>
 800096c:	e08d      	b.n	8000a8a <__aeabi_ddiv+0x57a>
 800096e:	428e      	cmp	r6, r1
 8000970:	d200      	bcs.n	8000974 <__aeabi_ddiv+0x464>
 8000972:	e0a3      	b.n	8000abc <__aeabi_ddiv+0x5ac>
 8000974:	d100      	bne.n	8000978 <__aeabi_ddiv+0x468>
 8000976:	e0b3      	b.n	8000ae0 <__aeabi_ddiv+0x5d0>
 8000978:	0005      	movs	r5, r0
 800097a:	e6f5      	b.n	8000768 <__aeabi_ddiv+0x258>
 800097c:	42aa      	cmp	r2, r5
 800097e:	d900      	bls.n	8000982 <__aeabi_ddiv+0x472>
 8000980:	e639      	b.n	80005f6 <__aeabi_ddiv+0xe6>
 8000982:	4643      	mov	r3, r8
 8000984:	07de      	lsls	r6, r3, #31
 8000986:	0858      	lsrs	r0, r3, #1
 8000988:	086b      	lsrs	r3, r5, #1
 800098a:	431e      	orrs	r6, r3
 800098c:	07ed      	lsls	r5, r5, #31
 800098e:	e639      	b.n	8000604 <__aeabi_ddiv+0xf4>
 8000990:	4648      	mov	r0, r9
 8000992:	f000 ff93 	bl	80018bc <__clzsi2>
 8000996:	0001      	movs	r1, r0
 8000998:	0002      	movs	r2, r0
 800099a:	3115      	adds	r1, #21
 800099c:	3220      	adds	r2, #32
 800099e:	291c      	cmp	r1, #28
 80009a0:	dc00      	bgt.n	80009a4 <__aeabi_ddiv+0x494>
 80009a2:	e72c      	b.n	80007fe <__aeabi_ddiv+0x2ee>
 80009a4:	464b      	mov	r3, r9
 80009a6:	3808      	subs	r0, #8
 80009a8:	4083      	lsls	r3, r0
 80009aa:	2500      	movs	r5, #0
 80009ac:	4698      	mov	r8, r3
 80009ae:	e732      	b.n	8000816 <__aeabi_ddiv+0x306>
 80009b0:	f000 ff84 	bl	80018bc <__clzsi2>
 80009b4:	0003      	movs	r3, r0
 80009b6:	001a      	movs	r2, r3
 80009b8:	3215      	adds	r2, #21
 80009ba:	3020      	adds	r0, #32
 80009bc:	2a1c      	cmp	r2, #28
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_ddiv+0x4b2>
 80009c0:	e700      	b.n	80007c4 <__aeabi_ddiv+0x2b4>
 80009c2:	4654      	mov	r4, sl
 80009c4:	3b08      	subs	r3, #8
 80009c6:	2200      	movs	r2, #0
 80009c8:	409c      	lsls	r4, r3
 80009ca:	e705      	b.n	80007d8 <__aeabi_ddiv+0x2c8>
 80009cc:	1936      	adds	r6, r6, r4
 80009ce:	3b01      	subs	r3, #1
 80009d0:	42b4      	cmp	r4, r6
 80009d2:	d900      	bls.n	80009d6 <__aeabi_ddiv+0x4c6>
 80009d4:	e6a6      	b.n	8000724 <__aeabi_ddiv+0x214>
 80009d6:	42b2      	cmp	r2, r6
 80009d8:	d800      	bhi.n	80009dc <__aeabi_ddiv+0x4cc>
 80009da:	e6a3      	b.n	8000724 <__aeabi_ddiv+0x214>
 80009dc:	1e83      	subs	r3, r0, #2
 80009de:	1936      	adds	r6, r6, r4
 80009e0:	e6a0      	b.n	8000724 <__aeabi_ddiv+0x214>
 80009e2:	1909      	adds	r1, r1, r4
 80009e4:	3d01      	subs	r5, #1
 80009e6:	428c      	cmp	r4, r1
 80009e8:	d900      	bls.n	80009ec <__aeabi_ddiv+0x4dc>
 80009ea:	e68d      	b.n	8000708 <__aeabi_ddiv+0x1f8>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	d800      	bhi.n	80009f2 <__aeabi_ddiv+0x4e2>
 80009f0:	e68a      	b.n	8000708 <__aeabi_ddiv+0x1f8>
 80009f2:	1e85      	subs	r5, r0, #2
 80009f4:	1909      	adds	r1, r1, r4
 80009f6:	e687      	b.n	8000708 <__aeabi_ddiv+0x1f8>
 80009f8:	230f      	movs	r3, #15
 80009fa:	402b      	ands	r3, r5
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d100      	bne.n	8000a02 <__aeabi_ddiv+0x4f2>
 8000a00:	e6bc      	b.n	800077c <__aeabi_ddiv+0x26c>
 8000a02:	2305      	movs	r3, #5
 8000a04:	425b      	negs	r3, r3
 8000a06:	42ab      	cmp	r3, r5
 8000a08:	419b      	sbcs	r3, r3
 8000a0a:	3504      	adds	r5, #4
 8000a0c:	425b      	negs	r3, r3
 8000a0e:	08ed      	lsrs	r5, r5, #3
 8000a10:	4498      	add	r8, r3
 8000a12:	e6b4      	b.n	800077e <__aeabi_ddiv+0x26e>
 8000a14:	42af      	cmp	r7, r5
 8000a16:	d900      	bls.n	8000a1a <__aeabi_ddiv+0x50a>
 8000a18:	e660      	b.n	80006dc <__aeabi_ddiv+0x1cc>
 8000a1a:	4282      	cmp	r2, r0
 8000a1c:	d804      	bhi.n	8000a28 <__aeabi_ddiv+0x518>
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_ddiv+0x512>
 8000a20:	e65c      	b.n	80006dc <__aeabi_ddiv+0x1cc>
 8000a22:	42ae      	cmp	r6, r5
 8000a24:	d800      	bhi.n	8000a28 <__aeabi_ddiv+0x518>
 8000a26:	e659      	b.n	80006dc <__aeabi_ddiv+0x1cc>
 8000a28:	2302      	movs	r3, #2
 8000a2a:	425b      	negs	r3, r3
 8000a2c:	469c      	mov	ip, r3
 8000a2e:	9b00      	ldr	r3, [sp, #0]
 8000a30:	44e0      	add	r8, ip
 8000a32:	469c      	mov	ip, r3
 8000a34:	4465      	add	r5, ip
 8000a36:	429d      	cmp	r5, r3
 8000a38:	419b      	sbcs	r3, r3
 8000a3a:	425b      	negs	r3, r3
 8000a3c:	191b      	adds	r3, r3, r4
 8000a3e:	18c0      	adds	r0, r0, r3
 8000a40:	e64d      	b.n	80006de <__aeabi_ddiv+0x1ce>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	d800      	bhi.n	8000a48 <__aeabi_ddiv+0x538>
 8000a46:	e60e      	b.n	8000666 <__aeabi_ddiv+0x156>
 8000a48:	1e83      	subs	r3, r0, #2
 8000a4a:	1909      	adds	r1, r1, r4
 8000a4c:	e60b      	b.n	8000666 <__aeabi_ddiv+0x156>
 8000a4e:	428a      	cmp	r2, r1
 8000a50:	d800      	bhi.n	8000a54 <__aeabi_ddiv+0x544>
 8000a52:	e5f4      	b.n	800063e <__aeabi_ddiv+0x12e>
 8000a54:	1e83      	subs	r3, r0, #2
 8000a56:	4698      	mov	r8, r3
 8000a58:	1909      	adds	r1, r1, r4
 8000a5a:	e5f0      	b.n	800063e <__aeabi_ddiv+0x12e>
 8000a5c:	4925      	ldr	r1, [pc, #148]	; (8000af4 <__aeabi_ddiv+0x5e4>)
 8000a5e:	0028      	movs	r0, r5
 8000a60:	4459      	add	r1, fp
 8000a62:	408d      	lsls	r5, r1
 8000a64:	4642      	mov	r2, r8
 8000a66:	408a      	lsls	r2, r1
 8000a68:	1e69      	subs	r1, r5, #1
 8000a6a:	418d      	sbcs	r5, r1
 8000a6c:	4641      	mov	r1, r8
 8000a6e:	40d8      	lsrs	r0, r3
 8000a70:	40d9      	lsrs	r1, r3
 8000a72:	4302      	orrs	r2, r0
 8000a74:	432a      	orrs	r2, r5
 8000a76:	000b      	movs	r3, r1
 8000a78:	0751      	lsls	r1, r2, #29
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_ddiv+0x56e>
 8000a7c:	e751      	b.n	8000922 <__aeabi_ddiv+0x412>
 8000a7e:	210f      	movs	r1, #15
 8000a80:	4011      	ands	r1, r2
 8000a82:	2904      	cmp	r1, #4
 8000a84:	d000      	beq.n	8000a88 <__aeabi_ddiv+0x578>
 8000a86:	e746      	b.n	8000916 <__aeabi_ddiv+0x406>
 8000a88:	e74b      	b.n	8000922 <__aeabi_ddiv+0x412>
 8000a8a:	0005      	movs	r5, r0
 8000a8c:	428e      	cmp	r6, r1
 8000a8e:	d000      	beq.n	8000a92 <__aeabi_ddiv+0x582>
 8000a90:	e66a      	b.n	8000768 <__aeabi_ddiv+0x258>
 8000a92:	9a00      	ldr	r2, [sp, #0]
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d000      	beq.n	8000a9a <__aeabi_ddiv+0x58a>
 8000a98:	e666      	b.n	8000768 <__aeabi_ddiv+0x258>
 8000a9a:	e667      	b.n	800076c <__aeabi_ddiv+0x25c>
 8000a9c:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <__aeabi_ddiv+0x5e8>)
 8000a9e:	445a      	add	r2, fp
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	dc00      	bgt.n	8000aa6 <__aeabi_ddiv+0x596>
 8000aa4:	e710      	b.n	80008c8 <__aeabi_ddiv+0x3b8>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	2500      	movs	r5, #0
 8000aaa:	4498      	add	r8, r3
 8000aac:	e667      	b.n	800077e <__aeabi_ddiv+0x26e>
 8000aae:	075d      	lsls	r5, r3, #29
 8000ab0:	025b      	lsls	r3, r3, #9
 8000ab2:	0b1c      	lsrs	r4, r3, #12
 8000ab4:	08d2      	lsrs	r2, r2, #3
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	4315      	orrs	r5, r2
 8000aba:	e580      	b.n	80005be <__aeabi_ddiv+0xae>
 8000abc:	9800      	ldr	r0, [sp, #0]
 8000abe:	3d02      	subs	r5, #2
 8000ac0:	0042      	lsls	r2, r0, #1
 8000ac2:	4282      	cmp	r2, r0
 8000ac4:	41bf      	sbcs	r7, r7
 8000ac6:	427f      	negs	r7, r7
 8000ac8:	193c      	adds	r4, r7, r4
 8000aca:	1936      	adds	r6, r6, r4
 8000acc:	9200      	str	r2, [sp, #0]
 8000ace:	e7dd      	b.n	8000a8c <__aeabi_ddiv+0x57c>
 8000ad0:	2480      	movs	r4, #128	; 0x80
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	0324      	lsls	r4, r4, #12
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	0324      	lsls	r4, r4, #12
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__aeabi_ddiv+0x5dc>)
 8000adc:	0b24      	lsrs	r4, r4, #12
 8000ade:	e56e      	b.n	80005be <__aeabi_ddiv+0xae>
 8000ae0:	9a00      	ldr	r2, [sp, #0]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d3ea      	bcc.n	8000abc <__aeabi_ddiv+0x5ac>
 8000ae6:	0005      	movs	r5, r0
 8000ae8:	e7d3      	b.n	8000a92 <__aeabi_ddiv+0x582>
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	000007ff 	.word	0x000007ff
 8000af0:	0000043e 	.word	0x0000043e
 8000af4:	0000041e 	.word	0x0000041e
 8000af8:	000003ff 	.word	0x000003ff

08000afc <__aeabi_dmul>:
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	4657      	mov	r7, sl
 8000b00:	464e      	mov	r6, r9
 8000b02:	4645      	mov	r5, r8
 8000b04:	46de      	mov	lr, fp
 8000b06:	b5e0      	push	{r5, r6, r7, lr}
 8000b08:	4698      	mov	r8, r3
 8000b0a:	030c      	lsls	r4, r1, #12
 8000b0c:	004b      	lsls	r3, r1, #1
 8000b0e:	0006      	movs	r6, r0
 8000b10:	4692      	mov	sl, r2
 8000b12:	b087      	sub	sp, #28
 8000b14:	0b24      	lsrs	r4, r4, #12
 8000b16:	0d5b      	lsrs	r3, r3, #21
 8000b18:	0fcf      	lsrs	r7, r1, #31
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dmul+0x24>
 8000b1e:	e15c      	b.n	8000dda <__aeabi_dmul+0x2de>
 8000b20:	4ad9      	ldr	r2, [pc, #868]	; (8000e88 <__aeabi_dmul+0x38c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dmul+0x2c>
 8000b26:	e175      	b.n	8000e14 <__aeabi_dmul+0x318>
 8000b28:	0f42      	lsrs	r2, r0, #29
 8000b2a:	00e4      	lsls	r4, r4, #3
 8000b2c:	4314      	orrs	r4, r2
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	0412      	lsls	r2, r2, #16
 8000b32:	4314      	orrs	r4, r2
 8000b34:	4ad5      	ldr	r2, [pc, #852]	; (8000e8c <__aeabi_dmul+0x390>)
 8000b36:	00c5      	lsls	r5, r0, #3
 8000b38:	4694      	mov	ip, r2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	4699      	mov	r9, r3
 8000b42:	469b      	mov	fp, r3
 8000b44:	4643      	mov	r3, r8
 8000b46:	4642      	mov	r2, r8
 8000b48:	031e      	lsls	r6, r3, #12
 8000b4a:	0fd2      	lsrs	r2, r2, #31
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4650      	mov	r0, sl
 8000b50:	4690      	mov	r8, r2
 8000b52:	0b36      	lsrs	r6, r6, #12
 8000b54:	0d5b      	lsrs	r3, r3, #21
 8000b56:	d100      	bne.n	8000b5a <__aeabi_dmul+0x5e>
 8000b58:	e120      	b.n	8000d9c <__aeabi_dmul+0x2a0>
 8000b5a:	4acb      	ldr	r2, [pc, #812]	; (8000e88 <__aeabi_dmul+0x38c>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_dmul+0x66>
 8000b60:	e162      	b.n	8000e28 <__aeabi_dmul+0x32c>
 8000b62:	49ca      	ldr	r1, [pc, #808]	; (8000e8c <__aeabi_dmul+0x390>)
 8000b64:	0f42      	lsrs	r2, r0, #29
 8000b66:	468c      	mov	ip, r1
 8000b68:	9900      	ldr	r1, [sp, #0]
 8000b6a:	4463      	add	r3, ip
 8000b6c:	00f6      	lsls	r6, r6, #3
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4316      	orrs	r6, r2
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	449c      	add	ip, r3
 8000b76:	0412      	lsls	r2, r2, #16
 8000b78:	4663      	mov	r3, ip
 8000b7a:	4316      	orrs	r6, r2
 8000b7c:	00c2      	lsls	r2, r0, #3
 8000b7e:	2000      	movs	r0, #0
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	9900      	ldr	r1, [sp, #0]
 8000b84:	4643      	mov	r3, r8
 8000b86:	3101      	adds	r1, #1
 8000b88:	468c      	mov	ip, r1
 8000b8a:	4649      	mov	r1, r9
 8000b8c:	407b      	eors	r3, r7
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	290f      	cmp	r1, #15
 8000b92:	d826      	bhi.n	8000be2 <__aeabi_dmul+0xe6>
 8000b94:	4bbe      	ldr	r3, [pc, #760]	; (8000e90 <__aeabi_dmul+0x394>)
 8000b96:	0089      	lsls	r1, r1, #2
 8000b98:	5859      	ldr	r1, [r3, r1]
 8000b9a:	468f      	mov	pc, r1
 8000b9c:	4643      	mov	r3, r8
 8000b9e:	9301      	str	r3, [sp, #4]
 8000ba0:	0034      	movs	r4, r6
 8000ba2:	0015      	movs	r5, r2
 8000ba4:	4683      	mov	fp, r0
 8000ba6:	465b      	mov	r3, fp
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d016      	beq.n	8000bda <__aeabi_dmul+0xde>
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dmul+0xb6>
 8000bb0:	e203      	b.n	8000fba <__aeabi_dmul+0x4be>
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d000      	beq.n	8000bb8 <__aeabi_dmul+0xbc>
 8000bb6:	e0cd      	b.n	8000d54 <__aeabi_dmul+0x258>
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2400      	movs	r4, #0
 8000bbc:	2500      	movs	r5, #0
 8000bbe:	9b01      	ldr	r3, [sp, #4]
 8000bc0:	0512      	lsls	r2, r2, #20
 8000bc2:	4322      	orrs	r2, r4
 8000bc4:	07db      	lsls	r3, r3, #31
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	0028      	movs	r0, r5
 8000bca:	0011      	movs	r1, r2
 8000bcc:	b007      	add	sp, #28
 8000bce:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd0:	46bb      	mov	fp, r7
 8000bd2:	46b2      	mov	sl, r6
 8000bd4:	46a9      	mov	r9, r5
 8000bd6:	46a0      	mov	r8, r4
 8000bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bda:	2400      	movs	r4, #0
 8000bdc:	2500      	movs	r5, #0
 8000bde:	4aaa      	ldr	r2, [pc, #680]	; (8000e88 <__aeabi_dmul+0x38c>)
 8000be0:	e7ed      	b.n	8000bbe <__aeabi_dmul+0xc2>
 8000be2:	0c28      	lsrs	r0, r5, #16
 8000be4:	042d      	lsls	r5, r5, #16
 8000be6:	0c2d      	lsrs	r5, r5, #16
 8000be8:	002b      	movs	r3, r5
 8000bea:	0c11      	lsrs	r1, r2, #16
 8000bec:	0412      	lsls	r2, r2, #16
 8000bee:	0c12      	lsrs	r2, r2, #16
 8000bf0:	4353      	muls	r3, r2
 8000bf2:	4698      	mov	r8, r3
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	002f      	movs	r7, r5
 8000bf8:	4343      	muls	r3, r0
 8000bfa:	4699      	mov	r9, r3
 8000bfc:	434f      	muls	r7, r1
 8000bfe:	444f      	add	r7, r9
 8000c00:	46bb      	mov	fp, r7
 8000c02:	4647      	mov	r7, r8
 8000c04:	000b      	movs	r3, r1
 8000c06:	0c3f      	lsrs	r7, r7, #16
 8000c08:	46ba      	mov	sl, r7
 8000c0a:	4343      	muls	r3, r0
 8000c0c:	44da      	add	sl, fp
 8000c0e:	9302      	str	r3, [sp, #8]
 8000c10:	45d1      	cmp	r9, sl
 8000c12:	d904      	bls.n	8000c1e <__aeabi_dmul+0x122>
 8000c14:	2780      	movs	r7, #128	; 0x80
 8000c16:	027f      	lsls	r7, r7, #9
 8000c18:	46b9      	mov	r9, r7
 8000c1a:	444b      	add	r3, r9
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	4653      	mov	r3, sl
 8000c20:	0c1b      	lsrs	r3, r3, #16
 8000c22:	469b      	mov	fp, r3
 8000c24:	4653      	mov	r3, sl
 8000c26:	041f      	lsls	r7, r3, #16
 8000c28:	4643      	mov	r3, r8
 8000c2a:	041b      	lsls	r3, r3, #16
 8000c2c:	0c1b      	lsrs	r3, r3, #16
 8000c2e:	4698      	mov	r8, r3
 8000c30:	003b      	movs	r3, r7
 8000c32:	4443      	add	r3, r8
 8000c34:	9304      	str	r3, [sp, #16]
 8000c36:	0c33      	lsrs	r3, r6, #16
 8000c38:	0436      	lsls	r6, r6, #16
 8000c3a:	0c36      	lsrs	r6, r6, #16
 8000c3c:	4698      	mov	r8, r3
 8000c3e:	0033      	movs	r3, r6
 8000c40:	4343      	muls	r3, r0
 8000c42:	4699      	mov	r9, r3
 8000c44:	4643      	mov	r3, r8
 8000c46:	4343      	muls	r3, r0
 8000c48:	002f      	movs	r7, r5
 8000c4a:	469a      	mov	sl, r3
 8000c4c:	4643      	mov	r3, r8
 8000c4e:	4377      	muls	r7, r6
 8000c50:	435d      	muls	r5, r3
 8000c52:	0c38      	lsrs	r0, r7, #16
 8000c54:	444d      	add	r5, r9
 8000c56:	1945      	adds	r5, r0, r5
 8000c58:	45a9      	cmp	r9, r5
 8000c5a:	d903      	bls.n	8000c64 <__aeabi_dmul+0x168>
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	025b      	lsls	r3, r3, #9
 8000c60:	4699      	mov	r9, r3
 8000c62:	44ca      	add	sl, r9
 8000c64:	043f      	lsls	r7, r7, #16
 8000c66:	0c28      	lsrs	r0, r5, #16
 8000c68:	0c3f      	lsrs	r7, r7, #16
 8000c6a:	042d      	lsls	r5, r5, #16
 8000c6c:	19ed      	adds	r5, r5, r7
 8000c6e:	0c27      	lsrs	r7, r4, #16
 8000c70:	0424      	lsls	r4, r4, #16
 8000c72:	0c24      	lsrs	r4, r4, #16
 8000c74:	0003      	movs	r3, r0
 8000c76:	0020      	movs	r0, r4
 8000c78:	4350      	muls	r0, r2
 8000c7a:	437a      	muls	r2, r7
 8000c7c:	4691      	mov	r9, r2
 8000c7e:	003a      	movs	r2, r7
 8000c80:	4453      	add	r3, sl
 8000c82:	9305      	str	r3, [sp, #20]
 8000c84:	0c03      	lsrs	r3, r0, #16
 8000c86:	469a      	mov	sl, r3
 8000c88:	434a      	muls	r2, r1
 8000c8a:	4361      	muls	r1, r4
 8000c8c:	4449      	add	r1, r9
 8000c8e:	4451      	add	r1, sl
 8000c90:	44ab      	add	fp, r5
 8000c92:	4589      	cmp	r9, r1
 8000c94:	d903      	bls.n	8000c9e <__aeabi_dmul+0x1a2>
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	025b      	lsls	r3, r3, #9
 8000c9a:	4699      	mov	r9, r3
 8000c9c:	444a      	add	r2, r9
 8000c9e:	0400      	lsls	r0, r0, #16
 8000ca0:	0c0b      	lsrs	r3, r1, #16
 8000ca2:	0c00      	lsrs	r0, r0, #16
 8000ca4:	0409      	lsls	r1, r1, #16
 8000ca6:	1809      	adds	r1, r1, r0
 8000ca8:	0020      	movs	r0, r4
 8000caa:	4699      	mov	r9, r3
 8000cac:	4643      	mov	r3, r8
 8000cae:	4370      	muls	r0, r6
 8000cb0:	435c      	muls	r4, r3
 8000cb2:	437e      	muls	r6, r7
 8000cb4:	435f      	muls	r7, r3
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	4698      	mov	r8, r3
 8000cba:	19a4      	adds	r4, r4, r6
 8000cbc:	4444      	add	r4, r8
 8000cbe:	444a      	add	r2, r9
 8000cc0:	9703      	str	r7, [sp, #12]
 8000cc2:	42a6      	cmp	r6, r4
 8000cc4:	d904      	bls.n	8000cd0 <__aeabi_dmul+0x1d4>
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	025b      	lsls	r3, r3, #9
 8000cca:	4698      	mov	r8, r3
 8000ccc:	4447      	add	r7, r8
 8000cce:	9703      	str	r7, [sp, #12]
 8000cd0:	0423      	lsls	r3, r4, #16
 8000cd2:	9e02      	ldr	r6, [sp, #8]
 8000cd4:	469a      	mov	sl, r3
 8000cd6:	9b05      	ldr	r3, [sp, #20]
 8000cd8:	445e      	add	r6, fp
 8000cda:	4698      	mov	r8, r3
 8000cdc:	42ae      	cmp	r6, r5
 8000cde:	41ad      	sbcs	r5, r5
 8000ce0:	1876      	adds	r6, r6, r1
 8000ce2:	428e      	cmp	r6, r1
 8000ce4:	4189      	sbcs	r1, r1
 8000ce6:	0400      	lsls	r0, r0, #16
 8000ce8:	0c00      	lsrs	r0, r0, #16
 8000cea:	4450      	add	r0, sl
 8000cec:	4440      	add	r0, r8
 8000cee:	426d      	negs	r5, r5
 8000cf0:	1947      	adds	r7, r0, r5
 8000cf2:	46b8      	mov	r8, r7
 8000cf4:	4693      	mov	fp, r2
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	4689      	mov	r9, r1
 8000cfa:	44c3      	add	fp, r8
 8000cfc:	44d9      	add	r9, fp
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	4180      	sbcs	r0, r0
 8000d02:	45a8      	cmp	r8, r5
 8000d04:	41ad      	sbcs	r5, r5
 8000d06:	4593      	cmp	fp, r2
 8000d08:	4192      	sbcs	r2, r2
 8000d0a:	4589      	cmp	r9, r1
 8000d0c:	4189      	sbcs	r1, r1
 8000d0e:	426d      	negs	r5, r5
 8000d10:	4240      	negs	r0, r0
 8000d12:	4328      	orrs	r0, r5
 8000d14:	0c24      	lsrs	r4, r4, #16
 8000d16:	4252      	negs	r2, r2
 8000d18:	4249      	negs	r1, r1
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	9b03      	ldr	r3, [sp, #12]
 8000d1e:	1900      	adds	r0, r0, r4
 8000d20:	1880      	adds	r0, r0, r2
 8000d22:	18c7      	adds	r7, r0, r3
 8000d24:	464b      	mov	r3, r9
 8000d26:	0ddc      	lsrs	r4, r3, #23
 8000d28:	9b04      	ldr	r3, [sp, #16]
 8000d2a:	0275      	lsls	r5, r6, #9
 8000d2c:	431d      	orrs	r5, r3
 8000d2e:	1e6a      	subs	r2, r5, #1
 8000d30:	4195      	sbcs	r5, r2
 8000d32:	464b      	mov	r3, r9
 8000d34:	0df6      	lsrs	r6, r6, #23
 8000d36:	027f      	lsls	r7, r7, #9
 8000d38:	4335      	orrs	r5, r6
 8000d3a:	025a      	lsls	r2, r3, #9
 8000d3c:	433c      	orrs	r4, r7
 8000d3e:	4315      	orrs	r5, r2
 8000d40:	01fb      	lsls	r3, r7, #7
 8000d42:	d400      	bmi.n	8000d46 <__aeabi_dmul+0x24a>
 8000d44:	e11c      	b.n	8000f80 <__aeabi_dmul+0x484>
 8000d46:	2101      	movs	r1, #1
 8000d48:	086a      	lsrs	r2, r5, #1
 8000d4a:	400d      	ands	r5, r1
 8000d4c:	4315      	orrs	r5, r2
 8000d4e:	07e2      	lsls	r2, r4, #31
 8000d50:	4315      	orrs	r5, r2
 8000d52:	0864      	lsrs	r4, r4, #1
 8000d54:	494f      	ldr	r1, [pc, #316]	; (8000e94 <__aeabi_dmul+0x398>)
 8000d56:	4461      	add	r1, ip
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	dc00      	bgt.n	8000d5e <__aeabi_dmul+0x262>
 8000d5c:	e0b0      	b.n	8000ec0 <__aeabi_dmul+0x3c4>
 8000d5e:	076b      	lsls	r3, r5, #29
 8000d60:	d009      	beq.n	8000d76 <__aeabi_dmul+0x27a>
 8000d62:	220f      	movs	r2, #15
 8000d64:	402a      	ands	r2, r5
 8000d66:	2a04      	cmp	r2, #4
 8000d68:	d005      	beq.n	8000d76 <__aeabi_dmul+0x27a>
 8000d6a:	1d2a      	adds	r2, r5, #4
 8000d6c:	42aa      	cmp	r2, r5
 8000d6e:	41ad      	sbcs	r5, r5
 8000d70:	426d      	negs	r5, r5
 8000d72:	1964      	adds	r4, r4, r5
 8000d74:	0015      	movs	r5, r2
 8000d76:	01e3      	lsls	r3, r4, #7
 8000d78:	d504      	bpl.n	8000d84 <__aeabi_dmul+0x288>
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	4a46      	ldr	r2, [pc, #280]	; (8000e98 <__aeabi_dmul+0x39c>)
 8000d7e:	00c9      	lsls	r1, r1, #3
 8000d80:	4014      	ands	r4, r2
 8000d82:	4461      	add	r1, ip
 8000d84:	4a45      	ldr	r2, [pc, #276]	; (8000e9c <__aeabi_dmul+0x3a0>)
 8000d86:	4291      	cmp	r1, r2
 8000d88:	dd00      	ble.n	8000d8c <__aeabi_dmul+0x290>
 8000d8a:	e726      	b.n	8000bda <__aeabi_dmul+0xde>
 8000d8c:	0762      	lsls	r2, r4, #29
 8000d8e:	08ed      	lsrs	r5, r5, #3
 8000d90:	0264      	lsls	r4, r4, #9
 8000d92:	0549      	lsls	r1, r1, #21
 8000d94:	4315      	orrs	r5, r2
 8000d96:	0b24      	lsrs	r4, r4, #12
 8000d98:	0d4a      	lsrs	r2, r1, #21
 8000d9a:	e710      	b.n	8000bbe <__aeabi_dmul+0xc2>
 8000d9c:	4652      	mov	r2, sl
 8000d9e:	4332      	orrs	r2, r6
 8000da0:	d100      	bne.n	8000da4 <__aeabi_dmul+0x2a8>
 8000da2:	e07f      	b.n	8000ea4 <__aeabi_dmul+0x3a8>
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d100      	bne.n	8000daa <__aeabi_dmul+0x2ae>
 8000da8:	e0dc      	b.n	8000f64 <__aeabi_dmul+0x468>
 8000daa:	0030      	movs	r0, r6
 8000dac:	f000 fd86 	bl	80018bc <__clzsi2>
 8000db0:	0002      	movs	r2, r0
 8000db2:	3a0b      	subs	r2, #11
 8000db4:	231d      	movs	r3, #29
 8000db6:	0001      	movs	r1, r0
 8000db8:	1a9b      	subs	r3, r3, r2
 8000dba:	4652      	mov	r2, sl
 8000dbc:	3908      	subs	r1, #8
 8000dbe:	40da      	lsrs	r2, r3
 8000dc0:	408e      	lsls	r6, r1
 8000dc2:	4316      	orrs	r6, r2
 8000dc4:	4652      	mov	r2, sl
 8000dc6:	408a      	lsls	r2, r1
 8000dc8:	9b00      	ldr	r3, [sp, #0]
 8000dca:	4935      	ldr	r1, [pc, #212]	; (8000ea0 <__aeabi_dmul+0x3a4>)
 8000dcc:	1a18      	subs	r0, r3, r0
 8000dce:	0003      	movs	r3, r0
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	4463      	add	r3, ip
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	e6d3      	b.n	8000b82 <__aeabi_dmul+0x86>
 8000dda:	0025      	movs	r5, r4
 8000ddc:	4305      	orrs	r5, r0
 8000dde:	d04a      	beq.n	8000e76 <__aeabi_dmul+0x37a>
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dmul+0x2ea>
 8000de4:	e0b0      	b.n	8000f48 <__aeabi_dmul+0x44c>
 8000de6:	0020      	movs	r0, r4
 8000de8:	f000 fd68 	bl	80018bc <__clzsi2>
 8000dec:	0001      	movs	r1, r0
 8000dee:	0002      	movs	r2, r0
 8000df0:	390b      	subs	r1, #11
 8000df2:	231d      	movs	r3, #29
 8000df4:	0010      	movs	r0, r2
 8000df6:	1a5b      	subs	r3, r3, r1
 8000df8:	0031      	movs	r1, r6
 8000dfa:	0035      	movs	r5, r6
 8000dfc:	3808      	subs	r0, #8
 8000dfe:	4084      	lsls	r4, r0
 8000e00:	40d9      	lsrs	r1, r3
 8000e02:	4085      	lsls	r5, r0
 8000e04:	430c      	orrs	r4, r1
 8000e06:	4826      	ldr	r0, [pc, #152]	; (8000ea0 <__aeabi_dmul+0x3a4>)
 8000e08:	1a83      	subs	r3, r0, r2
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	4699      	mov	r9, r3
 8000e10:	469b      	mov	fp, r3
 8000e12:	e697      	b.n	8000b44 <__aeabi_dmul+0x48>
 8000e14:	0005      	movs	r5, r0
 8000e16:	4325      	orrs	r5, r4
 8000e18:	d126      	bne.n	8000e68 <__aeabi_dmul+0x36c>
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2302      	movs	r3, #2
 8000e20:	2400      	movs	r4, #0
 8000e22:	4691      	mov	r9, r2
 8000e24:	469b      	mov	fp, r3
 8000e26:	e68d      	b.n	8000b44 <__aeabi_dmul+0x48>
 8000e28:	4652      	mov	r2, sl
 8000e2a:	9b00      	ldr	r3, [sp, #0]
 8000e2c:	4332      	orrs	r2, r6
 8000e2e:	d110      	bne.n	8000e52 <__aeabi_dmul+0x356>
 8000e30:	4915      	ldr	r1, [pc, #84]	; (8000e88 <__aeabi_dmul+0x38c>)
 8000e32:	2600      	movs	r6, #0
 8000e34:	468c      	mov	ip, r1
 8000e36:	4463      	add	r3, ip
 8000e38:	4649      	mov	r1, r9
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	4319      	orrs	r1, r3
 8000e40:	4689      	mov	r9, r1
 8000e42:	2002      	movs	r0, #2
 8000e44:	e69d      	b.n	8000b82 <__aeabi_dmul+0x86>
 8000e46:	465b      	mov	r3, fp
 8000e48:	9701      	str	r7, [sp, #4]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_dmul+0x354>
 8000e4e:	e6ad      	b.n	8000bac <__aeabi_dmul+0xb0>
 8000e50:	e6c3      	b.n	8000bda <__aeabi_dmul+0xde>
 8000e52:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <__aeabi_dmul+0x38c>)
 8000e54:	2003      	movs	r0, #3
 8000e56:	4694      	mov	ip, r2
 8000e58:	4463      	add	r3, ip
 8000e5a:	464a      	mov	r2, r9
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2303      	movs	r3, #3
 8000e60:	431a      	orrs	r2, r3
 8000e62:	4691      	mov	r9, r2
 8000e64:	4652      	mov	r2, sl
 8000e66:	e68c      	b.n	8000b82 <__aeabi_dmul+0x86>
 8000e68:	220c      	movs	r2, #12
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	0005      	movs	r5, r0
 8000e70:	4691      	mov	r9, r2
 8000e72:	469b      	mov	fp, r3
 8000e74:	e666      	b.n	8000b44 <__aeabi_dmul+0x48>
 8000e76:	2304      	movs	r3, #4
 8000e78:	4699      	mov	r9, r3
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	2400      	movs	r4, #0
 8000e82:	469b      	mov	fp, r3
 8000e84:	e65e      	b.n	8000b44 <__aeabi_dmul+0x48>
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	000007ff 	.word	0x000007ff
 8000e8c:	fffffc01 	.word	0xfffffc01
 8000e90:	0800475c 	.word	0x0800475c
 8000e94:	000003ff 	.word	0x000003ff
 8000e98:	feffffff 	.word	0xfeffffff
 8000e9c:	000007fe 	.word	0x000007fe
 8000ea0:	fffffc0d 	.word	0xfffffc0d
 8000ea4:	4649      	mov	r1, r9
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	4319      	orrs	r1, r3
 8000eaa:	4689      	mov	r9, r1
 8000eac:	2600      	movs	r6, #0
 8000eae:	2001      	movs	r0, #1
 8000eb0:	e667      	b.n	8000b82 <__aeabi_dmul+0x86>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2480      	movs	r4, #128	; 0x80
 8000eb6:	2500      	movs	r5, #0
 8000eb8:	4a43      	ldr	r2, [pc, #268]	; (8000fc8 <__aeabi_dmul+0x4cc>)
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	0324      	lsls	r4, r4, #12
 8000ebe:	e67e      	b.n	8000bbe <__aeabi_dmul+0xc2>
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	1a40      	subs	r0, r0, r1
 8000ec4:	2838      	cmp	r0, #56	; 0x38
 8000ec6:	dd00      	ble.n	8000eca <__aeabi_dmul+0x3ce>
 8000ec8:	e676      	b.n	8000bb8 <__aeabi_dmul+0xbc>
 8000eca:	281f      	cmp	r0, #31
 8000ecc:	dd5b      	ble.n	8000f86 <__aeabi_dmul+0x48a>
 8000ece:	221f      	movs	r2, #31
 8000ed0:	0023      	movs	r3, r4
 8000ed2:	4252      	negs	r2, r2
 8000ed4:	1a51      	subs	r1, r2, r1
 8000ed6:	40cb      	lsrs	r3, r1
 8000ed8:	0019      	movs	r1, r3
 8000eda:	2820      	cmp	r0, #32
 8000edc:	d003      	beq.n	8000ee6 <__aeabi_dmul+0x3ea>
 8000ede:	4a3b      	ldr	r2, [pc, #236]	; (8000fcc <__aeabi_dmul+0x4d0>)
 8000ee0:	4462      	add	r2, ip
 8000ee2:	4094      	lsls	r4, r2
 8000ee4:	4325      	orrs	r5, r4
 8000ee6:	1e6a      	subs	r2, r5, #1
 8000ee8:	4195      	sbcs	r5, r2
 8000eea:	002a      	movs	r2, r5
 8000eec:	430a      	orrs	r2, r1
 8000eee:	2107      	movs	r1, #7
 8000ef0:	000d      	movs	r5, r1
 8000ef2:	2400      	movs	r4, #0
 8000ef4:	4015      	ands	r5, r2
 8000ef6:	4211      	tst	r1, r2
 8000ef8:	d05b      	beq.n	8000fb2 <__aeabi_dmul+0x4b6>
 8000efa:	210f      	movs	r1, #15
 8000efc:	2400      	movs	r4, #0
 8000efe:	4011      	ands	r1, r2
 8000f00:	2904      	cmp	r1, #4
 8000f02:	d053      	beq.n	8000fac <__aeabi_dmul+0x4b0>
 8000f04:	1d11      	adds	r1, r2, #4
 8000f06:	4291      	cmp	r1, r2
 8000f08:	4192      	sbcs	r2, r2
 8000f0a:	4252      	negs	r2, r2
 8000f0c:	18a4      	adds	r4, r4, r2
 8000f0e:	000a      	movs	r2, r1
 8000f10:	0223      	lsls	r3, r4, #8
 8000f12:	d54b      	bpl.n	8000fac <__aeabi_dmul+0x4b0>
 8000f14:	2201      	movs	r2, #1
 8000f16:	2400      	movs	r4, #0
 8000f18:	2500      	movs	r5, #0
 8000f1a:	e650      	b.n	8000bbe <__aeabi_dmul+0xc2>
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	031b      	lsls	r3, r3, #12
 8000f20:	421c      	tst	r4, r3
 8000f22:	d009      	beq.n	8000f38 <__aeabi_dmul+0x43c>
 8000f24:	421e      	tst	r6, r3
 8000f26:	d107      	bne.n	8000f38 <__aeabi_dmul+0x43c>
 8000f28:	4333      	orrs	r3, r6
 8000f2a:	031c      	lsls	r4, r3, #12
 8000f2c:	4643      	mov	r3, r8
 8000f2e:	0015      	movs	r5, r2
 8000f30:	0b24      	lsrs	r4, r4, #12
 8000f32:	4a25      	ldr	r2, [pc, #148]	; (8000fc8 <__aeabi_dmul+0x4cc>)
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	e642      	b.n	8000bbe <__aeabi_dmul+0xc2>
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	0312      	lsls	r2, r2, #12
 8000f3c:	4314      	orrs	r4, r2
 8000f3e:	0324      	lsls	r4, r4, #12
 8000f40:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <__aeabi_dmul+0x4cc>)
 8000f42:	0b24      	lsrs	r4, r4, #12
 8000f44:	9701      	str	r7, [sp, #4]
 8000f46:	e63a      	b.n	8000bbe <__aeabi_dmul+0xc2>
 8000f48:	f000 fcb8 	bl	80018bc <__clzsi2>
 8000f4c:	0001      	movs	r1, r0
 8000f4e:	0002      	movs	r2, r0
 8000f50:	3115      	adds	r1, #21
 8000f52:	3220      	adds	r2, #32
 8000f54:	291c      	cmp	r1, #28
 8000f56:	dc00      	bgt.n	8000f5a <__aeabi_dmul+0x45e>
 8000f58:	e74b      	b.n	8000df2 <__aeabi_dmul+0x2f6>
 8000f5a:	0034      	movs	r4, r6
 8000f5c:	3808      	subs	r0, #8
 8000f5e:	2500      	movs	r5, #0
 8000f60:	4084      	lsls	r4, r0
 8000f62:	e750      	b.n	8000e06 <__aeabi_dmul+0x30a>
 8000f64:	f000 fcaa 	bl	80018bc <__clzsi2>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	3215      	adds	r2, #21
 8000f6e:	3020      	adds	r0, #32
 8000f70:	2a1c      	cmp	r2, #28
 8000f72:	dc00      	bgt.n	8000f76 <__aeabi_dmul+0x47a>
 8000f74:	e71e      	b.n	8000db4 <__aeabi_dmul+0x2b8>
 8000f76:	4656      	mov	r6, sl
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	409e      	lsls	r6, r3
 8000f7e:	e723      	b.n	8000dc8 <__aeabi_dmul+0x2cc>
 8000f80:	9b00      	ldr	r3, [sp, #0]
 8000f82:	469c      	mov	ip, r3
 8000f84:	e6e6      	b.n	8000d54 <__aeabi_dmul+0x258>
 8000f86:	4912      	ldr	r1, [pc, #72]	; (8000fd0 <__aeabi_dmul+0x4d4>)
 8000f88:	0022      	movs	r2, r4
 8000f8a:	4461      	add	r1, ip
 8000f8c:	002e      	movs	r6, r5
 8000f8e:	408d      	lsls	r5, r1
 8000f90:	408a      	lsls	r2, r1
 8000f92:	40c6      	lsrs	r6, r0
 8000f94:	1e69      	subs	r1, r5, #1
 8000f96:	418d      	sbcs	r5, r1
 8000f98:	4332      	orrs	r2, r6
 8000f9a:	432a      	orrs	r2, r5
 8000f9c:	40c4      	lsrs	r4, r0
 8000f9e:	0753      	lsls	r3, r2, #29
 8000fa0:	d0b6      	beq.n	8000f10 <__aeabi_dmul+0x414>
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	4011      	ands	r1, r2
 8000fa6:	2904      	cmp	r1, #4
 8000fa8:	d1ac      	bne.n	8000f04 <__aeabi_dmul+0x408>
 8000faa:	e7b1      	b.n	8000f10 <__aeabi_dmul+0x414>
 8000fac:	0765      	lsls	r5, r4, #29
 8000fae:	0264      	lsls	r4, r4, #9
 8000fb0:	0b24      	lsrs	r4, r4, #12
 8000fb2:	08d2      	lsrs	r2, r2, #3
 8000fb4:	4315      	orrs	r5, r2
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	e601      	b.n	8000bbe <__aeabi_dmul+0xc2>
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	0312      	lsls	r2, r2, #12
 8000fbe:	4314      	orrs	r4, r2
 8000fc0:	0324      	lsls	r4, r4, #12
 8000fc2:	4a01      	ldr	r2, [pc, #4]	; (8000fc8 <__aeabi_dmul+0x4cc>)
 8000fc4:	0b24      	lsrs	r4, r4, #12
 8000fc6:	e5fa      	b.n	8000bbe <__aeabi_dmul+0xc2>
 8000fc8:	000007ff 	.word	0x000007ff
 8000fcc:	0000043e 	.word	0x0000043e
 8000fd0:	0000041e 	.word	0x0000041e

08000fd4 <__aeabi_dsub>:
 8000fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd6:	4657      	mov	r7, sl
 8000fd8:	464e      	mov	r6, r9
 8000fda:	4645      	mov	r5, r8
 8000fdc:	46de      	mov	lr, fp
 8000fde:	b5e0      	push	{r5, r6, r7, lr}
 8000fe0:	001e      	movs	r6, r3
 8000fe2:	0017      	movs	r7, r2
 8000fe4:	004a      	lsls	r2, r1, #1
 8000fe6:	030b      	lsls	r3, r1, #12
 8000fe8:	0d52      	lsrs	r2, r2, #21
 8000fea:	0a5b      	lsrs	r3, r3, #9
 8000fec:	4690      	mov	r8, r2
 8000fee:	0f42      	lsrs	r2, r0, #29
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	0fcd      	lsrs	r5, r1, #31
 8000ff4:	4ccd      	ldr	r4, [pc, #820]	; (800132c <__aeabi_dsub+0x358>)
 8000ff6:	0331      	lsls	r1, r6, #12
 8000ff8:	00c3      	lsls	r3, r0, #3
 8000ffa:	4694      	mov	ip, r2
 8000ffc:	0070      	lsls	r0, r6, #1
 8000ffe:	0f7a      	lsrs	r2, r7, #29
 8001000:	0a49      	lsrs	r1, r1, #9
 8001002:	00ff      	lsls	r7, r7, #3
 8001004:	469a      	mov	sl, r3
 8001006:	46b9      	mov	r9, r7
 8001008:	0d40      	lsrs	r0, r0, #21
 800100a:	0ff6      	lsrs	r6, r6, #31
 800100c:	4311      	orrs	r1, r2
 800100e:	42a0      	cmp	r0, r4
 8001010:	d100      	bne.n	8001014 <__aeabi_dsub+0x40>
 8001012:	e0b1      	b.n	8001178 <__aeabi_dsub+0x1a4>
 8001014:	2201      	movs	r2, #1
 8001016:	4056      	eors	r6, r2
 8001018:	46b3      	mov	fp, r6
 800101a:	42b5      	cmp	r5, r6
 800101c:	d100      	bne.n	8001020 <__aeabi_dsub+0x4c>
 800101e:	e088      	b.n	8001132 <__aeabi_dsub+0x15e>
 8001020:	4642      	mov	r2, r8
 8001022:	1a12      	subs	r2, r2, r0
 8001024:	2a00      	cmp	r2, #0
 8001026:	dc00      	bgt.n	800102a <__aeabi_dsub+0x56>
 8001028:	e0ae      	b.n	8001188 <__aeabi_dsub+0x1b4>
 800102a:	2800      	cmp	r0, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_dsub+0x5c>
 800102e:	e0c1      	b.n	80011b4 <__aeabi_dsub+0x1e0>
 8001030:	48be      	ldr	r0, [pc, #760]	; (800132c <__aeabi_dsub+0x358>)
 8001032:	4580      	cmp	r8, r0
 8001034:	d100      	bne.n	8001038 <__aeabi_dsub+0x64>
 8001036:	e151      	b.n	80012dc <__aeabi_dsub+0x308>
 8001038:	2080      	movs	r0, #128	; 0x80
 800103a:	0400      	lsls	r0, r0, #16
 800103c:	4301      	orrs	r1, r0
 800103e:	2a38      	cmp	r2, #56	; 0x38
 8001040:	dd00      	ble.n	8001044 <__aeabi_dsub+0x70>
 8001042:	e17b      	b.n	800133c <__aeabi_dsub+0x368>
 8001044:	2a1f      	cmp	r2, #31
 8001046:	dd00      	ble.n	800104a <__aeabi_dsub+0x76>
 8001048:	e1ee      	b.n	8001428 <__aeabi_dsub+0x454>
 800104a:	2020      	movs	r0, #32
 800104c:	003e      	movs	r6, r7
 800104e:	1a80      	subs	r0, r0, r2
 8001050:	000c      	movs	r4, r1
 8001052:	40d6      	lsrs	r6, r2
 8001054:	40d1      	lsrs	r1, r2
 8001056:	4087      	lsls	r7, r0
 8001058:	4662      	mov	r2, ip
 800105a:	4084      	lsls	r4, r0
 800105c:	1a52      	subs	r2, r2, r1
 800105e:	1e78      	subs	r0, r7, #1
 8001060:	4187      	sbcs	r7, r0
 8001062:	4694      	mov	ip, r2
 8001064:	4334      	orrs	r4, r6
 8001066:	4327      	orrs	r7, r4
 8001068:	1bdc      	subs	r4, r3, r7
 800106a:	42a3      	cmp	r3, r4
 800106c:	419b      	sbcs	r3, r3
 800106e:	4662      	mov	r2, ip
 8001070:	425b      	negs	r3, r3
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	4699      	mov	r9, r3
 8001076:	464b      	mov	r3, r9
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	d400      	bmi.n	800107e <__aeabi_dsub+0xaa>
 800107c:	e118      	b.n	80012b0 <__aeabi_dsub+0x2dc>
 800107e:	464b      	mov	r3, r9
 8001080:	0258      	lsls	r0, r3, #9
 8001082:	0a43      	lsrs	r3, r0, #9
 8001084:	4699      	mov	r9, r3
 8001086:	464b      	mov	r3, r9
 8001088:	2b00      	cmp	r3, #0
 800108a:	d100      	bne.n	800108e <__aeabi_dsub+0xba>
 800108c:	e137      	b.n	80012fe <__aeabi_dsub+0x32a>
 800108e:	4648      	mov	r0, r9
 8001090:	f000 fc14 	bl	80018bc <__clzsi2>
 8001094:	0001      	movs	r1, r0
 8001096:	3908      	subs	r1, #8
 8001098:	2320      	movs	r3, #32
 800109a:	0022      	movs	r2, r4
 800109c:	4648      	mov	r0, r9
 800109e:	1a5b      	subs	r3, r3, r1
 80010a0:	40da      	lsrs	r2, r3
 80010a2:	4088      	lsls	r0, r1
 80010a4:	408c      	lsls	r4, r1
 80010a6:	4643      	mov	r3, r8
 80010a8:	4310      	orrs	r0, r2
 80010aa:	4588      	cmp	r8, r1
 80010ac:	dd00      	ble.n	80010b0 <__aeabi_dsub+0xdc>
 80010ae:	e136      	b.n	800131e <__aeabi_dsub+0x34a>
 80010b0:	1ac9      	subs	r1, r1, r3
 80010b2:	1c4b      	adds	r3, r1, #1
 80010b4:	2b1f      	cmp	r3, #31
 80010b6:	dd00      	ble.n	80010ba <__aeabi_dsub+0xe6>
 80010b8:	e0ea      	b.n	8001290 <__aeabi_dsub+0x2bc>
 80010ba:	2220      	movs	r2, #32
 80010bc:	0026      	movs	r6, r4
 80010be:	1ad2      	subs	r2, r2, r3
 80010c0:	0001      	movs	r1, r0
 80010c2:	4094      	lsls	r4, r2
 80010c4:	40de      	lsrs	r6, r3
 80010c6:	40d8      	lsrs	r0, r3
 80010c8:	2300      	movs	r3, #0
 80010ca:	4091      	lsls	r1, r2
 80010cc:	1e62      	subs	r2, r4, #1
 80010ce:	4194      	sbcs	r4, r2
 80010d0:	4681      	mov	r9, r0
 80010d2:	4698      	mov	r8, r3
 80010d4:	4331      	orrs	r1, r6
 80010d6:	430c      	orrs	r4, r1
 80010d8:	0763      	lsls	r3, r4, #29
 80010da:	d009      	beq.n	80010f0 <__aeabi_dsub+0x11c>
 80010dc:	230f      	movs	r3, #15
 80010de:	4023      	ands	r3, r4
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d005      	beq.n	80010f0 <__aeabi_dsub+0x11c>
 80010e4:	1d23      	adds	r3, r4, #4
 80010e6:	42a3      	cmp	r3, r4
 80010e8:	41a4      	sbcs	r4, r4
 80010ea:	4264      	negs	r4, r4
 80010ec:	44a1      	add	r9, r4
 80010ee:	001c      	movs	r4, r3
 80010f0:	464b      	mov	r3, r9
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	d400      	bmi.n	80010f8 <__aeabi_dsub+0x124>
 80010f6:	e0de      	b.n	80012b6 <__aeabi_dsub+0x2e2>
 80010f8:	4641      	mov	r1, r8
 80010fa:	4b8c      	ldr	r3, [pc, #560]	; (800132c <__aeabi_dsub+0x358>)
 80010fc:	3101      	adds	r1, #1
 80010fe:	4299      	cmp	r1, r3
 8001100:	d100      	bne.n	8001104 <__aeabi_dsub+0x130>
 8001102:	e0e7      	b.n	80012d4 <__aeabi_dsub+0x300>
 8001104:	464b      	mov	r3, r9
 8001106:	488a      	ldr	r0, [pc, #552]	; (8001330 <__aeabi_dsub+0x35c>)
 8001108:	08e4      	lsrs	r4, r4, #3
 800110a:	4003      	ands	r3, r0
 800110c:	0018      	movs	r0, r3
 800110e:	0549      	lsls	r1, r1, #21
 8001110:	075b      	lsls	r3, r3, #29
 8001112:	0240      	lsls	r0, r0, #9
 8001114:	4323      	orrs	r3, r4
 8001116:	0d4a      	lsrs	r2, r1, #21
 8001118:	0b04      	lsrs	r4, r0, #12
 800111a:	0512      	lsls	r2, r2, #20
 800111c:	07ed      	lsls	r5, r5, #31
 800111e:	4322      	orrs	r2, r4
 8001120:	432a      	orrs	r2, r5
 8001122:	0018      	movs	r0, r3
 8001124:	0011      	movs	r1, r2
 8001126:	bcf0      	pop	{r4, r5, r6, r7}
 8001128:	46bb      	mov	fp, r7
 800112a:	46b2      	mov	sl, r6
 800112c:	46a9      	mov	r9, r5
 800112e:	46a0      	mov	r8, r4
 8001130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001132:	4642      	mov	r2, r8
 8001134:	1a12      	subs	r2, r2, r0
 8001136:	2a00      	cmp	r2, #0
 8001138:	dd52      	ble.n	80011e0 <__aeabi_dsub+0x20c>
 800113a:	2800      	cmp	r0, #0
 800113c:	d100      	bne.n	8001140 <__aeabi_dsub+0x16c>
 800113e:	e09c      	b.n	800127a <__aeabi_dsub+0x2a6>
 8001140:	45a0      	cmp	r8, r4
 8001142:	d100      	bne.n	8001146 <__aeabi_dsub+0x172>
 8001144:	e0ca      	b.n	80012dc <__aeabi_dsub+0x308>
 8001146:	2080      	movs	r0, #128	; 0x80
 8001148:	0400      	lsls	r0, r0, #16
 800114a:	4301      	orrs	r1, r0
 800114c:	2a38      	cmp	r2, #56	; 0x38
 800114e:	dd00      	ble.n	8001152 <__aeabi_dsub+0x17e>
 8001150:	e149      	b.n	80013e6 <__aeabi_dsub+0x412>
 8001152:	2a1f      	cmp	r2, #31
 8001154:	dc00      	bgt.n	8001158 <__aeabi_dsub+0x184>
 8001156:	e197      	b.n	8001488 <__aeabi_dsub+0x4b4>
 8001158:	0010      	movs	r0, r2
 800115a:	000e      	movs	r6, r1
 800115c:	3820      	subs	r0, #32
 800115e:	40c6      	lsrs	r6, r0
 8001160:	2a20      	cmp	r2, #32
 8001162:	d004      	beq.n	800116e <__aeabi_dsub+0x19a>
 8001164:	2040      	movs	r0, #64	; 0x40
 8001166:	1a82      	subs	r2, r0, r2
 8001168:	4091      	lsls	r1, r2
 800116a:	430f      	orrs	r7, r1
 800116c:	46b9      	mov	r9, r7
 800116e:	464c      	mov	r4, r9
 8001170:	1e62      	subs	r2, r4, #1
 8001172:	4194      	sbcs	r4, r2
 8001174:	4334      	orrs	r4, r6
 8001176:	e13a      	b.n	80013ee <__aeabi_dsub+0x41a>
 8001178:	000a      	movs	r2, r1
 800117a:	433a      	orrs	r2, r7
 800117c:	d028      	beq.n	80011d0 <__aeabi_dsub+0x1fc>
 800117e:	46b3      	mov	fp, r6
 8001180:	42b5      	cmp	r5, r6
 8001182:	d02b      	beq.n	80011dc <__aeabi_dsub+0x208>
 8001184:	4a6b      	ldr	r2, [pc, #428]	; (8001334 <__aeabi_dsub+0x360>)
 8001186:	4442      	add	r2, r8
 8001188:	2a00      	cmp	r2, #0
 800118a:	d05d      	beq.n	8001248 <__aeabi_dsub+0x274>
 800118c:	4642      	mov	r2, r8
 800118e:	4644      	mov	r4, r8
 8001190:	1a82      	subs	r2, r0, r2
 8001192:	2c00      	cmp	r4, #0
 8001194:	d000      	beq.n	8001198 <__aeabi_dsub+0x1c4>
 8001196:	e0f5      	b.n	8001384 <__aeabi_dsub+0x3b0>
 8001198:	4665      	mov	r5, ip
 800119a:	431d      	orrs	r5, r3
 800119c:	d100      	bne.n	80011a0 <__aeabi_dsub+0x1cc>
 800119e:	e19c      	b.n	80014da <__aeabi_dsub+0x506>
 80011a0:	1e55      	subs	r5, r2, #1
 80011a2:	2a01      	cmp	r2, #1
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dsub+0x1d4>
 80011a6:	e1fb      	b.n	80015a0 <__aeabi_dsub+0x5cc>
 80011a8:	4c60      	ldr	r4, [pc, #384]	; (800132c <__aeabi_dsub+0x358>)
 80011aa:	42a2      	cmp	r2, r4
 80011ac:	d100      	bne.n	80011b0 <__aeabi_dsub+0x1dc>
 80011ae:	e1bd      	b.n	800152c <__aeabi_dsub+0x558>
 80011b0:	002a      	movs	r2, r5
 80011b2:	e0f0      	b.n	8001396 <__aeabi_dsub+0x3c2>
 80011b4:	0008      	movs	r0, r1
 80011b6:	4338      	orrs	r0, r7
 80011b8:	d100      	bne.n	80011bc <__aeabi_dsub+0x1e8>
 80011ba:	e0c3      	b.n	8001344 <__aeabi_dsub+0x370>
 80011bc:	1e50      	subs	r0, r2, #1
 80011be:	2a01      	cmp	r2, #1
 80011c0:	d100      	bne.n	80011c4 <__aeabi_dsub+0x1f0>
 80011c2:	e1a8      	b.n	8001516 <__aeabi_dsub+0x542>
 80011c4:	4c59      	ldr	r4, [pc, #356]	; (800132c <__aeabi_dsub+0x358>)
 80011c6:	42a2      	cmp	r2, r4
 80011c8:	d100      	bne.n	80011cc <__aeabi_dsub+0x1f8>
 80011ca:	e087      	b.n	80012dc <__aeabi_dsub+0x308>
 80011cc:	0002      	movs	r2, r0
 80011ce:	e736      	b.n	800103e <__aeabi_dsub+0x6a>
 80011d0:	2201      	movs	r2, #1
 80011d2:	4056      	eors	r6, r2
 80011d4:	46b3      	mov	fp, r6
 80011d6:	42b5      	cmp	r5, r6
 80011d8:	d000      	beq.n	80011dc <__aeabi_dsub+0x208>
 80011da:	e721      	b.n	8001020 <__aeabi_dsub+0x4c>
 80011dc:	4a55      	ldr	r2, [pc, #340]	; (8001334 <__aeabi_dsub+0x360>)
 80011de:	4442      	add	r2, r8
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dsub+0x212>
 80011e4:	e0b5      	b.n	8001352 <__aeabi_dsub+0x37e>
 80011e6:	4642      	mov	r2, r8
 80011e8:	4644      	mov	r4, r8
 80011ea:	1a82      	subs	r2, r0, r2
 80011ec:	2c00      	cmp	r4, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_dsub+0x21e>
 80011f0:	e138      	b.n	8001464 <__aeabi_dsub+0x490>
 80011f2:	4e4e      	ldr	r6, [pc, #312]	; (800132c <__aeabi_dsub+0x358>)
 80011f4:	42b0      	cmp	r0, r6
 80011f6:	d100      	bne.n	80011fa <__aeabi_dsub+0x226>
 80011f8:	e1de      	b.n	80015b8 <__aeabi_dsub+0x5e4>
 80011fa:	2680      	movs	r6, #128	; 0x80
 80011fc:	4664      	mov	r4, ip
 80011fe:	0436      	lsls	r6, r6, #16
 8001200:	4334      	orrs	r4, r6
 8001202:	46a4      	mov	ip, r4
 8001204:	2a38      	cmp	r2, #56	; 0x38
 8001206:	dd00      	ble.n	800120a <__aeabi_dsub+0x236>
 8001208:	e196      	b.n	8001538 <__aeabi_dsub+0x564>
 800120a:	2a1f      	cmp	r2, #31
 800120c:	dd00      	ble.n	8001210 <__aeabi_dsub+0x23c>
 800120e:	e224      	b.n	800165a <__aeabi_dsub+0x686>
 8001210:	2620      	movs	r6, #32
 8001212:	1ab4      	subs	r4, r6, r2
 8001214:	46a2      	mov	sl, r4
 8001216:	4664      	mov	r4, ip
 8001218:	4656      	mov	r6, sl
 800121a:	40b4      	lsls	r4, r6
 800121c:	46a1      	mov	r9, r4
 800121e:	001c      	movs	r4, r3
 8001220:	464e      	mov	r6, r9
 8001222:	40d4      	lsrs	r4, r2
 8001224:	4326      	orrs	r6, r4
 8001226:	0034      	movs	r4, r6
 8001228:	4656      	mov	r6, sl
 800122a:	40b3      	lsls	r3, r6
 800122c:	1e5e      	subs	r6, r3, #1
 800122e:	41b3      	sbcs	r3, r6
 8001230:	431c      	orrs	r4, r3
 8001232:	4663      	mov	r3, ip
 8001234:	40d3      	lsrs	r3, r2
 8001236:	18c9      	adds	r1, r1, r3
 8001238:	19e4      	adds	r4, r4, r7
 800123a:	42bc      	cmp	r4, r7
 800123c:	41bf      	sbcs	r7, r7
 800123e:	427f      	negs	r7, r7
 8001240:	46b9      	mov	r9, r7
 8001242:	4680      	mov	r8, r0
 8001244:	4489      	add	r9, r1
 8001246:	e0d8      	b.n	80013fa <__aeabi_dsub+0x426>
 8001248:	4640      	mov	r0, r8
 800124a:	4c3b      	ldr	r4, [pc, #236]	; (8001338 <__aeabi_dsub+0x364>)
 800124c:	3001      	adds	r0, #1
 800124e:	4220      	tst	r0, r4
 8001250:	d000      	beq.n	8001254 <__aeabi_dsub+0x280>
 8001252:	e0b4      	b.n	80013be <__aeabi_dsub+0x3ea>
 8001254:	4640      	mov	r0, r8
 8001256:	2800      	cmp	r0, #0
 8001258:	d000      	beq.n	800125c <__aeabi_dsub+0x288>
 800125a:	e144      	b.n	80014e6 <__aeabi_dsub+0x512>
 800125c:	4660      	mov	r0, ip
 800125e:	4318      	orrs	r0, r3
 8001260:	d100      	bne.n	8001264 <__aeabi_dsub+0x290>
 8001262:	e190      	b.n	8001586 <__aeabi_dsub+0x5b2>
 8001264:	0008      	movs	r0, r1
 8001266:	4338      	orrs	r0, r7
 8001268:	d000      	beq.n	800126c <__aeabi_dsub+0x298>
 800126a:	e1aa      	b.n	80015c2 <__aeabi_dsub+0x5ee>
 800126c:	4661      	mov	r1, ip
 800126e:	08db      	lsrs	r3, r3, #3
 8001270:	0749      	lsls	r1, r1, #29
 8001272:	430b      	orrs	r3, r1
 8001274:	4661      	mov	r1, ip
 8001276:	08cc      	lsrs	r4, r1, #3
 8001278:	e027      	b.n	80012ca <__aeabi_dsub+0x2f6>
 800127a:	0008      	movs	r0, r1
 800127c:	4338      	orrs	r0, r7
 800127e:	d061      	beq.n	8001344 <__aeabi_dsub+0x370>
 8001280:	1e50      	subs	r0, r2, #1
 8001282:	2a01      	cmp	r2, #1
 8001284:	d100      	bne.n	8001288 <__aeabi_dsub+0x2b4>
 8001286:	e139      	b.n	80014fc <__aeabi_dsub+0x528>
 8001288:	42a2      	cmp	r2, r4
 800128a:	d027      	beq.n	80012dc <__aeabi_dsub+0x308>
 800128c:	0002      	movs	r2, r0
 800128e:	e75d      	b.n	800114c <__aeabi_dsub+0x178>
 8001290:	0002      	movs	r2, r0
 8001292:	391f      	subs	r1, #31
 8001294:	40ca      	lsrs	r2, r1
 8001296:	0011      	movs	r1, r2
 8001298:	2b20      	cmp	r3, #32
 800129a:	d003      	beq.n	80012a4 <__aeabi_dsub+0x2d0>
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	4098      	lsls	r0, r3
 80012a2:	4304      	orrs	r4, r0
 80012a4:	1e63      	subs	r3, r4, #1
 80012a6:	419c      	sbcs	r4, r3
 80012a8:	2300      	movs	r3, #0
 80012aa:	4699      	mov	r9, r3
 80012ac:	4698      	mov	r8, r3
 80012ae:	430c      	orrs	r4, r1
 80012b0:	0763      	lsls	r3, r4, #29
 80012b2:	d000      	beq.n	80012b6 <__aeabi_dsub+0x2e2>
 80012b4:	e712      	b.n	80010dc <__aeabi_dsub+0x108>
 80012b6:	464b      	mov	r3, r9
 80012b8:	464a      	mov	r2, r9
 80012ba:	08e4      	lsrs	r4, r4, #3
 80012bc:	075b      	lsls	r3, r3, #29
 80012be:	4323      	orrs	r3, r4
 80012c0:	08d4      	lsrs	r4, r2, #3
 80012c2:	4642      	mov	r2, r8
 80012c4:	4919      	ldr	r1, [pc, #100]	; (800132c <__aeabi_dsub+0x358>)
 80012c6:	428a      	cmp	r2, r1
 80012c8:	d00e      	beq.n	80012e8 <__aeabi_dsub+0x314>
 80012ca:	0324      	lsls	r4, r4, #12
 80012cc:	0552      	lsls	r2, r2, #21
 80012ce:	0b24      	lsrs	r4, r4, #12
 80012d0:	0d52      	lsrs	r2, r2, #21
 80012d2:	e722      	b.n	800111a <__aeabi_dsub+0x146>
 80012d4:	000a      	movs	r2, r1
 80012d6:	2400      	movs	r4, #0
 80012d8:	2300      	movs	r3, #0
 80012da:	e71e      	b.n	800111a <__aeabi_dsub+0x146>
 80012dc:	08db      	lsrs	r3, r3, #3
 80012de:	4662      	mov	r2, ip
 80012e0:	0752      	lsls	r2, r2, #29
 80012e2:	4313      	orrs	r3, r2
 80012e4:	4662      	mov	r2, ip
 80012e6:	08d4      	lsrs	r4, r2, #3
 80012e8:	001a      	movs	r2, r3
 80012ea:	4322      	orrs	r2, r4
 80012ec:	d100      	bne.n	80012f0 <__aeabi_dsub+0x31c>
 80012ee:	e1fc      	b.n	80016ea <__aeabi_dsub+0x716>
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	0312      	lsls	r2, r2, #12
 80012f4:	4314      	orrs	r4, r2
 80012f6:	0324      	lsls	r4, r4, #12
 80012f8:	4a0c      	ldr	r2, [pc, #48]	; (800132c <__aeabi_dsub+0x358>)
 80012fa:	0b24      	lsrs	r4, r4, #12
 80012fc:	e70d      	b.n	800111a <__aeabi_dsub+0x146>
 80012fe:	0020      	movs	r0, r4
 8001300:	f000 fadc 	bl	80018bc <__clzsi2>
 8001304:	0001      	movs	r1, r0
 8001306:	3118      	adds	r1, #24
 8001308:	291f      	cmp	r1, #31
 800130a:	dc00      	bgt.n	800130e <__aeabi_dsub+0x33a>
 800130c:	e6c4      	b.n	8001098 <__aeabi_dsub+0xc4>
 800130e:	3808      	subs	r0, #8
 8001310:	4084      	lsls	r4, r0
 8001312:	4643      	mov	r3, r8
 8001314:	0020      	movs	r0, r4
 8001316:	2400      	movs	r4, #0
 8001318:	4588      	cmp	r8, r1
 800131a:	dc00      	bgt.n	800131e <__aeabi_dsub+0x34a>
 800131c:	e6c8      	b.n	80010b0 <__aeabi_dsub+0xdc>
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__aeabi_dsub+0x35c>)
 8001320:	1a5b      	subs	r3, r3, r1
 8001322:	4010      	ands	r0, r2
 8001324:	4698      	mov	r8, r3
 8001326:	4681      	mov	r9, r0
 8001328:	e6d6      	b.n	80010d8 <__aeabi_dsub+0x104>
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	000007ff 	.word	0x000007ff
 8001330:	ff7fffff 	.word	0xff7fffff
 8001334:	fffff801 	.word	0xfffff801
 8001338:	000007fe 	.word	0x000007fe
 800133c:	430f      	orrs	r7, r1
 800133e:	1e7a      	subs	r2, r7, #1
 8001340:	4197      	sbcs	r7, r2
 8001342:	e691      	b.n	8001068 <__aeabi_dsub+0x94>
 8001344:	4661      	mov	r1, ip
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	0749      	lsls	r1, r1, #29
 800134a:	430b      	orrs	r3, r1
 800134c:	4661      	mov	r1, ip
 800134e:	08cc      	lsrs	r4, r1, #3
 8001350:	e7b8      	b.n	80012c4 <__aeabi_dsub+0x2f0>
 8001352:	4640      	mov	r0, r8
 8001354:	4cd3      	ldr	r4, [pc, #844]	; (80016a4 <__aeabi_dsub+0x6d0>)
 8001356:	3001      	adds	r0, #1
 8001358:	4220      	tst	r0, r4
 800135a:	d000      	beq.n	800135e <__aeabi_dsub+0x38a>
 800135c:	e0a2      	b.n	80014a4 <__aeabi_dsub+0x4d0>
 800135e:	4640      	mov	r0, r8
 8001360:	2800      	cmp	r0, #0
 8001362:	d000      	beq.n	8001366 <__aeabi_dsub+0x392>
 8001364:	e101      	b.n	800156a <__aeabi_dsub+0x596>
 8001366:	4660      	mov	r0, ip
 8001368:	4318      	orrs	r0, r3
 800136a:	d100      	bne.n	800136e <__aeabi_dsub+0x39a>
 800136c:	e15e      	b.n	800162c <__aeabi_dsub+0x658>
 800136e:	0008      	movs	r0, r1
 8001370:	4338      	orrs	r0, r7
 8001372:	d000      	beq.n	8001376 <__aeabi_dsub+0x3a2>
 8001374:	e15f      	b.n	8001636 <__aeabi_dsub+0x662>
 8001376:	4661      	mov	r1, ip
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	0749      	lsls	r1, r1, #29
 800137c:	430b      	orrs	r3, r1
 800137e:	4661      	mov	r1, ip
 8001380:	08cc      	lsrs	r4, r1, #3
 8001382:	e7a2      	b.n	80012ca <__aeabi_dsub+0x2f6>
 8001384:	4dc8      	ldr	r5, [pc, #800]	; (80016a8 <__aeabi_dsub+0x6d4>)
 8001386:	42a8      	cmp	r0, r5
 8001388:	d100      	bne.n	800138c <__aeabi_dsub+0x3b8>
 800138a:	e0cf      	b.n	800152c <__aeabi_dsub+0x558>
 800138c:	2580      	movs	r5, #128	; 0x80
 800138e:	4664      	mov	r4, ip
 8001390:	042d      	lsls	r5, r5, #16
 8001392:	432c      	orrs	r4, r5
 8001394:	46a4      	mov	ip, r4
 8001396:	2a38      	cmp	r2, #56	; 0x38
 8001398:	dc56      	bgt.n	8001448 <__aeabi_dsub+0x474>
 800139a:	2a1f      	cmp	r2, #31
 800139c:	dd00      	ble.n	80013a0 <__aeabi_dsub+0x3cc>
 800139e:	e0d1      	b.n	8001544 <__aeabi_dsub+0x570>
 80013a0:	2520      	movs	r5, #32
 80013a2:	001e      	movs	r6, r3
 80013a4:	1aad      	subs	r5, r5, r2
 80013a6:	4664      	mov	r4, ip
 80013a8:	40ab      	lsls	r3, r5
 80013aa:	40ac      	lsls	r4, r5
 80013ac:	40d6      	lsrs	r6, r2
 80013ae:	1e5d      	subs	r5, r3, #1
 80013b0:	41ab      	sbcs	r3, r5
 80013b2:	4334      	orrs	r4, r6
 80013b4:	4323      	orrs	r3, r4
 80013b6:	4664      	mov	r4, ip
 80013b8:	40d4      	lsrs	r4, r2
 80013ba:	1b09      	subs	r1, r1, r4
 80013bc:	e049      	b.n	8001452 <__aeabi_dsub+0x47e>
 80013be:	4660      	mov	r0, ip
 80013c0:	1bdc      	subs	r4, r3, r7
 80013c2:	1a46      	subs	r6, r0, r1
 80013c4:	42a3      	cmp	r3, r4
 80013c6:	4180      	sbcs	r0, r0
 80013c8:	4240      	negs	r0, r0
 80013ca:	4681      	mov	r9, r0
 80013cc:	0030      	movs	r0, r6
 80013ce:	464e      	mov	r6, r9
 80013d0:	1b80      	subs	r0, r0, r6
 80013d2:	4681      	mov	r9, r0
 80013d4:	0200      	lsls	r0, r0, #8
 80013d6:	d476      	bmi.n	80014c6 <__aeabi_dsub+0x4f2>
 80013d8:	464b      	mov	r3, r9
 80013da:	4323      	orrs	r3, r4
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dsub+0x40c>
 80013de:	e652      	b.n	8001086 <__aeabi_dsub+0xb2>
 80013e0:	2400      	movs	r4, #0
 80013e2:	2500      	movs	r5, #0
 80013e4:	e771      	b.n	80012ca <__aeabi_dsub+0x2f6>
 80013e6:	4339      	orrs	r1, r7
 80013e8:	000c      	movs	r4, r1
 80013ea:	1e62      	subs	r2, r4, #1
 80013ec:	4194      	sbcs	r4, r2
 80013ee:	18e4      	adds	r4, r4, r3
 80013f0:	429c      	cmp	r4, r3
 80013f2:	419b      	sbcs	r3, r3
 80013f4:	425b      	negs	r3, r3
 80013f6:	4463      	add	r3, ip
 80013f8:	4699      	mov	r9, r3
 80013fa:	464b      	mov	r3, r9
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	d400      	bmi.n	8001402 <__aeabi_dsub+0x42e>
 8001400:	e756      	b.n	80012b0 <__aeabi_dsub+0x2dc>
 8001402:	2301      	movs	r3, #1
 8001404:	469c      	mov	ip, r3
 8001406:	4ba8      	ldr	r3, [pc, #672]	; (80016a8 <__aeabi_dsub+0x6d4>)
 8001408:	44e0      	add	r8, ip
 800140a:	4598      	cmp	r8, r3
 800140c:	d038      	beq.n	8001480 <__aeabi_dsub+0x4ac>
 800140e:	464b      	mov	r3, r9
 8001410:	48a6      	ldr	r0, [pc, #664]	; (80016ac <__aeabi_dsub+0x6d8>)
 8001412:	2201      	movs	r2, #1
 8001414:	4003      	ands	r3, r0
 8001416:	0018      	movs	r0, r3
 8001418:	0863      	lsrs	r3, r4, #1
 800141a:	4014      	ands	r4, r2
 800141c:	431c      	orrs	r4, r3
 800141e:	07c3      	lsls	r3, r0, #31
 8001420:	431c      	orrs	r4, r3
 8001422:	0843      	lsrs	r3, r0, #1
 8001424:	4699      	mov	r9, r3
 8001426:	e657      	b.n	80010d8 <__aeabi_dsub+0x104>
 8001428:	0010      	movs	r0, r2
 800142a:	000e      	movs	r6, r1
 800142c:	3820      	subs	r0, #32
 800142e:	40c6      	lsrs	r6, r0
 8001430:	2a20      	cmp	r2, #32
 8001432:	d004      	beq.n	800143e <__aeabi_dsub+0x46a>
 8001434:	2040      	movs	r0, #64	; 0x40
 8001436:	1a82      	subs	r2, r0, r2
 8001438:	4091      	lsls	r1, r2
 800143a:	430f      	orrs	r7, r1
 800143c:	46b9      	mov	r9, r7
 800143e:	464f      	mov	r7, r9
 8001440:	1e7a      	subs	r2, r7, #1
 8001442:	4197      	sbcs	r7, r2
 8001444:	4337      	orrs	r7, r6
 8001446:	e60f      	b.n	8001068 <__aeabi_dsub+0x94>
 8001448:	4662      	mov	r2, ip
 800144a:	431a      	orrs	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	1e5a      	subs	r2, r3, #1
 8001450:	4193      	sbcs	r3, r2
 8001452:	1afc      	subs	r4, r7, r3
 8001454:	42a7      	cmp	r7, r4
 8001456:	41bf      	sbcs	r7, r7
 8001458:	427f      	negs	r7, r7
 800145a:	1bcb      	subs	r3, r1, r7
 800145c:	4699      	mov	r9, r3
 800145e:	465d      	mov	r5, fp
 8001460:	4680      	mov	r8, r0
 8001462:	e608      	b.n	8001076 <__aeabi_dsub+0xa2>
 8001464:	4666      	mov	r6, ip
 8001466:	431e      	orrs	r6, r3
 8001468:	d100      	bne.n	800146c <__aeabi_dsub+0x498>
 800146a:	e0be      	b.n	80015ea <__aeabi_dsub+0x616>
 800146c:	1e56      	subs	r6, r2, #1
 800146e:	2a01      	cmp	r2, #1
 8001470:	d100      	bne.n	8001474 <__aeabi_dsub+0x4a0>
 8001472:	e109      	b.n	8001688 <__aeabi_dsub+0x6b4>
 8001474:	4c8c      	ldr	r4, [pc, #560]	; (80016a8 <__aeabi_dsub+0x6d4>)
 8001476:	42a2      	cmp	r2, r4
 8001478:	d100      	bne.n	800147c <__aeabi_dsub+0x4a8>
 800147a:	e119      	b.n	80016b0 <__aeabi_dsub+0x6dc>
 800147c:	0032      	movs	r2, r6
 800147e:	e6c1      	b.n	8001204 <__aeabi_dsub+0x230>
 8001480:	4642      	mov	r2, r8
 8001482:	2400      	movs	r4, #0
 8001484:	2300      	movs	r3, #0
 8001486:	e648      	b.n	800111a <__aeabi_dsub+0x146>
 8001488:	2020      	movs	r0, #32
 800148a:	000c      	movs	r4, r1
 800148c:	1a80      	subs	r0, r0, r2
 800148e:	003e      	movs	r6, r7
 8001490:	4087      	lsls	r7, r0
 8001492:	4084      	lsls	r4, r0
 8001494:	40d6      	lsrs	r6, r2
 8001496:	1e78      	subs	r0, r7, #1
 8001498:	4187      	sbcs	r7, r0
 800149a:	40d1      	lsrs	r1, r2
 800149c:	4334      	orrs	r4, r6
 800149e:	433c      	orrs	r4, r7
 80014a0:	448c      	add	ip, r1
 80014a2:	e7a4      	b.n	80013ee <__aeabi_dsub+0x41a>
 80014a4:	4a80      	ldr	r2, [pc, #512]	; (80016a8 <__aeabi_dsub+0x6d4>)
 80014a6:	4290      	cmp	r0, r2
 80014a8:	d100      	bne.n	80014ac <__aeabi_dsub+0x4d8>
 80014aa:	e0e9      	b.n	8001680 <__aeabi_dsub+0x6ac>
 80014ac:	19df      	adds	r7, r3, r7
 80014ae:	429f      	cmp	r7, r3
 80014b0:	419b      	sbcs	r3, r3
 80014b2:	4461      	add	r1, ip
 80014b4:	425b      	negs	r3, r3
 80014b6:	18c9      	adds	r1, r1, r3
 80014b8:	07cc      	lsls	r4, r1, #31
 80014ba:	087f      	lsrs	r7, r7, #1
 80014bc:	084b      	lsrs	r3, r1, #1
 80014be:	4699      	mov	r9, r3
 80014c0:	4680      	mov	r8, r0
 80014c2:	433c      	orrs	r4, r7
 80014c4:	e6f4      	b.n	80012b0 <__aeabi_dsub+0x2dc>
 80014c6:	1afc      	subs	r4, r7, r3
 80014c8:	42a7      	cmp	r7, r4
 80014ca:	41bf      	sbcs	r7, r7
 80014cc:	4663      	mov	r3, ip
 80014ce:	427f      	negs	r7, r7
 80014d0:	1ac9      	subs	r1, r1, r3
 80014d2:	1bcb      	subs	r3, r1, r7
 80014d4:	4699      	mov	r9, r3
 80014d6:	465d      	mov	r5, fp
 80014d8:	e5d5      	b.n	8001086 <__aeabi_dsub+0xb2>
 80014da:	08ff      	lsrs	r7, r7, #3
 80014dc:	074b      	lsls	r3, r1, #29
 80014de:	465d      	mov	r5, fp
 80014e0:	433b      	orrs	r3, r7
 80014e2:	08cc      	lsrs	r4, r1, #3
 80014e4:	e6ee      	b.n	80012c4 <__aeabi_dsub+0x2f0>
 80014e6:	4662      	mov	r2, ip
 80014e8:	431a      	orrs	r2, r3
 80014ea:	d000      	beq.n	80014ee <__aeabi_dsub+0x51a>
 80014ec:	e082      	b.n	80015f4 <__aeabi_dsub+0x620>
 80014ee:	000b      	movs	r3, r1
 80014f0:	433b      	orrs	r3, r7
 80014f2:	d11b      	bne.n	800152c <__aeabi_dsub+0x558>
 80014f4:	2480      	movs	r4, #128	; 0x80
 80014f6:	2500      	movs	r5, #0
 80014f8:	0324      	lsls	r4, r4, #12
 80014fa:	e6f9      	b.n	80012f0 <__aeabi_dsub+0x31c>
 80014fc:	19dc      	adds	r4, r3, r7
 80014fe:	429c      	cmp	r4, r3
 8001500:	419b      	sbcs	r3, r3
 8001502:	4461      	add	r1, ip
 8001504:	4689      	mov	r9, r1
 8001506:	425b      	negs	r3, r3
 8001508:	4499      	add	r9, r3
 800150a:	464b      	mov	r3, r9
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	d444      	bmi.n	800159a <__aeabi_dsub+0x5c6>
 8001510:	2301      	movs	r3, #1
 8001512:	4698      	mov	r8, r3
 8001514:	e6cc      	b.n	80012b0 <__aeabi_dsub+0x2dc>
 8001516:	1bdc      	subs	r4, r3, r7
 8001518:	4662      	mov	r2, ip
 800151a:	42a3      	cmp	r3, r4
 800151c:	419b      	sbcs	r3, r3
 800151e:	1a51      	subs	r1, r2, r1
 8001520:	425b      	negs	r3, r3
 8001522:	1acb      	subs	r3, r1, r3
 8001524:	4699      	mov	r9, r3
 8001526:	2301      	movs	r3, #1
 8001528:	4698      	mov	r8, r3
 800152a:	e5a4      	b.n	8001076 <__aeabi_dsub+0xa2>
 800152c:	08ff      	lsrs	r7, r7, #3
 800152e:	074b      	lsls	r3, r1, #29
 8001530:	465d      	mov	r5, fp
 8001532:	433b      	orrs	r3, r7
 8001534:	08cc      	lsrs	r4, r1, #3
 8001536:	e6d7      	b.n	80012e8 <__aeabi_dsub+0x314>
 8001538:	4662      	mov	r2, ip
 800153a:	431a      	orrs	r2, r3
 800153c:	0014      	movs	r4, r2
 800153e:	1e63      	subs	r3, r4, #1
 8001540:	419c      	sbcs	r4, r3
 8001542:	e679      	b.n	8001238 <__aeabi_dsub+0x264>
 8001544:	0015      	movs	r5, r2
 8001546:	4664      	mov	r4, ip
 8001548:	3d20      	subs	r5, #32
 800154a:	40ec      	lsrs	r4, r5
 800154c:	46a0      	mov	r8, r4
 800154e:	2a20      	cmp	r2, #32
 8001550:	d005      	beq.n	800155e <__aeabi_dsub+0x58a>
 8001552:	2540      	movs	r5, #64	; 0x40
 8001554:	4664      	mov	r4, ip
 8001556:	1aaa      	subs	r2, r5, r2
 8001558:	4094      	lsls	r4, r2
 800155a:	4323      	orrs	r3, r4
 800155c:	469a      	mov	sl, r3
 800155e:	4654      	mov	r4, sl
 8001560:	1e63      	subs	r3, r4, #1
 8001562:	419c      	sbcs	r4, r3
 8001564:	4643      	mov	r3, r8
 8001566:	4323      	orrs	r3, r4
 8001568:	e773      	b.n	8001452 <__aeabi_dsub+0x47e>
 800156a:	4662      	mov	r2, ip
 800156c:	431a      	orrs	r2, r3
 800156e:	d023      	beq.n	80015b8 <__aeabi_dsub+0x5e4>
 8001570:	000a      	movs	r2, r1
 8001572:	433a      	orrs	r2, r7
 8001574:	d000      	beq.n	8001578 <__aeabi_dsub+0x5a4>
 8001576:	e0a0      	b.n	80016ba <__aeabi_dsub+0x6e6>
 8001578:	4662      	mov	r2, ip
 800157a:	08db      	lsrs	r3, r3, #3
 800157c:	0752      	lsls	r2, r2, #29
 800157e:	4313      	orrs	r3, r2
 8001580:	4662      	mov	r2, ip
 8001582:	08d4      	lsrs	r4, r2, #3
 8001584:	e6b0      	b.n	80012e8 <__aeabi_dsub+0x314>
 8001586:	000b      	movs	r3, r1
 8001588:	433b      	orrs	r3, r7
 800158a:	d100      	bne.n	800158e <__aeabi_dsub+0x5ba>
 800158c:	e728      	b.n	80013e0 <__aeabi_dsub+0x40c>
 800158e:	08ff      	lsrs	r7, r7, #3
 8001590:	074b      	lsls	r3, r1, #29
 8001592:	465d      	mov	r5, fp
 8001594:	433b      	orrs	r3, r7
 8001596:	08cc      	lsrs	r4, r1, #3
 8001598:	e697      	b.n	80012ca <__aeabi_dsub+0x2f6>
 800159a:	2302      	movs	r3, #2
 800159c:	4698      	mov	r8, r3
 800159e:	e736      	b.n	800140e <__aeabi_dsub+0x43a>
 80015a0:	1afc      	subs	r4, r7, r3
 80015a2:	42a7      	cmp	r7, r4
 80015a4:	41bf      	sbcs	r7, r7
 80015a6:	4663      	mov	r3, ip
 80015a8:	427f      	negs	r7, r7
 80015aa:	1ac9      	subs	r1, r1, r3
 80015ac:	1bcb      	subs	r3, r1, r7
 80015ae:	4699      	mov	r9, r3
 80015b0:	2301      	movs	r3, #1
 80015b2:	465d      	mov	r5, fp
 80015b4:	4698      	mov	r8, r3
 80015b6:	e55e      	b.n	8001076 <__aeabi_dsub+0xa2>
 80015b8:	074b      	lsls	r3, r1, #29
 80015ba:	08ff      	lsrs	r7, r7, #3
 80015bc:	433b      	orrs	r3, r7
 80015be:	08cc      	lsrs	r4, r1, #3
 80015c0:	e692      	b.n	80012e8 <__aeabi_dsub+0x314>
 80015c2:	1bdc      	subs	r4, r3, r7
 80015c4:	4660      	mov	r0, ip
 80015c6:	42a3      	cmp	r3, r4
 80015c8:	41b6      	sbcs	r6, r6
 80015ca:	1a40      	subs	r0, r0, r1
 80015cc:	4276      	negs	r6, r6
 80015ce:	1b80      	subs	r0, r0, r6
 80015d0:	4681      	mov	r9, r0
 80015d2:	0200      	lsls	r0, r0, #8
 80015d4:	d560      	bpl.n	8001698 <__aeabi_dsub+0x6c4>
 80015d6:	1afc      	subs	r4, r7, r3
 80015d8:	42a7      	cmp	r7, r4
 80015da:	41bf      	sbcs	r7, r7
 80015dc:	4663      	mov	r3, ip
 80015de:	427f      	negs	r7, r7
 80015e0:	1ac9      	subs	r1, r1, r3
 80015e2:	1bcb      	subs	r3, r1, r7
 80015e4:	4699      	mov	r9, r3
 80015e6:	465d      	mov	r5, fp
 80015e8:	e576      	b.n	80010d8 <__aeabi_dsub+0x104>
 80015ea:	08ff      	lsrs	r7, r7, #3
 80015ec:	074b      	lsls	r3, r1, #29
 80015ee:	433b      	orrs	r3, r7
 80015f0:	08cc      	lsrs	r4, r1, #3
 80015f2:	e667      	b.n	80012c4 <__aeabi_dsub+0x2f0>
 80015f4:	000a      	movs	r2, r1
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	433a      	orrs	r2, r7
 80015fa:	d100      	bne.n	80015fe <__aeabi_dsub+0x62a>
 80015fc:	e66f      	b.n	80012de <__aeabi_dsub+0x30a>
 80015fe:	4662      	mov	r2, ip
 8001600:	0752      	lsls	r2, r2, #29
 8001602:	4313      	orrs	r3, r2
 8001604:	4662      	mov	r2, ip
 8001606:	08d4      	lsrs	r4, r2, #3
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	0312      	lsls	r2, r2, #12
 800160c:	4214      	tst	r4, r2
 800160e:	d007      	beq.n	8001620 <__aeabi_dsub+0x64c>
 8001610:	08c8      	lsrs	r0, r1, #3
 8001612:	4210      	tst	r0, r2
 8001614:	d104      	bne.n	8001620 <__aeabi_dsub+0x64c>
 8001616:	465d      	mov	r5, fp
 8001618:	0004      	movs	r4, r0
 800161a:	08fb      	lsrs	r3, r7, #3
 800161c:	0749      	lsls	r1, r1, #29
 800161e:	430b      	orrs	r3, r1
 8001620:	0f5a      	lsrs	r2, r3, #29
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	0752      	lsls	r2, r2, #29
 8001628:	4313      	orrs	r3, r2
 800162a:	e65d      	b.n	80012e8 <__aeabi_dsub+0x314>
 800162c:	074b      	lsls	r3, r1, #29
 800162e:	08ff      	lsrs	r7, r7, #3
 8001630:	433b      	orrs	r3, r7
 8001632:	08cc      	lsrs	r4, r1, #3
 8001634:	e649      	b.n	80012ca <__aeabi_dsub+0x2f6>
 8001636:	19dc      	adds	r4, r3, r7
 8001638:	429c      	cmp	r4, r3
 800163a:	419b      	sbcs	r3, r3
 800163c:	4461      	add	r1, ip
 800163e:	4689      	mov	r9, r1
 8001640:	425b      	negs	r3, r3
 8001642:	4499      	add	r9, r3
 8001644:	464b      	mov	r3, r9
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	d400      	bmi.n	800164c <__aeabi_dsub+0x678>
 800164a:	e631      	b.n	80012b0 <__aeabi_dsub+0x2dc>
 800164c:	464a      	mov	r2, r9
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <__aeabi_dsub+0x6d8>)
 8001650:	401a      	ands	r2, r3
 8001652:	2301      	movs	r3, #1
 8001654:	4691      	mov	r9, r2
 8001656:	4698      	mov	r8, r3
 8001658:	e62a      	b.n	80012b0 <__aeabi_dsub+0x2dc>
 800165a:	0016      	movs	r6, r2
 800165c:	4664      	mov	r4, ip
 800165e:	3e20      	subs	r6, #32
 8001660:	40f4      	lsrs	r4, r6
 8001662:	46a0      	mov	r8, r4
 8001664:	2a20      	cmp	r2, #32
 8001666:	d005      	beq.n	8001674 <__aeabi_dsub+0x6a0>
 8001668:	2640      	movs	r6, #64	; 0x40
 800166a:	4664      	mov	r4, ip
 800166c:	1ab2      	subs	r2, r6, r2
 800166e:	4094      	lsls	r4, r2
 8001670:	4323      	orrs	r3, r4
 8001672:	469a      	mov	sl, r3
 8001674:	4654      	mov	r4, sl
 8001676:	1e63      	subs	r3, r4, #1
 8001678:	419c      	sbcs	r4, r3
 800167a:	4643      	mov	r3, r8
 800167c:	431c      	orrs	r4, r3
 800167e:	e5db      	b.n	8001238 <__aeabi_dsub+0x264>
 8001680:	0002      	movs	r2, r0
 8001682:	2400      	movs	r4, #0
 8001684:	2300      	movs	r3, #0
 8001686:	e548      	b.n	800111a <__aeabi_dsub+0x146>
 8001688:	19dc      	adds	r4, r3, r7
 800168a:	42bc      	cmp	r4, r7
 800168c:	41bf      	sbcs	r7, r7
 800168e:	4461      	add	r1, ip
 8001690:	4689      	mov	r9, r1
 8001692:	427f      	negs	r7, r7
 8001694:	44b9      	add	r9, r7
 8001696:	e738      	b.n	800150a <__aeabi_dsub+0x536>
 8001698:	464b      	mov	r3, r9
 800169a:	4323      	orrs	r3, r4
 800169c:	d100      	bne.n	80016a0 <__aeabi_dsub+0x6cc>
 800169e:	e69f      	b.n	80013e0 <__aeabi_dsub+0x40c>
 80016a0:	e606      	b.n	80012b0 <__aeabi_dsub+0x2dc>
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	000007fe 	.word	0x000007fe
 80016a8:	000007ff 	.word	0x000007ff
 80016ac:	ff7fffff 	.word	0xff7fffff
 80016b0:	08ff      	lsrs	r7, r7, #3
 80016b2:	074b      	lsls	r3, r1, #29
 80016b4:	433b      	orrs	r3, r7
 80016b6:	08cc      	lsrs	r4, r1, #3
 80016b8:	e616      	b.n	80012e8 <__aeabi_dsub+0x314>
 80016ba:	4662      	mov	r2, ip
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	0752      	lsls	r2, r2, #29
 80016c0:	4313      	orrs	r3, r2
 80016c2:	4662      	mov	r2, ip
 80016c4:	08d4      	lsrs	r4, r2, #3
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	0312      	lsls	r2, r2, #12
 80016ca:	4214      	tst	r4, r2
 80016cc:	d007      	beq.n	80016de <__aeabi_dsub+0x70a>
 80016ce:	08c8      	lsrs	r0, r1, #3
 80016d0:	4210      	tst	r0, r2
 80016d2:	d104      	bne.n	80016de <__aeabi_dsub+0x70a>
 80016d4:	465d      	mov	r5, fp
 80016d6:	0004      	movs	r4, r0
 80016d8:	08fb      	lsrs	r3, r7, #3
 80016da:	0749      	lsls	r1, r1, #29
 80016dc:	430b      	orrs	r3, r1
 80016de:	0f5a      	lsrs	r2, r3, #29
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	0752      	lsls	r2, r2, #29
 80016e4:	08db      	lsrs	r3, r3, #3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	e5fe      	b.n	80012e8 <__aeabi_dsub+0x314>
 80016ea:	2300      	movs	r3, #0
 80016ec:	4a01      	ldr	r2, [pc, #4]	; (80016f4 <__aeabi_dsub+0x720>)
 80016ee:	001c      	movs	r4, r3
 80016f0:	e513      	b.n	800111a <__aeabi_dsub+0x146>
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	000007ff 	.word	0x000007ff

080016f8 <__aeabi_d2iz>:
 80016f8:	000a      	movs	r2, r1
 80016fa:	b530      	push	{r4, r5, lr}
 80016fc:	4c13      	ldr	r4, [pc, #76]	; (800174c <__aeabi_d2iz+0x54>)
 80016fe:	0053      	lsls	r3, r2, #1
 8001700:	0309      	lsls	r1, r1, #12
 8001702:	0005      	movs	r5, r0
 8001704:	0b09      	lsrs	r1, r1, #12
 8001706:	2000      	movs	r0, #0
 8001708:	0d5b      	lsrs	r3, r3, #21
 800170a:	0fd2      	lsrs	r2, r2, #31
 800170c:	42a3      	cmp	r3, r4
 800170e:	dd04      	ble.n	800171a <__aeabi_d2iz+0x22>
 8001710:	480f      	ldr	r0, [pc, #60]	; (8001750 <__aeabi_d2iz+0x58>)
 8001712:	4283      	cmp	r3, r0
 8001714:	dd02      	ble.n	800171c <__aeabi_d2iz+0x24>
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <__aeabi_d2iz+0x5c>)
 8001718:	18d0      	adds	r0, r2, r3
 800171a:	bd30      	pop	{r4, r5, pc}
 800171c:	2080      	movs	r0, #128	; 0x80
 800171e:	0340      	lsls	r0, r0, #13
 8001720:	4301      	orrs	r1, r0
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <__aeabi_d2iz+0x60>)
 8001724:	1ac0      	subs	r0, r0, r3
 8001726:	281f      	cmp	r0, #31
 8001728:	dd08      	ble.n	800173c <__aeabi_d2iz+0x44>
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <__aeabi_d2iz+0x64>)
 800172c:	1ac3      	subs	r3, r0, r3
 800172e:	40d9      	lsrs	r1, r3
 8001730:	000b      	movs	r3, r1
 8001732:	4258      	negs	r0, r3
 8001734:	2a00      	cmp	r2, #0
 8001736:	d1f0      	bne.n	800171a <__aeabi_d2iz+0x22>
 8001738:	0018      	movs	r0, r3
 800173a:	e7ee      	b.n	800171a <__aeabi_d2iz+0x22>
 800173c:	4c08      	ldr	r4, [pc, #32]	; (8001760 <__aeabi_d2iz+0x68>)
 800173e:	40c5      	lsrs	r5, r0
 8001740:	46a4      	mov	ip, r4
 8001742:	4463      	add	r3, ip
 8001744:	4099      	lsls	r1, r3
 8001746:	000b      	movs	r3, r1
 8001748:	432b      	orrs	r3, r5
 800174a:	e7f2      	b.n	8001732 <__aeabi_d2iz+0x3a>
 800174c:	000003fe 	.word	0x000003fe
 8001750:	0000041d 	.word	0x0000041d
 8001754:	7fffffff 	.word	0x7fffffff
 8001758:	00000433 	.word	0x00000433
 800175c:	00000413 	.word	0x00000413
 8001760:	fffffbed 	.word	0xfffffbed

08001764 <__aeabi_ui2d>:
 8001764:	b510      	push	{r4, lr}
 8001766:	1e04      	subs	r4, r0, #0
 8001768:	d010      	beq.n	800178c <__aeabi_ui2d+0x28>
 800176a:	f000 f8a7 	bl	80018bc <__clzsi2>
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <__aeabi_ui2d+0x48>)
 8001770:	1a1b      	subs	r3, r3, r0
 8001772:	280a      	cmp	r0, #10
 8001774:	dc11      	bgt.n	800179a <__aeabi_ui2d+0x36>
 8001776:	220b      	movs	r2, #11
 8001778:	0021      	movs	r1, r4
 800177a:	1a12      	subs	r2, r2, r0
 800177c:	40d1      	lsrs	r1, r2
 800177e:	3015      	adds	r0, #21
 8001780:	030a      	lsls	r2, r1, #12
 8001782:	055b      	lsls	r3, r3, #21
 8001784:	4084      	lsls	r4, r0
 8001786:	0b12      	lsrs	r2, r2, #12
 8001788:	0d5b      	lsrs	r3, r3, #21
 800178a:	e001      	b.n	8001790 <__aeabi_ui2d+0x2c>
 800178c:	2300      	movs	r3, #0
 800178e:	2200      	movs	r2, #0
 8001790:	051b      	lsls	r3, r3, #20
 8001792:	4313      	orrs	r3, r2
 8001794:	0020      	movs	r0, r4
 8001796:	0019      	movs	r1, r3
 8001798:	bd10      	pop	{r4, pc}
 800179a:	0022      	movs	r2, r4
 800179c:	380b      	subs	r0, #11
 800179e:	4082      	lsls	r2, r0
 80017a0:	055b      	lsls	r3, r3, #21
 80017a2:	0312      	lsls	r2, r2, #12
 80017a4:	2400      	movs	r4, #0
 80017a6:	0b12      	lsrs	r2, r2, #12
 80017a8:	0d5b      	lsrs	r3, r3, #21
 80017aa:	e7f1      	b.n	8001790 <__aeabi_ui2d+0x2c>
 80017ac:	0000041e 	.word	0x0000041e

080017b0 <__aeabi_f2d>:
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	0043      	lsls	r3, r0, #1
 80017b4:	0246      	lsls	r6, r0, #9
 80017b6:	0fc4      	lsrs	r4, r0, #31
 80017b8:	20fe      	movs	r0, #254	; 0xfe
 80017ba:	0e1b      	lsrs	r3, r3, #24
 80017bc:	1c59      	adds	r1, r3, #1
 80017be:	0a75      	lsrs	r5, r6, #9
 80017c0:	4208      	tst	r0, r1
 80017c2:	d00c      	beq.n	80017de <__aeabi_f2d+0x2e>
 80017c4:	22e0      	movs	r2, #224	; 0xe0
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4694      	mov	ip, r2
 80017ca:	076d      	lsls	r5, r5, #29
 80017cc:	0b36      	lsrs	r6, r6, #12
 80017ce:	4463      	add	r3, ip
 80017d0:	051b      	lsls	r3, r3, #20
 80017d2:	4333      	orrs	r3, r6
 80017d4:	07e4      	lsls	r4, r4, #31
 80017d6:	4323      	orrs	r3, r4
 80017d8:	0028      	movs	r0, r5
 80017da:	0019      	movs	r1, r3
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d114      	bne.n	800180c <__aeabi_f2d+0x5c>
 80017e2:	2d00      	cmp	r5, #0
 80017e4:	d01b      	beq.n	800181e <__aeabi_f2d+0x6e>
 80017e6:	0028      	movs	r0, r5
 80017e8:	f000 f868 	bl	80018bc <__clzsi2>
 80017ec:	280a      	cmp	r0, #10
 80017ee:	dc1c      	bgt.n	800182a <__aeabi_f2d+0x7a>
 80017f0:	230b      	movs	r3, #11
 80017f2:	002e      	movs	r6, r5
 80017f4:	1a1b      	subs	r3, r3, r0
 80017f6:	40de      	lsrs	r6, r3
 80017f8:	0003      	movs	r3, r0
 80017fa:	3315      	adds	r3, #21
 80017fc:	409d      	lsls	r5, r3
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <__aeabi_f2d+0x88>)
 8001800:	0336      	lsls	r6, r6, #12
 8001802:	1a12      	subs	r2, r2, r0
 8001804:	0552      	lsls	r2, r2, #21
 8001806:	0b36      	lsrs	r6, r6, #12
 8001808:	0d53      	lsrs	r3, r2, #21
 800180a:	e7e1      	b.n	80017d0 <__aeabi_f2d+0x20>
 800180c:	2d00      	cmp	r5, #0
 800180e:	d009      	beq.n	8001824 <__aeabi_f2d+0x74>
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	0b36      	lsrs	r6, r6, #12
 8001814:	0312      	lsls	r2, r2, #12
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <__aeabi_f2d+0x8c>)
 8001818:	076d      	lsls	r5, r5, #29
 800181a:	4316      	orrs	r6, r2
 800181c:	e7d8      	b.n	80017d0 <__aeabi_f2d+0x20>
 800181e:	2300      	movs	r3, #0
 8001820:	2600      	movs	r6, #0
 8001822:	e7d5      	b.n	80017d0 <__aeabi_f2d+0x20>
 8001824:	2600      	movs	r6, #0
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <__aeabi_f2d+0x8c>)
 8001828:	e7d2      	b.n	80017d0 <__aeabi_f2d+0x20>
 800182a:	0003      	movs	r3, r0
 800182c:	3b0b      	subs	r3, #11
 800182e:	409d      	lsls	r5, r3
 8001830:	002e      	movs	r6, r5
 8001832:	2500      	movs	r5, #0
 8001834:	e7e3      	b.n	80017fe <__aeabi_f2d+0x4e>
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	00000389 	.word	0x00000389
 800183c:	000007ff 	.word	0x000007ff

08001840 <__aeabi_cdrcmple>:
 8001840:	4684      	mov	ip, r0
 8001842:	0010      	movs	r0, r2
 8001844:	4662      	mov	r2, ip
 8001846:	468c      	mov	ip, r1
 8001848:	0019      	movs	r1, r3
 800184a:	4663      	mov	r3, ip
 800184c:	e000      	b.n	8001850 <__aeabi_cdcmpeq>
 800184e:	46c0      	nop			; (mov r8, r8)

08001850 <__aeabi_cdcmpeq>:
 8001850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001852:	f000 f8f9 	bl	8001a48 <__ledf2>
 8001856:	2800      	cmp	r0, #0
 8001858:	d401      	bmi.n	800185e <__aeabi_cdcmpeq+0xe>
 800185a:	2100      	movs	r1, #0
 800185c:	42c8      	cmn	r0, r1
 800185e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001860 <__aeabi_dcmpeq>:
 8001860:	b510      	push	{r4, lr}
 8001862:	f000 f849 	bl	80018f8 <__eqdf2>
 8001866:	4240      	negs	r0, r0
 8001868:	3001      	adds	r0, #1
 800186a:	bd10      	pop	{r4, pc}

0800186c <__aeabi_dcmplt>:
 800186c:	b510      	push	{r4, lr}
 800186e:	f000 f8eb 	bl	8001a48 <__ledf2>
 8001872:	2800      	cmp	r0, #0
 8001874:	db01      	blt.n	800187a <__aeabi_dcmplt+0xe>
 8001876:	2000      	movs	r0, #0
 8001878:	bd10      	pop	{r4, pc}
 800187a:	2001      	movs	r0, #1
 800187c:	bd10      	pop	{r4, pc}
 800187e:	46c0      	nop			; (mov r8, r8)

08001880 <__aeabi_dcmple>:
 8001880:	b510      	push	{r4, lr}
 8001882:	f000 f8e1 	bl	8001a48 <__ledf2>
 8001886:	2800      	cmp	r0, #0
 8001888:	dd01      	ble.n	800188e <__aeabi_dcmple+0xe>
 800188a:	2000      	movs	r0, #0
 800188c:	bd10      	pop	{r4, pc}
 800188e:	2001      	movs	r0, #1
 8001890:	bd10      	pop	{r4, pc}
 8001892:	46c0      	nop			; (mov r8, r8)

08001894 <__aeabi_dcmpgt>:
 8001894:	b510      	push	{r4, lr}
 8001896:	f000 f871 	bl	800197c <__gedf2>
 800189a:	2800      	cmp	r0, #0
 800189c:	dc01      	bgt.n	80018a2 <__aeabi_dcmpgt+0xe>
 800189e:	2000      	movs	r0, #0
 80018a0:	bd10      	pop	{r4, pc}
 80018a2:	2001      	movs	r0, #1
 80018a4:	bd10      	pop	{r4, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)

080018a8 <__aeabi_dcmpge>:
 80018a8:	b510      	push	{r4, lr}
 80018aa:	f000 f867 	bl	800197c <__gedf2>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	da01      	bge.n	80018b6 <__aeabi_dcmpge+0xe>
 80018b2:	2000      	movs	r0, #0
 80018b4:	bd10      	pop	{r4, pc}
 80018b6:	2001      	movs	r0, #1
 80018b8:	bd10      	pop	{r4, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)

080018bc <__clzsi2>:
 80018bc:	211c      	movs	r1, #28
 80018be:	2301      	movs	r3, #1
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	4298      	cmp	r0, r3
 80018c4:	d301      	bcc.n	80018ca <__clzsi2+0xe>
 80018c6:	0c00      	lsrs	r0, r0, #16
 80018c8:	3910      	subs	r1, #16
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	4298      	cmp	r0, r3
 80018ce:	d301      	bcc.n	80018d4 <__clzsi2+0x18>
 80018d0:	0a00      	lsrs	r0, r0, #8
 80018d2:	3908      	subs	r1, #8
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	4298      	cmp	r0, r3
 80018d8:	d301      	bcc.n	80018de <__clzsi2+0x22>
 80018da:	0900      	lsrs	r0, r0, #4
 80018dc:	3904      	subs	r1, #4
 80018de:	a202      	add	r2, pc, #8	; (adr r2, 80018e8 <__clzsi2+0x2c>)
 80018e0:	5c10      	ldrb	r0, [r2, r0]
 80018e2:	1840      	adds	r0, r0, r1
 80018e4:	4770      	bx	lr
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	02020304 	.word	0x02020304
 80018ec:	01010101 	.word	0x01010101
	...

080018f8 <__eqdf2>:
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	464e      	mov	r6, r9
 80018fc:	4645      	mov	r5, r8
 80018fe:	46de      	mov	lr, fp
 8001900:	4657      	mov	r7, sl
 8001902:	4690      	mov	r8, r2
 8001904:	b5e0      	push	{r5, r6, r7, lr}
 8001906:	0017      	movs	r7, r2
 8001908:	031a      	lsls	r2, r3, #12
 800190a:	0b12      	lsrs	r2, r2, #12
 800190c:	0005      	movs	r5, r0
 800190e:	4684      	mov	ip, r0
 8001910:	4819      	ldr	r0, [pc, #100]	; (8001978 <__eqdf2+0x80>)
 8001912:	030e      	lsls	r6, r1, #12
 8001914:	004c      	lsls	r4, r1, #1
 8001916:	4691      	mov	r9, r2
 8001918:	005a      	lsls	r2, r3, #1
 800191a:	0fdb      	lsrs	r3, r3, #31
 800191c:	469b      	mov	fp, r3
 800191e:	0b36      	lsrs	r6, r6, #12
 8001920:	0d64      	lsrs	r4, r4, #21
 8001922:	0fc9      	lsrs	r1, r1, #31
 8001924:	0d52      	lsrs	r2, r2, #21
 8001926:	4284      	cmp	r4, r0
 8001928:	d019      	beq.n	800195e <__eqdf2+0x66>
 800192a:	4282      	cmp	r2, r0
 800192c:	d010      	beq.n	8001950 <__eqdf2+0x58>
 800192e:	2001      	movs	r0, #1
 8001930:	4294      	cmp	r4, r2
 8001932:	d10e      	bne.n	8001952 <__eqdf2+0x5a>
 8001934:	454e      	cmp	r6, r9
 8001936:	d10c      	bne.n	8001952 <__eqdf2+0x5a>
 8001938:	2001      	movs	r0, #1
 800193a:	45c4      	cmp	ip, r8
 800193c:	d109      	bne.n	8001952 <__eqdf2+0x5a>
 800193e:	4559      	cmp	r1, fp
 8001940:	d017      	beq.n	8001972 <__eqdf2+0x7a>
 8001942:	2c00      	cmp	r4, #0
 8001944:	d105      	bne.n	8001952 <__eqdf2+0x5a>
 8001946:	0030      	movs	r0, r6
 8001948:	4328      	orrs	r0, r5
 800194a:	1e43      	subs	r3, r0, #1
 800194c:	4198      	sbcs	r0, r3
 800194e:	e000      	b.n	8001952 <__eqdf2+0x5a>
 8001950:	2001      	movs	r0, #1
 8001952:	bcf0      	pop	{r4, r5, r6, r7}
 8001954:	46bb      	mov	fp, r7
 8001956:	46b2      	mov	sl, r6
 8001958:	46a9      	mov	r9, r5
 800195a:	46a0      	mov	r8, r4
 800195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195e:	0033      	movs	r3, r6
 8001960:	2001      	movs	r0, #1
 8001962:	432b      	orrs	r3, r5
 8001964:	d1f5      	bne.n	8001952 <__eqdf2+0x5a>
 8001966:	42a2      	cmp	r2, r4
 8001968:	d1f3      	bne.n	8001952 <__eqdf2+0x5a>
 800196a:	464b      	mov	r3, r9
 800196c:	433b      	orrs	r3, r7
 800196e:	d1f0      	bne.n	8001952 <__eqdf2+0x5a>
 8001970:	e7e2      	b.n	8001938 <__eqdf2+0x40>
 8001972:	2000      	movs	r0, #0
 8001974:	e7ed      	b.n	8001952 <__eqdf2+0x5a>
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	000007ff 	.word	0x000007ff

0800197c <__gedf2>:
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	4647      	mov	r7, r8
 8001980:	46ce      	mov	lr, r9
 8001982:	0004      	movs	r4, r0
 8001984:	0018      	movs	r0, r3
 8001986:	0016      	movs	r6, r2
 8001988:	031b      	lsls	r3, r3, #12
 800198a:	0b1b      	lsrs	r3, r3, #12
 800198c:	4d2d      	ldr	r5, [pc, #180]	; (8001a44 <__gedf2+0xc8>)
 800198e:	004a      	lsls	r2, r1, #1
 8001990:	4699      	mov	r9, r3
 8001992:	b580      	push	{r7, lr}
 8001994:	0043      	lsls	r3, r0, #1
 8001996:	030f      	lsls	r7, r1, #12
 8001998:	46a4      	mov	ip, r4
 800199a:	46b0      	mov	r8, r6
 800199c:	0b3f      	lsrs	r7, r7, #12
 800199e:	0d52      	lsrs	r2, r2, #21
 80019a0:	0fc9      	lsrs	r1, r1, #31
 80019a2:	0d5b      	lsrs	r3, r3, #21
 80019a4:	0fc0      	lsrs	r0, r0, #31
 80019a6:	42aa      	cmp	r2, r5
 80019a8:	d021      	beq.n	80019ee <__gedf2+0x72>
 80019aa:	42ab      	cmp	r3, r5
 80019ac:	d013      	beq.n	80019d6 <__gedf2+0x5a>
 80019ae:	2a00      	cmp	r2, #0
 80019b0:	d122      	bne.n	80019f8 <__gedf2+0x7c>
 80019b2:	433c      	orrs	r4, r7
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <__gedf2+0x42>
 80019b8:	464d      	mov	r5, r9
 80019ba:	432e      	orrs	r6, r5
 80019bc:	d022      	beq.n	8001a04 <__gedf2+0x88>
 80019be:	2c00      	cmp	r4, #0
 80019c0:	d010      	beq.n	80019e4 <__gedf2+0x68>
 80019c2:	4281      	cmp	r1, r0
 80019c4:	d022      	beq.n	8001a0c <__gedf2+0x90>
 80019c6:	2002      	movs	r0, #2
 80019c8:	3901      	subs	r1, #1
 80019ca:	4008      	ands	r0, r1
 80019cc:	3801      	subs	r0, #1
 80019ce:	bcc0      	pop	{r6, r7}
 80019d0:	46b9      	mov	r9, r7
 80019d2:	46b0      	mov	r8, r6
 80019d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d6:	464d      	mov	r5, r9
 80019d8:	432e      	orrs	r6, r5
 80019da:	d129      	bne.n	8001a30 <__gedf2+0xb4>
 80019dc:	2a00      	cmp	r2, #0
 80019de:	d1f0      	bne.n	80019c2 <__gedf2+0x46>
 80019e0:	433c      	orrs	r4, r7
 80019e2:	d1ee      	bne.n	80019c2 <__gedf2+0x46>
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d1f2      	bne.n	80019ce <__gedf2+0x52>
 80019e8:	2001      	movs	r0, #1
 80019ea:	4240      	negs	r0, r0
 80019ec:	e7ef      	b.n	80019ce <__gedf2+0x52>
 80019ee:	003d      	movs	r5, r7
 80019f0:	4325      	orrs	r5, r4
 80019f2:	d11d      	bne.n	8001a30 <__gedf2+0xb4>
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d0ee      	beq.n	80019d6 <__gedf2+0x5a>
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1e2      	bne.n	80019c2 <__gedf2+0x46>
 80019fc:	464c      	mov	r4, r9
 80019fe:	4326      	orrs	r6, r4
 8001a00:	d1df      	bne.n	80019c2 <__gedf2+0x46>
 8001a02:	e7e0      	b.n	80019c6 <__gedf2+0x4a>
 8001a04:	2000      	movs	r0, #0
 8001a06:	2c00      	cmp	r4, #0
 8001a08:	d0e1      	beq.n	80019ce <__gedf2+0x52>
 8001a0a:	e7dc      	b.n	80019c6 <__gedf2+0x4a>
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	dc0a      	bgt.n	8001a26 <__gedf2+0xaa>
 8001a10:	dbe8      	blt.n	80019e4 <__gedf2+0x68>
 8001a12:	454f      	cmp	r7, r9
 8001a14:	d8d7      	bhi.n	80019c6 <__gedf2+0x4a>
 8001a16:	d00e      	beq.n	8001a36 <__gedf2+0xba>
 8001a18:	2000      	movs	r0, #0
 8001a1a:	454f      	cmp	r7, r9
 8001a1c:	d2d7      	bcs.n	80019ce <__gedf2+0x52>
 8001a1e:	2900      	cmp	r1, #0
 8001a20:	d0e2      	beq.n	80019e8 <__gedf2+0x6c>
 8001a22:	0008      	movs	r0, r1
 8001a24:	e7d3      	b.n	80019ce <__gedf2+0x52>
 8001a26:	4243      	negs	r3, r0
 8001a28:	4158      	adcs	r0, r3
 8001a2a:	0040      	lsls	r0, r0, #1
 8001a2c:	3801      	subs	r0, #1
 8001a2e:	e7ce      	b.n	80019ce <__gedf2+0x52>
 8001a30:	2002      	movs	r0, #2
 8001a32:	4240      	negs	r0, r0
 8001a34:	e7cb      	b.n	80019ce <__gedf2+0x52>
 8001a36:	45c4      	cmp	ip, r8
 8001a38:	d8c5      	bhi.n	80019c6 <__gedf2+0x4a>
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	45c4      	cmp	ip, r8
 8001a3e:	d2c6      	bcs.n	80019ce <__gedf2+0x52>
 8001a40:	e7ed      	b.n	8001a1e <__gedf2+0xa2>
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	000007ff 	.word	0x000007ff

08001a48 <__ledf2>:
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4a:	4647      	mov	r7, r8
 8001a4c:	46ce      	mov	lr, r9
 8001a4e:	0004      	movs	r4, r0
 8001a50:	0018      	movs	r0, r3
 8001a52:	0016      	movs	r6, r2
 8001a54:	031b      	lsls	r3, r3, #12
 8001a56:	0b1b      	lsrs	r3, r3, #12
 8001a58:	4d2c      	ldr	r5, [pc, #176]	; (8001b0c <__ledf2+0xc4>)
 8001a5a:	004a      	lsls	r2, r1, #1
 8001a5c:	4699      	mov	r9, r3
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	0043      	lsls	r3, r0, #1
 8001a62:	030f      	lsls	r7, r1, #12
 8001a64:	46a4      	mov	ip, r4
 8001a66:	46b0      	mov	r8, r6
 8001a68:	0b3f      	lsrs	r7, r7, #12
 8001a6a:	0d52      	lsrs	r2, r2, #21
 8001a6c:	0fc9      	lsrs	r1, r1, #31
 8001a6e:	0d5b      	lsrs	r3, r3, #21
 8001a70:	0fc0      	lsrs	r0, r0, #31
 8001a72:	42aa      	cmp	r2, r5
 8001a74:	d00d      	beq.n	8001a92 <__ledf2+0x4a>
 8001a76:	42ab      	cmp	r3, r5
 8001a78:	d010      	beq.n	8001a9c <__ledf2+0x54>
 8001a7a:	2a00      	cmp	r2, #0
 8001a7c:	d127      	bne.n	8001ace <__ledf2+0x86>
 8001a7e:	433c      	orrs	r4, r7
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d111      	bne.n	8001aa8 <__ledf2+0x60>
 8001a84:	464d      	mov	r5, r9
 8001a86:	432e      	orrs	r6, r5
 8001a88:	d10e      	bne.n	8001aa8 <__ledf2+0x60>
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	2c00      	cmp	r4, #0
 8001a8e:	d015      	beq.n	8001abc <__ledf2+0x74>
 8001a90:	e00e      	b.n	8001ab0 <__ledf2+0x68>
 8001a92:	003d      	movs	r5, r7
 8001a94:	4325      	orrs	r5, r4
 8001a96:	d110      	bne.n	8001aba <__ledf2+0x72>
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d118      	bne.n	8001ace <__ledf2+0x86>
 8001a9c:	464d      	mov	r5, r9
 8001a9e:	432e      	orrs	r6, r5
 8001aa0:	d10b      	bne.n	8001aba <__ledf2+0x72>
 8001aa2:	2a00      	cmp	r2, #0
 8001aa4:	d102      	bne.n	8001aac <__ledf2+0x64>
 8001aa6:	433c      	orrs	r4, r7
 8001aa8:	2c00      	cmp	r4, #0
 8001aaa:	d00b      	beq.n	8001ac4 <__ledf2+0x7c>
 8001aac:	4281      	cmp	r1, r0
 8001aae:	d014      	beq.n	8001ada <__ledf2+0x92>
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	3901      	subs	r1, #1
 8001ab4:	4008      	ands	r0, r1
 8001ab6:	3801      	subs	r0, #1
 8001ab8:	e000      	b.n	8001abc <__ledf2+0x74>
 8001aba:	2002      	movs	r0, #2
 8001abc:	bcc0      	pop	{r6, r7}
 8001abe:	46b9      	mov	r9, r7
 8001ac0:	46b0      	mov	r8, r6
 8001ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d1f9      	bne.n	8001abc <__ledf2+0x74>
 8001ac8:	2001      	movs	r0, #1
 8001aca:	4240      	negs	r0, r0
 8001acc:	e7f6      	b.n	8001abc <__ledf2+0x74>
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1ec      	bne.n	8001aac <__ledf2+0x64>
 8001ad2:	464c      	mov	r4, r9
 8001ad4:	4326      	orrs	r6, r4
 8001ad6:	d1e9      	bne.n	8001aac <__ledf2+0x64>
 8001ad8:	e7ea      	b.n	8001ab0 <__ledf2+0x68>
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dd04      	ble.n	8001ae8 <__ledf2+0xa0>
 8001ade:	4243      	negs	r3, r0
 8001ae0:	4158      	adcs	r0, r3
 8001ae2:	0040      	lsls	r0, r0, #1
 8001ae4:	3801      	subs	r0, #1
 8001ae6:	e7e9      	b.n	8001abc <__ledf2+0x74>
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbeb      	blt.n	8001ac4 <__ledf2+0x7c>
 8001aec:	454f      	cmp	r7, r9
 8001aee:	d8df      	bhi.n	8001ab0 <__ledf2+0x68>
 8001af0:	d006      	beq.n	8001b00 <__ledf2+0xb8>
 8001af2:	2000      	movs	r0, #0
 8001af4:	454f      	cmp	r7, r9
 8001af6:	d2e1      	bcs.n	8001abc <__ledf2+0x74>
 8001af8:	2900      	cmp	r1, #0
 8001afa:	d0e5      	beq.n	8001ac8 <__ledf2+0x80>
 8001afc:	0008      	movs	r0, r1
 8001afe:	e7dd      	b.n	8001abc <__ledf2+0x74>
 8001b00:	45c4      	cmp	ip, r8
 8001b02:	d8d5      	bhi.n	8001ab0 <__ledf2+0x68>
 8001b04:	2000      	movs	r0, #0
 8001b06:	45c4      	cmp	ip, r8
 8001b08:	d2d8      	bcs.n	8001abc <__ledf2+0x74>
 8001b0a:	e7f5      	b.n	8001af8 <__ledf2+0xb0>
 8001b0c:	000007ff 	.word	0x000007ff

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b14:	f000 fbda 	bl	80022cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b18:	f000 f880 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1c:	f000 f98e 	bl	8001e3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b20:	f000 f94c 	bl	8001dbc <MX_I2C1_Init>
  MX_ADC_Init();
 8001b24:	f000 f8e2 	bl	8001cec <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  SFM3300_Init(&hi2c1);
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <main+0xdc>)
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 faf3 	bl	8002116 <SFM3300_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // read flow sens One
	  SFM3300_Read_Current(&hi2c1, receivedData_SensorOne); // 3 byte veri okuyacak ve "receivedData_SensorOne" içine atayacak.
 8001b30:	4a2f      	ldr	r2, [pc, #188]	; (8001bf0 <main+0xe0>)
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <main+0xdc>)
 8001b34:	0011      	movs	r1, r2
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 fb1c 	bl	8002174 <SFM3300_Read_Current>

	  result = SMF3300_CheckCrc(receivedData_SensorOne, 2, receivedData_SensorOne[2]);
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <main+0xe0>)
 8001b3e:	789a      	ldrb	r2, [r3, #2]
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <main+0xe0>)
 8001b42:	2102      	movs	r1, #2
 8001b44:	0018      	movs	r0, r3
 8001b46:	f000 fb2c 	bl	80021a2 <SMF3300_CheckCrc>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <main+0xe4>)
 8001b50:	701a      	strb	r2, [r3, #0]
	  if(result == 0x00)
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <main+0xe4>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d108      	bne.n	8001b6c <main+0x5c>
	  {
		  airflow_sensorOne = SFM3300_ConvertRawData_to_FlowValue(receivedData_SensorOne);
 8001b5a:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <main+0xe0>)
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f000 fb83 	bl	8002268 <SFM3300_ConvertRawData_to_FlowValue>
 8001b62:	0002      	movs	r2, r0
 8001b64:	000b      	movs	r3, r1
 8001b66:	4924      	ldr	r1, [pc, #144]	; (8001bf8 <main+0xe8>)
 8001b68:	600a      	str	r2, [r1, #0]
 8001b6a:	604b      	str	r3, [r1, #4]
	  }

	  // read pressure sensor one

	  HAL_ADC_Start(&hadc);
 8001b6c:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <main+0xec>)
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f000 fd74 	bl	800265c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 1); // timeout 1ms
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <main+0xec>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f000 fdc3 	bl	8002704 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc);
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <main+0xec>)
 8001b80:	0018      	movs	r0, r3
 8001b82:	f000 fe57 	bl	8002834 <HAL_ADC_GetValue>
 8001b86:	0003      	movs	r3, r0
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <main+0xf0>)
 8001b8c:	801a      	strh	r2, [r3, #0]
	  pressureSens1_kPa = (uint16_t)(((((float)adc_value / 4096) -0.04 ) / 0.09)*100);
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <main+0xf0>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7fe fc7a 	bl	800048c <__aeabi_ui2f>
 8001b98:	1c03      	adds	r3, r0, #0
 8001b9a:	218b      	movs	r1, #139	; 0x8b
 8001b9c:	05c9      	lsls	r1, r1, #23
 8001b9e:	1c18      	adds	r0, r3, #0
 8001ba0:	f7fe fb5c 	bl	800025c <__aeabi_fdiv>
 8001ba4:	1c03      	adds	r3, r0, #0
 8001ba6:	1c18      	adds	r0, r3, #0
 8001ba8:	f7ff fe02 	bl	80017b0 <__aeabi_f2d>
 8001bac:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <main+0xf4>)
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <main+0xf8>)
 8001bb0:	f7ff fa10 	bl	8000fd4 <__aeabi_dsub>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	000b      	movs	r3, r1
 8001bb8:	0010      	movs	r0, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <main+0xfc>)
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <main+0x100>)
 8001bc0:	f7fe fca6 	bl	8000510 <__aeabi_ddiv>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	000b      	movs	r3, r1
 8001bc8:	0010      	movs	r0, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <main+0x104>)
 8001bd0:	f7fe ff94 	bl	8000afc <__aeabi_dmul>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	000b      	movs	r3, r1
 8001bd8:	0010      	movs	r0, r2
 8001bda:	0019      	movs	r1, r3
 8001bdc:	f7fe fb20 	bl	8000220 <__aeabi_d2uiz>
 8001be0:	0003      	movs	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <main+0x108>)
 8001be6:	801a      	strh	r2, [r3, #0]
	  SFM3300_Read_Current(&hi2c1, receivedData_SensorOne); // 3 byte veri okuyacak ve "receivedData_SensorOne" içine atayacak.
 8001be8:	e7a2      	b.n	8001b30 <main+0x20>
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	2000006c 	.word	0x2000006c
 8001bf0:	200000b8 	.word	0x200000b8
 8001bf4:	200000bb 	.word	0x200000bb
 8001bf8:	200000c0 	.word	0x200000c0
 8001bfc:	2000002c 	.word	0x2000002c
 8001c00:	200000ca 	.word	0x200000ca
 8001c04:	47ae147b 	.word	0x47ae147b
 8001c08:	3fa47ae1 	.word	0x3fa47ae1
 8001c0c:	70a3d70a 	.word	0x70a3d70a
 8001c10:	3fb70a3d 	.word	0x3fb70a3d
 8001c14:	40590000 	.word	0x40590000
 8001c18:	200000c8 	.word	0x200000c8

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b097      	sub	sp, #92	; 0x5c
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	2428      	movs	r4, #40	; 0x28
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	0018      	movs	r0, r3
 8001c28:	2330      	movs	r3, #48	; 0x30
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	f002 fd11 	bl	8004654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c32:	2318      	movs	r3, #24
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	0018      	movs	r0, r3
 8001c38:	2310      	movs	r3, #16
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f002 fd09 	bl	8004654 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	0018      	movs	r0, r3
 8001c46:	2314      	movs	r3, #20
 8001c48:	001a      	movs	r2, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	f002 fd02 	bl	8004654 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001c50:	0021      	movs	r1, r4
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	2212      	movs	r2, #18
 8001c56:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	2201      	movs	r2, #1
 8001c62:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	2210      	movs	r2, #16
 8001c68:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	2202      	movs	r2, #2
 8001c74:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	2200      	movs	r2, #0
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	22a0      	movs	r2, #160	; 0xa0
 8001c80:	0392      	lsls	r2, r2, #14
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	2200      	movs	r2, #0
 8001c88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f001 ff93 	bl	8003bb8 <HAL_RCC_OscConfig>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d001      	beq.n	8001c9a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001c96:	f000 f93b 	bl	8001f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9a:	2118      	movs	r1, #24
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f002 fa97 	bl	80041ec <HAL_RCC_ClockConfig>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d001      	beq.n	8001cc6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001cc2:	f000 f925 	bl	8001f10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2220      	movs	r2, #32
 8001cca:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f002 fbbb 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 8001cda:	1e03      	subs	r3, r0, #0
 8001cdc:	d001      	beq.n	8001ce2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001cde:	f000 f917 	bl	8001f10 <Error_Handler>
  }
}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b017      	add	sp, #92	; 0x5c
 8001ce8:	bd90      	pop	{r4, r7, pc}
	...

08001cec <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	230c      	movs	r3, #12
 8001cf8:	001a      	movs	r2, r3
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	f002 fcaa 	bl	8004654 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001d00:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d02:	4a2d      	ldr	r2, [pc, #180]	; (8001db8 <MX_ADC_Init+0xcc>)
 8001d04:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001d0c:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d12:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001d18:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d1e:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d20:	2204      	movs	r2, #4
 8001d22:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001d24:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001d36:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d3e:	22c2      	movs	r2, #194	; 0xc2
 8001d40:	32ff      	adds	r2, #255	; 0xff
 8001d42:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d4c:	2224      	movs	r2, #36	; 0x24
 8001d4e:	2100      	movs	r1, #0
 8001d50:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d52:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f000 fb3e 	bl	80023dc <HAL_ADC_Init>
 8001d60:	1e03      	subs	r3, r0, #0
 8001d62:	d001      	beq.n	8001d68 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001d64:	f000 f8d4 	bl	8001f10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	0152      	lsls	r2, r2, #5
 8001d74:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	0552      	lsls	r2, r2, #21
 8001d7c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d7e:	1d3a      	adds	r2, r7, #4
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d82:	0011      	movs	r1, r2
 8001d84:	0018      	movs	r0, r3
 8001d86:	f000 fd61 	bl	800284c <HAL_ADC_ConfigChannel>
 8001d8a:	1e03      	subs	r3, r0, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001d8e:	f000 f8bf 	bl	8001f10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	2202      	movs	r2, #2
 8001d96:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d98:	1d3a      	adds	r2, r7, #4
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_ADC_Init+0xc8>)
 8001d9c:	0011      	movs	r1, r2
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f000 fd54 	bl	800284c <HAL_ADC_ConfigChannel>
 8001da4:	1e03      	subs	r3, r0, #0
 8001da6:	d001      	beq.n	8001dac <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001da8:	f000 f8b2 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b004      	add	sp, #16
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000002c 	.word	0x2000002c
 8001db8:	40012400 	.word	0x40012400

08001dbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <MX_I2C1_Init+0x74>)
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <MX_I2C1_Init+0x78>)
 8001dc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <MX_I2C1_Init+0x74>)
 8001dc8:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <MX_I2C1_Init+0x7c>)
 8001dca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <MX_I2C1_Init+0x74>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <MX_I2C1_Init+0x74>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <MX_I2C1_Init+0x74>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_I2C1_Init+0x74>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <MX_I2C1_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_I2C1_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_I2C1_Init+0x74>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_I2C1_Init+0x74>)
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f001 f8fb 	bl	8002ff4 <HAL_I2C_Init>
 8001dfe:	1e03      	subs	r3, r0, #0
 8001e00:	d001      	beq.n	8001e06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e02:	f000 f885 	bl	8001f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <MX_I2C1_Init+0x74>)
 8001e08:	2100      	movs	r1, #0
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f001 fe3c 	bl	8003a88 <HAL_I2CEx_ConfigAnalogFilter>
 8001e10:	1e03      	subs	r3, r0, #0
 8001e12:	d001      	beq.n	8001e18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e14:	f000 f87c 	bl	8001f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <MX_I2C1_Init+0x74>)
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f001 fe7f 	bl	8003b20 <HAL_I2CEx_ConfigDigitalFilter>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d001      	beq.n	8001e2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e26:	f000 f873 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	2000006c 	.word	0x2000006c
 8001e34:	40005400 	.word	0x40005400
 8001e38:	2000090e 	.word	0x2000090e

08001e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	240c      	movs	r4, #12
 8001e44:	193b      	adds	r3, r7, r4
 8001e46:	0018      	movs	r0, r3
 8001e48:	2314      	movs	r3, #20
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	f002 fc01 	bl	8004654 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <MX_GPIO_Init+0xcc>)
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <MX_GPIO_Init+0xcc>)
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	0289      	lsls	r1, r1, #10
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	615a      	str	r2, [r3, #20]
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <MX_GPIO_Init+0xcc>)
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	029b      	lsls	r3, r3, #10
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <MX_GPIO_Init+0xcc>)
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <MX_GPIO_Init+0xcc>)
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	0309      	lsls	r1, r1, #12
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	615a      	str	r2, [r3, #20]
 8001e7c:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <MX_GPIO_Init+0xcc>)
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	031b      	lsls	r3, r3, #12
 8001e84:	4013      	ands	r3, r2
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <MX_GPIO_Init+0xcc>)
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <MX_GPIO_Init+0xcc>)
 8001e90:	2180      	movs	r1, #128	; 0x80
 8001e92:	02c9      	lsls	r1, r1, #11
 8001e94:	430a      	orrs	r2, r1
 8001e96:	615a      	str	r2, [r3, #20]
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <MX_GPIO_Init+0xcc>)
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	02db      	lsls	r3, r3, #11
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001ea6:	23c0      	movs	r3, #192	; 0xc0
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4818      	ldr	r0, [pc, #96]	; (8001f0c <MX_GPIO_Init+0xd0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	0019      	movs	r1, r3
 8001eb0:	f001 f882 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eb4:	193b      	adds	r3, r7, r4
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001eba:	193b      	adds	r3, r7, r4
 8001ebc:	2290      	movs	r2, #144	; 0x90
 8001ebe:	0352      	lsls	r2, r2, #13
 8001ec0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	193b      	adds	r3, r7, r4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ec8:	193a      	adds	r2, r7, r4
 8001eca:	2390      	movs	r3, #144	; 0x90
 8001ecc:	05db      	lsls	r3, r3, #23
 8001ece:	0011      	movs	r1, r2
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f000 ff01 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001ed6:	0021      	movs	r1, r4
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	22c0      	movs	r2, #192	; 0xc0
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <MX_GPIO_Init+0xd0>)
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	0010      	movs	r0, r2
 8001efa:	f000 feed 	bl	8002cd8 <HAL_GPIO_Init>

}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b009      	add	sp, #36	; 0x24
 8001f04:	bd90      	pop	{r4, r7, pc}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	48000800 	.word	0x48000800

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <Error_Handler+0x8>
	...

08001f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_MspInit+0x44>)
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_MspInit+0x44>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	619a      	str	r2, [r3, #24]
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_MspInit+0x44>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_MspInit+0x44>)
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_MspInit+0x44>)
 8001f40:	2180      	movs	r1, #128	; 0x80
 8001f42:	0549      	lsls	r1, r1, #21
 8001f44:	430a      	orrs	r2, r1
 8001f46:	61da      	str	r2, [r3, #28]
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_MspInit+0x44>)
 8001f4a:	69da      	ldr	r2, [r3, #28]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	055b      	lsls	r3, r3, #21
 8001f50:	4013      	ands	r3, r2
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b002      	add	sp, #8
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	2414      	movs	r4, #20
 8001f6e:	193b      	adds	r3, r7, r4
 8001f70:	0018      	movs	r0, r3
 8001f72:	2314      	movs	r3, #20
 8001f74:	001a      	movs	r2, r3
 8001f76:	2100      	movs	r1, #0
 8001f78:	f002 fb6c 	bl	8004654 <memset>
  if(hadc->Instance==ADC1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <HAL_ADC_MspInit+0x84>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d12b      	bne.n	8001fde <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_ADC_MspInit+0x88>)
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_ADC_MspInit+0x88>)
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	0089      	lsls	r1, r1, #2
 8001f90:	430a      	orrs	r2, r1
 8001f92:	619a      	str	r2, [r3, #24]
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_ADC_MspInit+0x88>)
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_ADC_MspInit+0x88>)
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_ADC_MspInit+0x88>)
 8001fa8:	2180      	movs	r1, #128	; 0x80
 8001faa:	0289      	lsls	r1, r1, #10
 8001fac:	430a      	orrs	r2, r1
 8001fae:	615a      	str	r2, [r3, #20]
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_ADC_MspInit+0x88>)
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001fbe:	193b      	adds	r3, r7, r4
 8001fc0:	2206      	movs	r2, #6
 8001fc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc4:	193b      	adds	r3, r7, r4
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	193b      	adds	r3, r7, r4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	193a      	adds	r2, r7, r4
 8001fd2:	2390      	movs	r3, #144	; 0x90
 8001fd4:	05db      	lsls	r3, r3, #23
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 fe7d 	bl	8002cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b00b      	add	sp, #44	; 0x2c
 8001fe4:	bd90      	pop	{r4, r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	40012400 	.word	0x40012400
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b08b      	sub	sp, #44	; 0x2c
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	2414      	movs	r4, #20
 8001ffa:	193b      	adds	r3, r7, r4
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	2314      	movs	r3, #20
 8002000:	001a      	movs	r2, r3
 8002002:	2100      	movs	r1, #0
 8002004:	f002 fb26 	bl	8004654 <memset>
  if(hi2c->Instance==I2C1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <HAL_I2C_MspInit+0x90>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d131      	bne.n	8002076 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <HAL_I2C_MspInit+0x94>)
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_I2C_MspInit+0x94>)
 8002018:	2180      	movs	r1, #128	; 0x80
 800201a:	02c9      	lsls	r1, r1, #11
 800201c:	430a      	orrs	r2, r1
 800201e:	615a      	str	r2, [r3, #20]
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_I2C_MspInit+0x94>)
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	02db      	lsls	r3, r3, #11
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800202e:	0021      	movs	r1, r4
 8002030:	187b      	adds	r3, r7, r1
 8002032:	22c0      	movs	r2, #192	; 0xc0
 8002034:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002036:	187b      	adds	r3, r7, r1
 8002038:	2212      	movs	r2, #18
 800203a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002042:	187b      	adds	r3, r7, r1
 8002044:	2203      	movs	r2, #3
 8002046:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002048:	187b      	adds	r3, r7, r1
 800204a:	2201      	movs	r2, #1
 800204c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	187b      	adds	r3, r7, r1
 8002050:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <HAL_I2C_MspInit+0x98>)
 8002052:	0019      	movs	r1, r3
 8002054:	0010      	movs	r0, r2
 8002056:	f000 fe3f 	bl	8002cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_I2C_MspInit+0x94>)
 800205c:	69da      	ldr	r2, [r3, #28]
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_I2C_MspInit+0x94>)
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	0389      	lsls	r1, r1, #14
 8002064:	430a      	orrs	r2, r1
 8002066:	61da      	str	r2, [r3, #28]
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_I2C_MspInit+0x94>)
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	039b      	lsls	r3, r3, #14
 8002070:	4013      	ands	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b00b      	add	sp, #44	; 0x2c
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	40005400 	.word	0x40005400
 8002084:	40021000 	.word	0x40021000
 8002088:	48000400 	.word	0x48000400

0800208c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <NMI_Handler+0x4>

08002092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <HardFault_Handler+0x4>

08002098 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b0:	f000 f954 	bl	800235c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c8:	480d      	ldr	r0, [pc, #52]	; (8002100 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ca:	490e      	ldr	r1, [pc, #56]	; (8002104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020cc:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <LoopForever+0xe>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d0:	e002      	b.n	80020d8 <LoopCopyDataInit>

080020d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d6:	3304      	adds	r3, #4

080020d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020dc:	d3f9      	bcc.n	80020d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020de:	4a0b      	ldr	r2, [pc, #44]	; (800210c <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e0:	4c0b      	ldr	r4, [pc, #44]	; (8002110 <LoopForever+0x16>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e4:	e001      	b.n	80020ea <LoopFillZerobss>

080020e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e8:	3204      	adds	r2, #4

080020ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ec:	d3fb      	bcc.n	80020e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020ee:	f7ff ffe4 	bl	80020ba <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80020f2:	f002 fa8b 	bl	800460c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020f6:	f7ff fd0b 	bl	8001b10 <main>

080020fa <LoopForever>:

LoopForever:
    b LoopForever
 80020fa:	e7fe      	b.n	80020fa <LoopForever>
  ldr   r0, =_estack
 80020fc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002108:	080047b4 	.word	0x080047b4
  ldr r2, =_sbss
 800210c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002110:	200000d0 	.word	0x200000d0

08002114 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC1_COMP_IRQHandler>

08002116 <SFM3300_Init>:
} etError;

const uint16_t i2c_timeout = 100;

void SFM3300_Init(I2C_HandleTypeDef *I2Cx)
{
 8002116:	b590      	push	{r4, r7, lr}
 8002118:	b089      	sub	sp, #36	; 0x24
 800211a:	af04      	add	r7, sp, #16
 800211c:	6078      	str	r0, [r7, #4]
    uint8_t Data;

    Data = 0x00;
 800211e:	210f      	movs	r1, #15
 8002120:	187b      	adds	r3, r7, r1
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(I2Cx, SFM3300_ADDR, 0x20, 1, &Data, 1, i2c_timeout);
 8002126:	2364      	movs	r3, #100	; 0x64
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	2301      	movs	r3, #1
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	000c      	movs	r4, r1
 8002132:	187b      	adds	r3, r7, r1
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	2301      	movs	r3, #1
 8002138:	2220      	movs	r2, #32
 800213a:	2180      	movs	r1, #128	; 0x80
 800213c:	f000 fff0 	bl	8003120 <HAL_I2C_Mem_Write>
    HAL_Delay (100);
 8002140:	2064      	movs	r0, #100	; 0x64
 8002142:	f000 f927 	bl	8002394 <HAL_Delay>

    Data = 0x00;
 8002146:	0021      	movs	r1, r4
 8002148:	187b      	adds	r3, r7, r1
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(I2Cx, SFM3300_ADDR, 0x10, 1, &Data, 1, i2c_timeout);
 800214e:	2364      	movs	r3, #100	; 0x64
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	9302      	str	r3, [sp, #8]
 8002154:	2301      	movs	r3, #1
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	187b      	adds	r3, r7, r1
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2301      	movs	r3, #1
 800215e:	2210      	movs	r2, #16
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	f000 ffdd 	bl	8003120 <HAL_I2C_Mem_Write>

    HAL_Delay (100);
 8002166:	2064      	movs	r0, #100	; 0x64
 8002168:	f000 f914 	bl	8002394 <HAL_Delay>
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	b005      	add	sp, #20
 8002172:	bd90      	pop	{r4, r7, pc}

08002174 <SFM3300_Read_Current>:

void SFM3300_Read_Current(I2C_HandleTypeDef *I2Cx, uint8_t* data)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af04      	add	r7, sp, #16
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Read(I2Cx, SFM3300_ADDR, 0x1000, 2, data, 3, i2c_timeout);
 800217e:	2364      	movs	r3, #100	; 0x64
 8002180:	0019      	movs	r1, r3
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	9102      	str	r1, [sp, #8]
 800218a:	2303      	movs	r3, #3
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	2302      	movs	r3, #2
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	f001 f8f1 	bl	800337c <HAL_I2C_Mem_Read>
}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	b002      	add	sp, #8
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <SMF3300_CheckCrc>:
//              nbrOfBytes  checksum is built for n bytes of data
//              checksum    expected checksum
// Return:      error:      CHECKSUM_ERROR = checksum does not match
//                          0 = checksum matches
//=============================================================================
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	0008      	movs	r0, r1
 80021ac:	0011      	movs	r1, r2
 80021ae:	1cfb      	adds	r3, r7, #3
 80021b0:	1c02      	adds	r2, r0, #0
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	1cbb      	adds	r3, r7, #2
 80021b6:	1c0a      	adds	r2, r1, #0
 80021b8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = 0;
 80021ba:	230f      	movs	r3, #15
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
  uint8_t byteCtr;
  // Calculates 8-Bit checksum with given polynomial
  for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr) {
 80021c2:	230e      	movs	r3, #14
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e037      	b.n	800223c <SMF3300_CheckCrc+0x9a>
    crc ^= (data[byteCtr]);
 80021cc:	230e      	movs	r3, #14
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	18d3      	adds	r3, r2, r3
 80021d6:	7819      	ldrb	r1, [r3, #0]
 80021d8:	220f      	movs	r2, #15
 80021da:	18bb      	adds	r3, r7, r2
 80021dc:	18ba      	adds	r2, r7, r2
 80021de:	7812      	ldrb	r2, [r2, #0]
 80021e0:	404a      	eors	r2, r1
 80021e2:	701a      	strb	r2, [r3, #0]
    for (uint8_t bit = 8; bit > 0; --bit) {
 80021e4:	230d      	movs	r3, #13
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	2208      	movs	r2, #8
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	e01b      	b.n	8002226 <SMF3300_CheckCrc+0x84>
      if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
 80021ee:	210f      	movs	r1, #15
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b25b      	sxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da09      	bge.n	800220e <SMF3300_CheckCrc+0x6c>
 80021fa:	187b      	adds	r3, r7, r1
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	b25b      	sxtb	r3, r3
 8002202:	2231      	movs	r2, #49	; 0x31
 8002204:	4053      	eors	r3, r2
 8002206:	b25a      	sxtb	r2, r3
 8002208:	187b      	adds	r3, r7, r1
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e005      	b.n	800221a <SMF3300_CheckCrc+0x78>
      else crc = (crc << 1);
 800220e:	230f      	movs	r3, #15
 8002210:	18fa      	adds	r2, r7, r3
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	18db      	adds	r3, r3, r3
 8002218:	7013      	strb	r3, [r2, #0]
    for (uint8_t bit = 8; bit > 0; --bit) {
 800221a:	220d      	movs	r2, #13
 800221c:	18bb      	adds	r3, r7, r2
 800221e:	18ba      	adds	r2, r7, r2
 8002220:	7812      	ldrb	r2, [r2, #0]
 8002222:	3a01      	subs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	230d      	movs	r3, #13
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1de      	bne.n	80021ee <SMF3300_CheckCrc+0x4c>
  for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr) {
 8002230:	220e      	movs	r2, #14
 8002232:	18bb      	adds	r3, r7, r2
 8002234:	18ba      	adds	r2, r7, r2
 8002236:	7812      	ldrb	r2, [r2, #0]
 8002238:	3201      	adds	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	230e      	movs	r3, #14
 800223e:	18fa      	adds	r2, r7, r3
 8002240:	1cfb      	adds	r3, r7, #3
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d3c0      	bcc.n	80021cc <SMF3300_CheckCrc+0x2a>
    }
  }
  if (crc != checksum)
 800224a:	230f      	movs	r3, #15
 800224c:	18fa      	adds	r2, r7, r3
 800224e:	1cbb      	adds	r3, r7, #2
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <SMF3300_CheckCrc+0xba>
    return CHECKSUM_ERROR;
 8002258:	2304      	movs	r3, #4
 800225a:	e000      	b.n	800225e <SMF3300_CheckCrc+0xbc>
  else
    return 0;
 800225c:	2300      	movs	r3, #0
}
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b004      	add	sp, #16
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <SFM3300_ConvertRawData_to_FlowValue>:

double SFM3300_ConvertRawData_to_FlowValue(uint8_t data[])
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	double airFlow;

	uint16_t rawData = (uint16_t)(data[0] << 8) | (uint16_t)data[1];
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b299      	uxth	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3301      	adds	r3, #1
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	b29a      	uxth	r2, r3
 8002282:	2016      	movs	r0, #22
 8002284:	183b      	adds	r3, r7, r0
 8002286:	430a      	orrs	r2, r1
 8002288:	801a      	strh	r2, [r3, #0]

	airFlow = ((double)rawData - SFM3300_offSet) / SFM3300_scaleFactor;
 800228a:	183b      	adds	r3, r7, r0
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	0018      	movs	r0, r3
 8002290:	f7ff fa68 	bl	8001764 <__aeabi_ui2d>
 8002294:	2200      	movs	r2, #0
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <SFM3300_ConvertRawData_to_FlowValue+0x5c>)
 8002298:	f7fe fe9c 	bl	8000fd4 <__aeabi_dsub>
 800229c:	0002      	movs	r2, r0
 800229e:	000b      	movs	r3, r1
 80022a0:	0010      	movs	r0, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	2200      	movs	r2, #0
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <SFM3300_ConvertRawData_to_FlowValue+0x60>)
 80022a8:	f7fe f932 	bl	8000510 <__aeabi_ddiv>
 80022ac:	0002      	movs	r2, r0
 80022ae:	000b      	movs	r3, r1
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	60fb      	str	r3, [r7, #12]

    return airFlow;
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	0010      	movs	r0, r2
 80022ba:	0019      	movs	r1, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b006      	add	sp, #24
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	40e00000 	.word	0x40e00000
 80022c8:	405e0000 	.word	0x405e0000

080022cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_Init+0x24>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_Init+0x24>)
 80022d6:	2110      	movs	r1, #16
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80022dc:	2000      	movs	r0, #0
 80022de:	f000 f809 	bl	80022f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e2:	f7ff fe1b 	bl	8001f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	40022000 	.word	0x40022000

080022f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_InitTick+0x5c>)
 80022fe:	681c      	ldr	r4, [r3, #0]
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <HAL_InitTick+0x60>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	0019      	movs	r1, r3
 8002306:	23fa      	movs	r3, #250	; 0xfa
 8002308:	0098      	lsls	r0, r3, #2
 800230a:	f7fd fefd 	bl	8000108 <__udivsi3>
 800230e:	0003      	movs	r3, r0
 8002310:	0019      	movs	r1, r3
 8002312:	0020      	movs	r0, r4
 8002314:	f7fd fef8 	bl	8000108 <__udivsi3>
 8002318:	0003      	movs	r3, r0
 800231a:	0018      	movs	r0, r3
 800231c:	f000 fccf 	bl	8002cbe <HAL_SYSTICK_Config>
 8002320:	1e03      	subs	r3, r0, #0
 8002322:	d001      	beq.n	8002328 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e00f      	b.n	8002348 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d80b      	bhi.n	8002346 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	2301      	movs	r3, #1
 8002332:	425b      	negs	r3, r3
 8002334:	2200      	movs	r2, #0
 8002336:	0018      	movs	r0, r3
 8002338:	f000 fcac 	bl	8002c94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_InitTick+0x64>)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	e000      	b.n	8002348 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b003      	add	sp, #12
 800234e:	bd90      	pop	{r4, r7, pc}
 8002350:	20000000 	.word	0x20000000
 8002354:	20000008 	.word	0x20000008
 8002358:	20000004 	.word	0x20000004

0800235c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_IncTick+0x1c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	001a      	movs	r2, r3
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_IncTick+0x20>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	18d2      	adds	r2, r2, r3
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_IncTick+0x20>)
 800236e:	601a      	str	r2, [r3, #0]
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	20000008 	.word	0x20000008
 800237c:	200000cc 	.word	0x200000cc

08002380 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  return uwTick;
 8002384:	4b02      	ldr	r3, [pc, #8]	; (8002390 <HAL_GetTick+0x10>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	200000cc 	.word	0x200000cc

08002394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff fff0 	bl	8002380 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3301      	adds	r3, #1
 80023ac:	d005      	beq.n	80023ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_Delay+0x44>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	001a      	movs	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	189b      	adds	r3, r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	f7ff ffe0 	bl	8002380 <HAL_GetTick>
 80023c0:	0002      	movs	r2, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d8f7      	bhi.n	80023bc <HAL_Delay+0x28>
  {
  }
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b004      	add	sp, #16
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	20000008 	.word	0x20000008

080023dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e4:	230f      	movs	r3, #15
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e125      	b.n	8002646 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2234      	movs	r2, #52	; 0x34
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0018      	movs	r0, r3
 8002414:	f7ff fda6 	bl	8001f64 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	2210      	movs	r2, #16
 800241e:	4013      	ands	r3, r2
 8002420:	d000      	beq.n	8002424 <HAL_ADC_Init+0x48>
 8002422:	e103      	b.n	800262c <HAL_ADC_Init+0x250>
 8002424:	230f      	movs	r3, #15
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d000      	beq.n	8002430 <HAL_ADC_Init+0x54>
 800242e:	e0fd      	b.n	800262c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2204      	movs	r2, #4
 8002438:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800243a:	d000      	beq.n	800243e <HAL_ADC_Init+0x62>
 800243c:	e0f6      	b.n	800262c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	4a83      	ldr	r2, [pc, #524]	; (8002650 <HAL_ADC_Init+0x274>)
 8002444:	4013      	ands	r3, r2
 8002446:	2202      	movs	r2, #2
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2203      	movs	r2, #3
 8002456:	4013      	ands	r3, r2
 8002458:	2b01      	cmp	r3, #1
 800245a:	d112      	bne.n	8002482 <HAL_ADC_Init+0xa6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2201      	movs	r2, #1
 8002464:	4013      	ands	r3, r2
 8002466:	2b01      	cmp	r3, #1
 8002468:	d009      	beq.n	800247e <HAL_ADC_Init+0xa2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	401a      	ands	r2, r3
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	429a      	cmp	r2, r3
 800247c:	d101      	bne.n	8002482 <HAL_ADC_Init+0xa6>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_ADC_Init+0xa8>
 8002482:	2300      	movs	r3, #0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d116      	bne.n	80024b6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2218      	movs	r2, #24
 8002490:	4393      	bics	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	0899      	lsrs	r1, r3, #2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4964      	ldr	r1, [pc, #400]	; (8002654 <HAL_ADC_Init+0x278>)
 80024c2:	400a      	ands	r2, r1
 80024c4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7e1b      	ldrb	r3, [r3, #24]
 80024ca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7e5b      	ldrb	r3, [r3, #25]
 80024d0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7e9b      	ldrb	r3, [r3, #26]
 80024d8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80024da:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d002      	beq.n	80024ea <HAL_ADC_Init+0x10e>
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	e000      	b.n	80024ec <HAL_ADC_Init+0x110>
 80024ea:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024ec:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80024f2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_Init+0x124>
 80024fc:	2304      	movs	r3, #4
 80024fe:	e000      	b.n	8002502 <HAL_ADC_Init+0x126>
 8002500:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002502:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2124      	movs	r1, #36	; 0x24
 8002508:	5c5b      	ldrb	r3, [r3, r1]
 800250a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800250c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	4313      	orrs	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7edb      	ldrb	r3, [r3, #27]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d115      	bne.n	8002548 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7e9b      	ldrb	r3, [r3, #26]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	0252      	lsls	r2, r2, #9
 800252a:	4313      	orrs	r3, r2
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	e00b      	b.n	8002548 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002534:	2220      	movs	r2, #32
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002540:	2201      	movs	r2, #1
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	23c2      	movs	r3, #194	; 0xc2
 800254e:	33ff      	adds	r3, #255	; 0xff
 8002550:	429a      	cmp	r2, r3
 8002552:	d007      	beq.n	8002564 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800255c:	4313      	orrs	r3, r2
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	4313      	orrs	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68d9      	ldr	r1, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	430a      	orrs	r2, r1
 8002572:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	055b      	lsls	r3, r3, #21
 800257c:	429a      	cmp	r2, r3
 800257e:	d01b      	beq.n	80025b8 <HAL_ADC_Init+0x1dc>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d017      	beq.n	80025b8 <HAL_ADC_Init+0x1dc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	2b02      	cmp	r3, #2
 800258e:	d013      	beq.n	80025b8 <HAL_ADC_Init+0x1dc>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	2b03      	cmp	r3, #3
 8002596:	d00f      	beq.n	80025b8 <HAL_ADC_Init+0x1dc>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	2b04      	cmp	r3, #4
 800259e:	d00b      	beq.n	80025b8 <HAL_ADC_Init+0x1dc>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d007      	beq.n	80025b8 <HAL_ADC_Init+0x1dc>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	2b06      	cmp	r3, #6
 80025ae:	d003      	beq.n	80025b8 <HAL_ADC_Init+0x1dc>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	2b07      	cmp	r3, #7
 80025b6:	d112      	bne.n	80025de <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2107      	movs	r1, #7
 80025c4:	438a      	bics	r2, r1
 80025c6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6959      	ldr	r1, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	2207      	movs	r2, #7
 80025d4:	401a      	ands	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <HAL_ADC_Init+0x27c>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d10b      	bne.n	8002606 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	2203      	movs	r2, #3
 80025fa:	4393      	bics	r3, r2
 80025fc:	2201      	movs	r2, #1
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002604:	e01c      	b.n	8002640 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	2212      	movs	r2, #18
 800260c:	4393      	bics	r3, r2
 800260e:	2210      	movs	r2, #16
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	2201      	movs	r2, #1
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002622:	230f      	movs	r3, #15
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800262a:	e009      	b.n	8002640 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	2210      	movs	r2, #16
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002638:	230f      	movs	r3, #15
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002640:	230f      	movs	r3, #15
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	781b      	ldrb	r3, [r3, #0]
}
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b004      	add	sp, #16
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	fffffefd 	.word	0xfffffefd
 8002654:	fffe0219 	.word	0xfffe0219
 8002658:	833fffe7 	.word	0x833fffe7

0800265c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002664:	230f      	movs	r3, #15
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2204      	movs	r2, #4
 8002674:	4013      	ands	r3, r2
 8002676:	d138      	bne.n	80026ea <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2234      	movs	r2, #52	; 0x34
 800267c:	5c9b      	ldrb	r3, [r3, r2]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADC_Start+0x2a>
 8002682:	2302      	movs	r3, #2
 8002684:	e038      	b.n	80026f8 <HAL_ADC_Start+0x9c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2234      	movs	r2, #52	; 0x34
 800268a:	2101      	movs	r1, #1
 800268c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7e5b      	ldrb	r3, [r3, #25]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d007      	beq.n	80026a6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002696:	230f      	movs	r3, #15
 8002698:	18fc      	adds	r4, r7, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0018      	movs	r0, r3
 800269e:	f000 f9e3 	bl	8002a68 <ADC_Enable>
 80026a2:	0003      	movs	r3, r0
 80026a4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026a6:	230f      	movs	r3, #15
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d120      	bne.n	80026f2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	4a12      	ldr	r2, [pc, #72]	; (8002700 <HAL_ADC_Start+0xa4>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	2280      	movs	r2, #128	; 0x80
 80026ba:	0052      	lsls	r2, r2, #1
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2234      	movs	r2, #52	; 0x34
 80026cc:	2100      	movs	r1, #0
 80026ce:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	221c      	movs	r2, #28
 80026d6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2104      	movs	r1, #4
 80026e4:	430a      	orrs	r2, r1
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e003      	b.n	80026f2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026ea:	230f      	movs	r3, #15
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2202      	movs	r2, #2
 80026f0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026f2:	230f      	movs	r3, #15
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	781b      	ldrb	r3, [r3, #0]
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b005      	add	sp, #20
 80026fe:	bd90      	pop	{r4, r7, pc}
 8002700:	fffff0fe 	.word	0xfffff0fe

08002704 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b08      	cmp	r3, #8
 8002714:	d102      	bne.n	800271c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002716:	2308      	movs	r3, #8
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	e014      	b.n	8002746 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	2b01      	cmp	r3, #1
 8002728:	d10b      	bne.n	8002742 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	2220      	movs	r2, #32
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2234      	movs	r2, #52	; 0x34
 800273a:	2100      	movs	r1, #0
 800273c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e071      	b.n	8002826 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002742:	230c      	movs	r3, #12
 8002744:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002746:	f7ff fe1b 	bl	8002380 <HAL_GetTick>
 800274a:	0003      	movs	r3, r0
 800274c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800274e:	e01f      	b.n	8002790 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	d01c      	beq.n	8002790 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_ADC_PollForConversion+0x68>
 800275c:	f7ff fe10 	bl	8002380 <HAL_GetTick>
 8002760:	0002      	movs	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d211      	bcs.n	8002790 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4013      	ands	r3, r2
 8002776:	d10b      	bne.n	8002790 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	2204      	movs	r2, #4
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2234      	movs	r2, #52	; 0x34
 8002788:	2100      	movs	r1, #0
 800278a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e04a      	b.n	8002826 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	d0d9      	beq.n	8002750 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	23c0      	movs	r3, #192	; 0xc0
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	4013      	ands	r3, r2
 80027b6:	d12d      	bne.n	8002814 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d129      	bne.n	8002814 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2208      	movs	r2, #8
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d122      	bne.n	8002814 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2204      	movs	r2, #4
 80027d6:	4013      	ands	r3, r2
 80027d8:	d110      	bne.n	80027fc <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	210c      	movs	r1, #12
 80027e6:	438a      	bics	r2, r1
 80027e8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	4a10      	ldr	r2, [pc, #64]	; (8002830 <HAL_ADC_PollForConversion+0x12c>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	2201      	movs	r2, #1
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
 80027fa:	e00b      	b.n	8002814 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	2220      	movs	r2, #32
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	2201      	movs	r2, #1
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7e1b      	ldrb	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	220c      	movs	r2, #12
 8002822:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b004      	add	sp, #16
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	fffffefe 	.word	0xfffffefe

08002834 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b002      	add	sp, #8
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002856:	230f      	movs	r3, #15
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	055b      	lsls	r3, r3, #21
 800286a:	429a      	cmp	r2, r3
 800286c:	d011      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x46>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	2b01      	cmp	r3, #1
 8002874:	d00d      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x46>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	2b02      	cmp	r3, #2
 800287c:	d009      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x46>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	2b03      	cmp	r3, #3
 8002884:	d005      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x46>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	2b04      	cmp	r3, #4
 800288c:	d001      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x46>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2234      	movs	r2, #52	; 0x34
 8002896:	5c9b      	ldrb	r3, [r3, r2]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x54>
 800289c:	2302      	movs	r3, #2
 800289e:	e0d0      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x1f6>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2234      	movs	r2, #52	; 0x34
 80028a4:	2101      	movs	r1, #1
 80028a6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2204      	movs	r2, #4
 80028b0:	4013      	ands	r3, r2
 80028b2:	d000      	beq.n	80028b6 <HAL_ADC_ConfigChannel+0x6a>
 80028b4:	e0b4      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a64      	ldr	r2, [pc, #400]	; (8002a4c <HAL_ADC_ConfigChannel+0x200>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d100      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x76>
 80028c0:	e082      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2201      	movs	r2, #1
 80028ce:	409a      	lsls	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	055b      	lsls	r3, r3, #21
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d037      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x108>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d033      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x108>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d02f      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x108>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d02b      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x108>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	2b04      	cmp	r3, #4
 8002902:	d027      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x108>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	2b05      	cmp	r3, #5
 800290a:	d023      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x108>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	2b06      	cmp	r3, #6
 8002912:	d01f      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x108>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	2b07      	cmp	r3, #7
 800291a:	d01b      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	2107      	movs	r1, #7
 8002928:	400b      	ands	r3, r1
 800292a:	429a      	cmp	r2, r3
 800292c:	d012      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2107      	movs	r1, #7
 800293a:	438a      	bics	r2, r1
 800293c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6959      	ldr	r1, [r3, #20]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2207      	movs	r2, #7
 800294a:	401a      	ands	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b10      	cmp	r3, #16
 800295a:	d007      	beq.n	800296c <HAL_ADC_ConfigChannel+0x120>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b11      	cmp	r3, #17
 8002962:	d003      	beq.n	800296c <HAL_ADC_ConfigChannel+0x120>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b12      	cmp	r3, #18
 800296a:	d163      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800296c:	4b38      	ldr	r3, [pc, #224]	; (8002a50 <HAL_ADC_ConfigChannel+0x204>)
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b10      	cmp	r3, #16
 8002976:	d009      	beq.n	800298c <HAL_ADC_ConfigChannel+0x140>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b11      	cmp	r3, #17
 800297e:	d102      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x13a>
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	03db      	lsls	r3, r3, #15
 8002984:	e004      	b.n	8002990 <HAL_ADC_ConfigChannel+0x144>
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	045b      	lsls	r3, r3, #17
 800298a:	e001      	b.n	8002990 <HAL_ADC_ConfigChannel+0x144>
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	4a2f      	ldr	r2, [pc, #188]	; (8002a50 <HAL_ADC_ConfigChannel+0x204>)
 8002992:	430b      	orrs	r3, r1
 8002994:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b10      	cmp	r3, #16
 800299c:	d14a      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_ADC_ConfigChannel+0x208>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	492d      	ldr	r1, [pc, #180]	; (8002a58 <HAL_ADC_ConfigChannel+0x20c>)
 80029a4:	0018      	movs	r0, r3
 80029a6:	f7fd fbaf 	bl	8000108 <__udivsi3>
 80029aa:	0003      	movs	r3, r0
 80029ac:	001a      	movs	r2, r3
 80029ae:	0013      	movs	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	189b      	adds	r3, r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029b8:	e002      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3b01      	subs	r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f9      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x16e>
 80029c6:	e035      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2101      	movs	r1, #1
 80029d4:	4099      	lsls	r1, r3
 80029d6:	000b      	movs	r3, r1
 80029d8:	43d9      	mvns	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	400a      	ands	r2, r1
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d007      	beq.n	80029fa <HAL_ADC_ConfigChannel+0x1ae>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b11      	cmp	r3, #17
 80029f0:	d003      	beq.n	80029fa <HAL_ADC_ConfigChannel+0x1ae>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b12      	cmp	r3, #18
 80029f8:	d11c      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_ADC_ConfigChannel+0x204>)
 80029fc:	6819      	ldr	r1, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d007      	beq.n	8002a16 <HAL_ADC_ConfigChannel+0x1ca>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b11      	cmp	r3, #17
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x1c6>
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_ADC_ConfigChannel+0x210>)
 8002a10:	e002      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x1cc>
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <HAL_ADC_ConfigChannel+0x214>)
 8002a14:	e000      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x1cc>
 8002a16:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <HAL_ADC_ConfigChannel+0x218>)
 8002a18:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <HAL_ADC_ConfigChannel+0x204>)
 8002a1a:	400b      	ands	r3, r1
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e009      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	2220      	movs	r2, #32
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002a2c:	230f      	movs	r3, #15
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2234      	movs	r2, #52	; 0x34
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	781b      	ldrb	r3, [r3, #0]
}
 8002a42:	0018      	movs	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b004      	add	sp, #16
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	00001001 	.word	0x00001001
 8002a50:	40012708 	.word	0x40012708
 8002a54:	20000000 	.word	0x20000000
 8002a58:	000f4240 	.word	0x000f4240
 8002a5c:	ffbfffff 	.word	0xffbfffff
 8002a60:	feffffff 	.word	0xfeffffff
 8002a64:	ff7fffff 	.word	0xff7fffff

08002a68 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2203      	movs	r2, #3
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d112      	bne.n	8002aac <ADC_Enable+0x44>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d009      	beq.n	8002aa8 <ADC_Enable+0x40>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d101      	bne.n	8002aac <ADC_Enable+0x44>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <ADC_Enable+0x46>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d152      	bne.n	8002b58 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a2a      	ldr	r2, [pc, #168]	; (8002b64 <ADC_Enable+0xfc>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	d00d      	beq.n	8002ada <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	2201      	movs	r2, #1
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e03f      	b.n	8002b5a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002aea:	4b1f      	ldr	r3, [pc, #124]	; (8002b68 <ADC_Enable+0x100>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	491f      	ldr	r1, [pc, #124]	; (8002b6c <ADC_Enable+0x104>)
 8002af0:	0018      	movs	r0, r3
 8002af2:	f7fd fb09 	bl	8000108 <__udivsi3>
 8002af6:	0003      	movs	r3, r0
 8002af8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002afa:	e002      	b.n	8002b02 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f9      	bne.n	8002afc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b08:	f7ff fc3a 	bl	8002380 <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b10:	e01b      	b.n	8002b4a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b12:	f7ff fc35 	bl	8002380 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d914      	bls.n	8002b4a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2201      	movs	r2, #1
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d00d      	beq.n	8002b4a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	2210      	movs	r2, #16
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2201      	movs	r2, #1
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e007      	b.n	8002b5a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2201      	movs	r2, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d1dc      	bne.n	8002b12 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b004      	add	sp, #16
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	80000017 	.word	0x80000017
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	000f4240 	.word	0x000f4240

08002b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	0002      	movs	r2, r0
 8002b78:	6039      	str	r1, [r7, #0]
 8002b7a:	1dfb      	adds	r3, r7, #7
 8002b7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	1dfb      	adds	r3, r7, #7
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b7f      	cmp	r3, #127	; 0x7f
 8002b84:	d828      	bhi.n	8002bd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b86:	4a2f      	ldr	r2, [pc, #188]	; (8002c44 <__NVIC_SetPriority+0xd4>)
 8002b88:	1dfb      	adds	r3, r7, #7
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	b25b      	sxtb	r3, r3
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	33c0      	adds	r3, #192	; 0xc0
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	589b      	ldr	r3, [r3, r2]
 8002b96:	1dfa      	adds	r2, r7, #7
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	400a      	ands	r2, r1
 8002ba0:	00d2      	lsls	r2, r2, #3
 8002ba2:	21ff      	movs	r1, #255	; 0xff
 8002ba4:	4091      	lsls	r1, r2
 8002ba6:	000a      	movs	r2, r1
 8002ba8:	43d2      	mvns	r2, r2
 8002baa:	401a      	ands	r2, r3
 8002bac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	019b      	lsls	r3, r3, #6
 8002bb2:	22ff      	movs	r2, #255	; 0xff
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	1dfb      	adds	r3, r7, #7
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	4003      	ands	r3, r0
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bc4:	481f      	ldr	r0, [pc, #124]	; (8002c44 <__NVIC_SetPriority+0xd4>)
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b25b      	sxtb	r3, r3
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	33c0      	adds	r3, #192	; 0xc0
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002bd6:	e031      	b.n	8002c3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <__NVIC_SetPriority+0xd8>)
 8002bda:	1dfb      	adds	r3, r7, #7
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	0019      	movs	r1, r3
 8002be0:	230f      	movs	r3, #15
 8002be2:	400b      	ands	r3, r1
 8002be4:	3b08      	subs	r3, #8
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	3306      	adds	r3, #6
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	18d3      	adds	r3, r2, r3
 8002bee:	3304      	adds	r3, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	1dfa      	adds	r2, r7, #7
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	0011      	movs	r1, r2
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	00d2      	lsls	r2, r2, #3
 8002bfe:	21ff      	movs	r1, #255	; 0xff
 8002c00:	4091      	lsls	r1, r2
 8002c02:	000a      	movs	r2, r1
 8002c04:	43d2      	mvns	r2, r2
 8002c06:	401a      	ands	r2, r3
 8002c08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	019b      	lsls	r3, r3, #6
 8002c0e:	22ff      	movs	r2, #255	; 0xff
 8002c10:	401a      	ands	r2, r3
 8002c12:	1dfb      	adds	r3, r7, #7
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	0018      	movs	r0, r3
 8002c18:	2303      	movs	r3, #3
 8002c1a:	4003      	ands	r3, r0
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c20:	4809      	ldr	r0, [pc, #36]	; (8002c48 <__NVIC_SetPriority+0xd8>)
 8002c22:	1dfb      	adds	r3, r7, #7
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	001c      	movs	r4, r3
 8002c28:	230f      	movs	r3, #15
 8002c2a:	4023      	ands	r3, r4
 8002c2c:	3b08      	subs	r3, #8
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	430a      	orrs	r2, r1
 8002c32:	3306      	adds	r3, #6
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	18c3      	adds	r3, r0, r3
 8002c38:	3304      	adds	r3, #4
 8002c3a:	601a      	str	r2, [r3, #0]
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b003      	add	sp, #12
 8002c42:	bd90      	pop	{r4, r7, pc}
 8002c44:	e000e100 	.word	0xe000e100
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1e5a      	subs	r2, r3, #1
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	045b      	lsls	r3, r3, #17
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d301      	bcc.n	8002c64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c60:	2301      	movs	r3, #1
 8002c62:	e010      	b.n	8002c86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <SysTick_Config+0x44>)
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	3a01      	subs	r2, #1
 8002c6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	425b      	negs	r3, r3
 8002c70:	2103      	movs	r1, #3
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff ff7c 	bl	8002b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <SysTick_Config+0x44>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <SysTick_Config+0x44>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b002      	add	sp, #8
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	210f      	movs	r1, #15
 8002ca0:	187b      	adds	r3, r7, r1
 8002ca2:	1c02      	adds	r2, r0, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	187b      	adds	r3, r7, r1
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	0011      	movs	r1, r2
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7ff ff5d 	bl	8002b70 <__NVIC_SetPriority>
}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b004      	add	sp, #16
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff ffbf 	bl	8002c4c <SysTick_Config>
 8002cce:	0003      	movs	r3, r0
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b002      	add	sp, #8
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ce6:	e14f      	b.n	8002f88 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2101      	movs	r1, #1
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4091      	lsls	r1, r2
 8002cf2:	000a      	movs	r2, r1
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d100      	bne.n	8002d00 <HAL_GPIO_Init+0x28>
 8002cfe:	e140      	b.n	8002f82 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2203      	movs	r2, #3
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d005      	beq.n	8002d18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2203      	movs	r2, #3
 8002d12:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d130      	bne.n	8002d7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	2203      	movs	r2, #3
 8002d24:	409a      	lsls	r2, r3
 8002d26:	0013      	movs	r3, r2
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	0013      	movs	r3, r2
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d4e:	2201      	movs	r2, #1
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	409a      	lsls	r2, r3
 8002d54:	0013      	movs	r3, r2
 8002d56:	43da      	mvns	r2, r3
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	2201      	movs	r2, #1
 8002d66:	401a      	ands	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	0013      	movs	r3, r2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2203      	movs	r2, #3
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d017      	beq.n	8002db6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2203      	movs	r2, #3
 8002d92:	409a      	lsls	r2, r3
 8002d94:	0013      	movs	r3, r2
 8002d96:	43da      	mvns	r2, r3
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	409a      	lsls	r2, r3
 8002da8:	0013      	movs	r3, r2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2203      	movs	r2, #3
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d123      	bne.n	8002e0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	08da      	lsrs	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3208      	adds	r2, #8
 8002dca:	0092      	lsls	r2, r2, #2
 8002dcc:	58d3      	ldr	r3, [r2, r3]
 8002dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	220f      	movs	r2, #15
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	0013      	movs	r3, r2
 8002dde:	43da      	mvns	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2107      	movs	r1, #7
 8002dee:	400b      	ands	r3, r1
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	409a      	lsls	r2, r3
 8002df4:	0013      	movs	r3, r2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	08da      	lsrs	r2, r3, #3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3208      	adds	r2, #8
 8002e04:	0092      	lsls	r2, r2, #2
 8002e06:	6939      	ldr	r1, [r7, #16]
 8002e08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	2203      	movs	r2, #3
 8002e16:	409a      	lsls	r2, r3
 8002e18:	0013      	movs	r3, r2
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2203      	movs	r2, #3
 8002e28:	401a      	ands	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	0013      	movs	r3, r2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	23c0      	movs	r3, #192	; 0xc0
 8002e44:	029b      	lsls	r3, r3, #10
 8002e46:	4013      	ands	r3, r2
 8002e48:	d100      	bne.n	8002e4c <HAL_GPIO_Init+0x174>
 8002e4a:	e09a      	b.n	8002f82 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4c:	4b54      	ldr	r3, [pc, #336]	; (8002fa0 <HAL_GPIO_Init+0x2c8>)
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <HAL_GPIO_Init+0x2c8>)
 8002e52:	2101      	movs	r1, #1
 8002e54:	430a      	orrs	r2, r1
 8002e56:	619a      	str	r2, [r3, #24]
 8002e58:	4b51      	ldr	r3, [pc, #324]	; (8002fa0 <HAL_GPIO_Init+0x2c8>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4013      	ands	r3, r2
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e64:	4a4f      	ldr	r2, [pc, #316]	; (8002fa4 <HAL_GPIO_Init+0x2cc>)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	089b      	lsrs	r3, r3, #2
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	589b      	ldr	r3, [r3, r2]
 8002e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2203      	movs	r2, #3
 8002e76:	4013      	ands	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	0013      	movs	r3, r2
 8002e80:	43da      	mvns	r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	2390      	movs	r3, #144	; 0x90
 8002e8c:	05db      	lsls	r3, r3, #23
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d013      	beq.n	8002eba <HAL_GPIO_Init+0x1e2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a44      	ldr	r2, [pc, #272]	; (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00d      	beq.n	8002eb6 <HAL_GPIO_Init+0x1de>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a43      	ldr	r2, [pc, #268]	; (8002fac <HAL_GPIO_Init+0x2d4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d007      	beq.n	8002eb2 <HAL_GPIO_Init+0x1da>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a42      	ldr	r2, [pc, #264]	; (8002fb0 <HAL_GPIO_Init+0x2d8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <HAL_GPIO_Init+0x1d6>
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e006      	b.n	8002ebc <HAL_GPIO_Init+0x1e4>
 8002eae:	2305      	movs	r3, #5
 8002eb0:	e004      	b.n	8002ebc <HAL_GPIO_Init+0x1e4>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_Init+0x1e4>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_GPIO_Init+0x1e4>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	2103      	movs	r1, #3
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	0092      	lsls	r2, r2, #2
 8002ec4:	4093      	lsls	r3, r2
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ecc:	4935      	ldr	r1, [pc, #212]	; (8002fa4 <HAL_GPIO_Init+0x2cc>)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eda:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_GPIO_Init+0x2dc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	025b      	lsls	r3, r3, #9
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_GPIO_Init+0x2dc>)
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002f04:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <HAL_GPIO_Init+0x2dc>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	029b      	lsls	r3, r3, #10
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_GPIO_Init+0x2dc>)
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <HAL_GPIO_Init+0x2dc>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	43da      	mvns	r2, r3
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	035b      	lsls	r3, r3, #13
 8002f46:	4013      	ands	r3, r2
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f52:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <HAL_GPIO_Init+0x2dc>)
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002f58:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <HAL_GPIO_Init+0x2dc>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	43da      	mvns	r2, r3
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	039b      	lsls	r3, r3, #14
 8002f70:	4013      	ands	r3, r2
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_GPIO_Init+0x2dc>)
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3301      	adds	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	40da      	lsrs	r2, r3
 8002f90:	1e13      	subs	r3, r2, #0
 8002f92:	d000      	beq.n	8002f96 <HAL_GPIO_Init+0x2be>
 8002f94:	e6a8      	b.n	8002ce8 <HAL_GPIO_Init+0x10>
  } 
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b006      	add	sp, #24
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	48000400 	.word	0x48000400
 8002fac:	48000800 	.word	0x48000800
 8002fb0:	48000c00 	.word	0x48000c00
 8002fb4:	40010400 	.word	0x40010400

08002fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	0008      	movs	r0, r1
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	1cbb      	adds	r3, r7, #2
 8002fc6:	1c02      	adds	r2, r0, #0
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	1c7b      	adds	r3, r7, #1
 8002fcc:	1c0a      	adds	r2, r1, #0
 8002fce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fd0:	1c7b      	adds	r3, r7, #1
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fd8:	1cbb      	adds	r3, r7, #2
 8002fda:	881a      	ldrh	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fe0:	e003      	b.n	8002fea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fe2:	1cbb      	adds	r3, r7, #2
 8002fe4:	881a      	ldrh	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b002      	add	sp, #8
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e082      	b.n	800310c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2241      	movs	r2, #65	; 0x41
 800300a:	5c9b      	ldrb	r3, [r3, r2]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2240      	movs	r2, #64	; 0x40
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	0018      	movs	r0, r3
 800301e:	f7fe ffe7 	bl	8001ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2241      	movs	r2, #65	; 0x41
 8003026:	2124      	movs	r1, #36	; 0x24
 8003028:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	438a      	bics	r2, r1
 8003038:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4934      	ldr	r1, [pc, #208]	; (8003114 <HAL_I2C_Init+0x120>)
 8003044:	400a      	ands	r2, r1
 8003046:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4931      	ldr	r1, [pc, #196]	; (8003118 <HAL_I2C_Init+0x124>)
 8003054:	400a      	ands	r2, r1
 8003056:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d108      	bne.n	8003072 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	0209      	lsls	r1, r1, #8
 800306c:	430a      	orrs	r2, r1
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e007      	b.n	8003082 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2184      	movs	r1, #132	; 0x84
 800307c:	0209      	lsls	r1, r1, #8
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d104      	bne.n	8003094 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	0112      	lsls	r2, r2, #4
 8003092:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	491f      	ldr	r1, [pc, #124]	; (800311c <HAL_I2C_Init+0x128>)
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	491a      	ldr	r1, [pc, #104]	; (8003118 <HAL_I2C_Init+0x124>)
 80030b0:	400a      	ands	r2, r1
 80030b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	431a      	orrs	r2, r3
 80030be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69d9      	ldr	r1, [r3, #28]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1a      	ldr	r2, [r3, #32]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2101      	movs	r1, #1
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2241      	movs	r2, #65	; 0x41
 80030f8:	2120      	movs	r1, #32
 80030fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2242      	movs	r2, #66	; 0x42
 8003106:	2100      	movs	r1, #0
 8003108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}
 8003114:	f0ffffff 	.word	0xf0ffffff
 8003118:	ffff7fff 	.word	0xffff7fff
 800311c:	02008000 	.word	0x02008000

08003120 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	000c      	movs	r4, r1
 800312a:	0010      	movs	r0, r2
 800312c:	0019      	movs	r1, r3
 800312e:	230a      	movs	r3, #10
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	1c22      	adds	r2, r4, #0
 8003134:	801a      	strh	r2, [r3, #0]
 8003136:	2308      	movs	r3, #8
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	1c02      	adds	r2, r0, #0
 800313c:	801a      	strh	r2, [r3, #0]
 800313e:	1dbb      	adds	r3, r7, #6
 8003140:	1c0a      	adds	r2, r1, #0
 8003142:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2241      	movs	r2, #65	; 0x41
 8003148:	5c9b      	ldrb	r3, [r3, r2]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b20      	cmp	r3, #32
 800314e:	d000      	beq.n	8003152 <HAL_I2C_Mem_Write+0x32>
 8003150:	e10c      	b.n	800336c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <HAL_I2C_Mem_Write+0x42>
 8003158:	232c      	movs	r3, #44	; 0x2c
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	0092      	lsls	r2, r2, #2
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0ff      	b.n	800336e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2240      	movs	r2, #64	; 0x40
 8003172:	5c9b      	ldrb	r3, [r3, r2]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_I2C_Mem_Write+0x5c>
 8003178:	2302      	movs	r3, #2
 800317a:	e0f8      	b.n	800336e <HAL_I2C_Mem_Write+0x24e>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2240      	movs	r2, #64	; 0x40
 8003180:	2101      	movs	r1, #1
 8003182:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003184:	f7ff f8fc 	bl	8002380 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	0219      	lsls	r1, r3, #8
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	2319      	movs	r3, #25
 8003198:	2201      	movs	r2, #1
 800319a:	f000 fb0b 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 800319e:	1e03      	subs	r3, r0, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0e3      	b.n	800336e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2241      	movs	r2, #65	; 0x41
 80031aa:	2121      	movs	r1, #33	; 0x21
 80031ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2242      	movs	r2, #66	; 0x42
 80031b2:	2140      	movs	r1, #64	; 0x40
 80031b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	222c      	movs	r2, #44	; 0x2c
 80031c6:	18ba      	adds	r2, r7, r2
 80031c8:	8812      	ldrh	r2, [r2, #0]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031d2:	1dbb      	adds	r3, r7, #6
 80031d4:	881c      	ldrh	r4, [r3, #0]
 80031d6:	2308      	movs	r3, #8
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	881a      	ldrh	r2, [r3, #0]
 80031dc:	230a      	movs	r3, #10
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	8819      	ldrh	r1, [r3, #0]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	0023      	movs	r3, r4
 80031ee:	f000 f9f9 	bl	80035e4 <I2C_RequestMemoryWrite>
 80031f2:	1e03      	subs	r3, r0, #0
 80031f4:	d005      	beq.n	8003202 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2240      	movs	r2, #64	; 0x40
 80031fa:	2100      	movs	r1, #0
 80031fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e0b5      	b.n	800336e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	2bff      	cmp	r3, #255	; 0xff
 800320a:	d911      	bls.n	8003230 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	22ff      	movs	r2, #255	; 0xff
 8003210:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	b2da      	uxtb	r2, r3
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	045c      	lsls	r4, r3, #17
 800321c:	230a      	movs	r3, #10
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	8819      	ldrh	r1, [r3, #0]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	2300      	movs	r3, #0
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	0023      	movs	r3, r4
 800322a:	f000 fbf7 	bl	8003a1c <I2C_TransferConfig>
 800322e:	e012      	b.n	8003256 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	b2da      	uxtb	r2, r3
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	049c      	lsls	r4, r3, #18
 8003244:	230a      	movs	r3, #10
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	8819      	ldrh	r1, [r3, #0]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	2300      	movs	r3, #0
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	0023      	movs	r3, r4
 8003252:	f000 fbe3 	bl	8003a1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	0018      	movs	r0, r3
 800325e:	f000 fae8 	bl	8003832 <I2C_WaitOnTXISFlagUntilTimeout>
 8003262:	1e03      	subs	r3, r0, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e081      	b.n	800336e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d03a      	beq.n	800331a <HAL_I2C_Mem_Write+0x1fa>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d136      	bne.n	800331a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	0013      	movs	r3, r2
 80032b6:	2200      	movs	r2, #0
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	f000 fa7b 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 80032be:	1e03      	subs	r3, r0, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e053      	b.n	800336e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2bff      	cmp	r3, #255	; 0xff
 80032ce:	d911      	bls.n	80032f4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	22ff      	movs	r2, #255	; 0xff
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	045c      	lsls	r4, r3, #17
 80032e0:	230a      	movs	r3, #10
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	8819      	ldrh	r1, [r3, #0]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	2300      	movs	r3, #0
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	0023      	movs	r3, r4
 80032ee:	f000 fb95 	bl	8003a1c <I2C_TransferConfig>
 80032f2:	e012      	b.n	800331a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	b2da      	uxtb	r2, r3
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	049c      	lsls	r4, r3, #18
 8003308:	230a      	movs	r3, #10
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	8819      	ldrh	r1, [r3, #0]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	2300      	movs	r3, #0
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	0023      	movs	r3, r4
 8003316:	f000 fb81 	bl	8003a1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d198      	bne.n	8003256 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	0018      	movs	r0, r3
 800332c:	f000 fac0 	bl	80038b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003330:	1e03      	subs	r3, r0, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e01a      	b.n	800336e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2220      	movs	r2, #32
 800333e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	490b      	ldr	r1, [pc, #44]	; (8003378 <HAL_I2C_Mem_Write+0x258>)
 800334c:	400a      	ands	r2, r1
 800334e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2241      	movs	r2, #65	; 0x41
 8003354:	2120      	movs	r1, #32
 8003356:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2242      	movs	r2, #66	; 0x42
 800335c:	2100      	movs	r1, #0
 800335e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2240      	movs	r2, #64	; 0x40
 8003364:	2100      	movs	r1, #0
 8003366:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	e000      	b.n	800336e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800336c:	2302      	movs	r3, #2
  }
}
 800336e:	0018      	movs	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	b007      	add	sp, #28
 8003374:	bd90      	pop	{r4, r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	fe00e800 	.word	0xfe00e800

0800337c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	000c      	movs	r4, r1
 8003386:	0010      	movs	r0, r2
 8003388:	0019      	movs	r1, r3
 800338a:	230a      	movs	r3, #10
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	1c22      	adds	r2, r4, #0
 8003390:	801a      	strh	r2, [r3, #0]
 8003392:	2308      	movs	r3, #8
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	1c02      	adds	r2, r0, #0
 8003398:	801a      	strh	r2, [r3, #0]
 800339a:	1dbb      	adds	r3, r7, #6
 800339c:	1c0a      	adds	r2, r1, #0
 800339e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2241      	movs	r2, #65	; 0x41
 80033a4:	5c9b      	ldrb	r3, [r3, r2]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d000      	beq.n	80033ae <HAL_I2C_Mem_Read+0x32>
 80033ac:	e110      	b.n	80035d0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <HAL_I2C_Mem_Read+0x42>
 80033b4:	232c      	movs	r3, #44	; 0x2c
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2280      	movs	r2, #128	; 0x80
 80033c2:	0092      	lsls	r2, r2, #2
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e103      	b.n	80035d2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2240      	movs	r2, #64	; 0x40
 80033ce:	5c9b      	ldrb	r3, [r3, r2]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_I2C_Mem_Read+0x5c>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e0fc      	b.n	80035d2 <HAL_I2C_Mem_Read+0x256>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2240      	movs	r2, #64	; 0x40
 80033dc:	2101      	movs	r1, #1
 80033de:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033e0:	f7fe ffce 	bl	8002380 <HAL_GetTick>
 80033e4:	0003      	movs	r3, r0
 80033e6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	0219      	lsls	r1, r3, #8
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2319      	movs	r3, #25
 80033f4:	2201      	movs	r2, #1
 80033f6:	f000 f9dd 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0e7      	b.n	80035d2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2241      	movs	r2, #65	; 0x41
 8003406:	2122      	movs	r1, #34	; 0x22
 8003408:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2242      	movs	r2, #66	; 0x42
 800340e:	2140      	movs	r1, #64	; 0x40
 8003410:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	222c      	movs	r2, #44	; 0x2c
 8003422:	18ba      	adds	r2, r7, r2
 8003424:	8812      	ldrh	r2, [r2, #0]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800342e:	1dbb      	adds	r3, r7, #6
 8003430:	881c      	ldrh	r4, [r3, #0]
 8003432:	2308      	movs	r3, #8
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	881a      	ldrh	r2, [r3, #0]
 8003438:	230a      	movs	r3, #10
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	8819      	ldrh	r1, [r3, #0]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	0023      	movs	r3, r4
 800344a:	f000 f92f 	bl	80036ac <I2C_RequestMemoryRead>
 800344e:	1e03      	subs	r3, r0, #0
 8003450:	d005      	beq.n	800345e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2240      	movs	r2, #64	; 0x40
 8003456:	2100      	movs	r1, #0
 8003458:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e0b9      	b.n	80035d2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	2bff      	cmp	r3, #255	; 0xff
 8003466:	d911      	bls.n	800348c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	22ff      	movs	r2, #255	; 0xff
 800346c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	b2da      	uxtb	r2, r3
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	045c      	lsls	r4, r3, #17
 8003478:	230a      	movs	r3, #10
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	8819      	ldrh	r1, [r3, #0]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	4b56      	ldr	r3, [pc, #344]	; (80035dc <HAL_I2C_Mem_Read+0x260>)
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	0023      	movs	r3, r4
 8003486:	f000 fac9 	bl	8003a1c <I2C_TransferConfig>
 800348a:	e012      	b.n	80034b2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	b2da      	uxtb	r2, r3
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	049c      	lsls	r4, r3, #18
 80034a0:	230a      	movs	r3, #10
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	8819      	ldrh	r1, [r3, #0]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	4b4c      	ldr	r3, [pc, #304]	; (80035dc <HAL_I2C_Mem_Read+0x260>)
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	0023      	movs	r3, r4
 80034ae:	f000 fab5 	bl	8003a1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	0013      	movs	r3, r2
 80034bc:	2200      	movs	r2, #0
 80034be:	2104      	movs	r1, #4
 80034c0:	f000 f978 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 80034c4:	1e03      	subs	r3, r0, #0
 80034c6:	d001      	beq.n	80034cc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e082      	b.n	80035d2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d03a      	beq.n	800357e <HAL_I2C_Mem_Read+0x202>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d136      	bne.n	800357e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	0013      	movs	r3, r2
 800351a:	2200      	movs	r2, #0
 800351c:	2180      	movs	r1, #128	; 0x80
 800351e:	f000 f949 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e053      	b.n	80035d2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	2bff      	cmp	r3, #255	; 0xff
 8003532:	d911      	bls.n	8003558 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	22ff      	movs	r2, #255	; 0xff
 8003538:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353e:	b2da      	uxtb	r2, r3
 8003540:	2380      	movs	r3, #128	; 0x80
 8003542:	045c      	lsls	r4, r3, #17
 8003544:	230a      	movs	r3, #10
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	8819      	ldrh	r1, [r3, #0]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	2300      	movs	r3, #0
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	0023      	movs	r3, r4
 8003552:	f000 fa63 	bl	8003a1c <I2C_TransferConfig>
 8003556:	e012      	b.n	800357e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	b2da      	uxtb	r2, r3
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	049c      	lsls	r4, r3, #18
 800356c:	230a      	movs	r3, #10
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	8819      	ldrh	r1, [r3, #0]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	2300      	movs	r3, #0
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	0023      	movs	r3, r4
 800357a:	f000 fa4f 	bl	8003a1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d194      	bne.n	80034b2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	0018      	movs	r0, r3
 8003590:	f000 f98e 	bl	80038b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003594:	1e03      	subs	r3, r0, #0
 8003596:	d001      	beq.n	800359c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e01a      	b.n	80035d2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2220      	movs	r2, #32
 80035a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	490c      	ldr	r1, [pc, #48]	; (80035e0 <HAL_I2C_Mem_Read+0x264>)
 80035b0:	400a      	ands	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2241      	movs	r2, #65	; 0x41
 80035b8:	2120      	movs	r1, #32
 80035ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2242      	movs	r2, #66	; 0x42
 80035c0:	2100      	movs	r1, #0
 80035c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2240      	movs	r2, #64	; 0x40
 80035c8:	2100      	movs	r1, #0
 80035ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b007      	add	sp, #28
 80035d8:	bd90      	pop	{r4, r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	80002400 	.word	0x80002400
 80035e0:	fe00e800 	.word	0xfe00e800

080035e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80035e4:	b5b0      	push	{r4, r5, r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	000c      	movs	r4, r1
 80035ee:	0010      	movs	r0, r2
 80035f0:	0019      	movs	r1, r3
 80035f2:	250a      	movs	r5, #10
 80035f4:	197b      	adds	r3, r7, r5
 80035f6:	1c22      	adds	r2, r4, #0
 80035f8:	801a      	strh	r2, [r3, #0]
 80035fa:	2308      	movs	r3, #8
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	1c02      	adds	r2, r0, #0
 8003600:	801a      	strh	r2, [r3, #0]
 8003602:	1dbb      	adds	r3, r7, #6
 8003604:	1c0a      	adds	r2, r1, #0
 8003606:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003608:	1dbb      	adds	r3, r7, #6
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	045c      	lsls	r4, r3, #17
 8003612:	197b      	adds	r3, r7, r5
 8003614:	8819      	ldrh	r1, [r3, #0]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <I2C_RequestMemoryWrite+0xc4>)
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	0023      	movs	r3, r4
 800361e:	f000 f9fd 	bl	8003a1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	6a39      	ldr	r1, [r7, #32]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	0018      	movs	r0, r3
 800362a:	f000 f902 	bl	8003832 <I2C_WaitOnTXISFlagUntilTimeout>
 800362e:	1e03      	subs	r3, r0, #0
 8003630:	d001      	beq.n	8003636 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e033      	b.n	800369e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003636:	1dbb      	adds	r3, r7, #6
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800363e:	2308      	movs	r3, #8
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	629a      	str	r2, [r3, #40]	; 0x28
 800364c:	e019      	b.n	8003682 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800364e:	2308      	movs	r3, #8
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	b29b      	uxth	r3, r3
 8003658:	b2da      	uxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003662:	6a39      	ldr	r1, [r7, #32]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	0018      	movs	r0, r3
 8003668:	f000 f8e3 	bl	8003832 <I2C_WaitOnTXISFlagUntilTimeout>
 800366c:	1e03      	subs	r3, r0, #0
 800366e:	d001      	beq.n	8003674 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e014      	b.n	800369e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003674:	2308      	movs	r3, #8
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003682:	6a3a      	ldr	r2, [r7, #32]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	0013      	movs	r3, r2
 800368c:	2200      	movs	r2, #0
 800368e:	2180      	movs	r1, #128	; 0x80
 8003690:	f000 f890 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d001      	beq.n	800369c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b004      	add	sp, #16
 80036a4:	bdb0      	pop	{r4, r5, r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	80002000 	.word	0x80002000

080036ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036ac:	b5b0      	push	{r4, r5, r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	000c      	movs	r4, r1
 80036b6:	0010      	movs	r0, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	250a      	movs	r5, #10
 80036bc:	197b      	adds	r3, r7, r5
 80036be:	1c22      	adds	r2, r4, #0
 80036c0:	801a      	strh	r2, [r3, #0]
 80036c2:	2308      	movs	r3, #8
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	1c02      	adds	r2, r0, #0
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	1dbb      	adds	r3, r7, #6
 80036cc:	1c0a      	adds	r2, r1, #0
 80036ce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036d0:	1dbb      	adds	r3, r7, #6
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	197b      	adds	r3, r7, r5
 80036d8:	8819      	ldrh	r1, [r3, #0]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	4b23      	ldr	r3, [pc, #140]	; (800376c <I2C_RequestMemoryRead+0xc0>)
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2300      	movs	r3, #0
 80036e2:	f000 f99b 	bl	8003a1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e8:	6a39      	ldr	r1, [r7, #32]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 f8a0 	bl	8003832 <I2C_WaitOnTXISFlagUntilTimeout>
 80036f2:	1e03      	subs	r3, r0, #0
 80036f4:	d001      	beq.n	80036fa <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e033      	b.n	8003762 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036fa:	1dbb      	adds	r3, r7, #6
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d107      	bne.n	8003712 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003702:	2308      	movs	r3, #8
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
 8003710:	e019      	b.n	8003746 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003712:	2308      	movs	r3, #8
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	b29b      	uxth	r3, r3
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003726:	6a39      	ldr	r1, [r7, #32]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	0018      	movs	r0, r3
 800372c:	f000 f881 	bl	8003832 <I2C_WaitOnTXISFlagUntilTimeout>
 8003730:	1e03      	subs	r3, r0, #0
 8003732:	d001      	beq.n	8003738 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e014      	b.n	8003762 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003738:	2308      	movs	r3, #8
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003746:	6a3a      	ldr	r2, [r7, #32]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	0013      	movs	r3, r2
 8003750:	2200      	movs	r2, #0
 8003752:	2140      	movs	r1, #64	; 0x40
 8003754:	f000 f82e 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003758:	1e03      	subs	r3, r0, #0
 800375a:	d001      	beq.n	8003760 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bdb0      	pop	{r4, r5, r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	80002000 	.word	0x80002000

08003770 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2202      	movs	r2, #2
 8003780:	4013      	ands	r3, r2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d103      	bne.n	800378e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2201      	movs	r2, #1
 8003796:	4013      	ands	r3, r2
 8003798:	2b01      	cmp	r3, #1
 800379a:	d007      	beq.n	80037ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2101      	movs	r1, #1
 80037a8:	430a      	orrs	r2, r1
 80037aa:	619a      	str	r2, [r3, #24]
  }
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b002      	add	sp, #8
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	1dfb      	adds	r3, r7, #7
 80037c2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c4:	e021      	b.n	800380a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	3301      	adds	r3, #1
 80037ca:	d01e      	beq.n	800380a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037cc:	f7fe fdd8 	bl	8002380 <HAL_GetTick>
 80037d0:	0002      	movs	r2, r0
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d302      	bcc.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d113      	bne.n	800380a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	2220      	movs	r2, #32
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2241      	movs	r2, #65	; 0x41
 80037f2:	2120      	movs	r1, #32
 80037f4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2242      	movs	r2, #66	; 0x42
 80037fa:	2100      	movs	r1, #0
 80037fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2240      	movs	r2, #64	; 0x40
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e00f      	b.n	800382a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	4013      	ands	r3, r2
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	425a      	negs	r2, r3
 800381a:	4153      	adcs	r3, r2
 800381c:	b2db      	uxtb	r3, r3
 800381e:	001a      	movs	r2, r3
 8003820:	1dfb      	adds	r3, r7, #7
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d0ce      	beq.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b004      	add	sp, #16
 8003830:	bd80      	pop	{r7, pc}

08003832 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800383e:	e02b      	b.n	8003898 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 f86e 	bl	8003928 <I2C_IsAcknowledgeFailed>
 800384c:	1e03      	subs	r3, r0, #0
 800384e:	d001      	beq.n	8003854 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e029      	b.n	80038a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	3301      	adds	r3, #1
 8003858:	d01e      	beq.n	8003898 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385a:	f7fe fd91 	bl	8002380 <HAL_GetTick>
 800385e:	0002      	movs	r2, r0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	d302      	bcc.n	8003870 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d113      	bne.n	8003898 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003874:	2220      	movs	r2, #32
 8003876:	431a      	orrs	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2241      	movs	r2, #65	; 0x41
 8003880:	2120      	movs	r1, #32
 8003882:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2242      	movs	r2, #66	; 0x42
 8003888:	2100      	movs	r1, #0
 800388a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	2100      	movs	r1, #0
 8003892:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e007      	b.n	80038a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2202      	movs	r2, #2
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d1cc      	bne.n	8003840 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b004      	add	sp, #16
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038bc:	e028      	b.n	8003910 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 f82f 	bl	8003928 <I2C_IsAcknowledgeFailed>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d001      	beq.n	80038d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e026      	b.n	8003920 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d2:	f7fe fd55 	bl	8002380 <HAL_GetTick>
 80038d6:	0002      	movs	r2, r0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d302      	bcc.n	80038e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d113      	bne.n	8003910 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ec:	2220      	movs	r2, #32
 80038ee:	431a      	orrs	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2241      	movs	r2, #65	; 0x41
 80038f8:	2120      	movs	r1, #32
 80038fa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2242      	movs	r2, #66	; 0x42
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2240      	movs	r2, #64	; 0x40
 8003908:	2100      	movs	r1, #0
 800390a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e007      	b.n	8003920 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2220      	movs	r2, #32
 8003918:	4013      	ands	r3, r2
 800391a:	2b20      	cmp	r3, #32
 800391c:	d1cf      	bne.n	80038be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b004      	add	sp, #16
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2210      	movs	r2, #16
 800393c:	4013      	ands	r3, r2
 800393e:	2b10      	cmp	r3, #16
 8003940:	d164      	bne.n	8003a0c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	049b      	lsls	r3, r3, #18
 800394c:	401a      	ands	r2, r3
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	049b      	lsls	r3, r3, #18
 8003952:	429a      	cmp	r2, r3
 8003954:	d02b      	beq.n	80039ae <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2180      	movs	r1, #128	; 0x80
 8003962:	01c9      	lsls	r1, r1, #7
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003968:	e021      	b.n	80039ae <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	3301      	adds	r3, #1
 800396e:	d01e      	beq.n	80039ae <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003970:	f7fe fd06 	bl	8002380 <HAL_GetTick>
 8003974:	0002      	movs	r2, r0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	d302      	bcc.n	8003986 <I2C_IsAcknowledgeFailed+0x5e>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d113      	bne.n	80039ae <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	2220      	movs	r2, #32
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2241      	movs	r2, #65	; 0x41
 8003996:	2120      	movs	r1, #32
 8003998:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2242      	movs	r2, #66	; 0x42
 800399e:	2100      	movs	r1, #0
 80039a0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2240      	movs	r2, #64	; 0x40
 80039a6:	2100      	movs	r1, #0
 80039a8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e02f      	b.n	8003a0e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2220      	movs	r2, #32
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d1d6      	bne.n	800396a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2210      	movs	r2, #16
 80039c2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2220      	movs	r2, #32
 80039ca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f7ff fece 	bl	8003770 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	490e      	ldr	r1, [pc, #56]	; (8003a18 <I2C_IsAcknowledgeFailed+0xf0>)
 80039e0:	400a      	ands	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	2204      	movs	r2, #4
 80039ea:	431a      	orrs	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2241      	movs	r2, #65	; 0x41
 80039f4:	2120      	movs	r1, #32
 80039f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2242      	movs	r2, #66	; 0x42
 80039fc:	2100      	movs	r1, #0
 80039fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2240      	movs	r2, #64	; 0x40
 8003a04:	2100      	movs	r1, #0
 8003a06:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	0018      	movs	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b004      	add	sp, #16
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	fe00e800 	.word	0xfe00e800

08003a1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	0008      	movs	r0, r1
 8003a26:	0011      	movs	r1, r2
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	240a      	movs	r4, #10
 8003a2c:	193b      	adds	r3, r7, r4
 8003a2e:	1c02      	adds	r2, r0, #0
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	2009      	movs	r0, #9
 8003a34:	183b      	adds	r3, r7, r0
 8003a36:	1c0a      	adds	r2, r1, #0
 8003a38:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	6a3a      	ldr	r2, [r7, #32]
 8003a42:	0d51      	lsrs	r1, r2, #21
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	00d2      	lsls	r2, r2, #3
 8003a48:	400a      	ands	r2, r1
 8003a4a:	490e      	ldr	r1, [pc, #56]	; (8003a84 <I2C_TransferConfig+0x68>)
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	43d2      	mvns	r2, r2
 8003a50:	401a      	ands	r2, r3
 8003a52:	0011      	movs	r1, r2
 8003a54:	193b      	adds	r3, r7, r4
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	059b      	lsls	r3, r3, #22
 8003a5a:	0d9a      	lsrs	r2, r3, #22
 8003a5c:	183b      	adds	r3, r7, r0
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	0418      	lsls	r0, r3, #16
 8003a62:	23ff      	movs	r3, #255	; 0xff
 8003a64:	041b      	lsls	r3, r3, #16
 8003a66:	4003      	ands	r3, r0
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b005      	add	sp, #20
 8003a80:	bd90      	pop	{r4, r7, pc}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	03ff63ff 	.word	0x03ff63ff

08003a88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2241      	movs	r2, #65	; 0x41
 8003a96:	5c9b      	ldrb	r3, [r3, r2]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d138      	bne.n	8003b10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2240      	movs	r2, #64	; 0x40
 8003aa2:	5c9b      	ldrb	r3, [r3, r2]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e032      	b.n	8003b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2240      	movs	r2, #64	; 0x40
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2241      	movs	r2, #65	; 0x41
 8003ab8:	2124      	movs	r1, #36	; 0x24
 8003aba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	438a      	bics	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4911      	ldr	r1, [pc, #68]	; (8003b1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ad8:	400a      	ands	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6819      	ldr	r1, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2101      	movs	r1, #1
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2241      	movs	r2, #65	; 0x41
 8003b00:	2120      	movs	r1, #32
 8003b02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	2100      	movs	r1, #0
 8003b0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b002      	add	sp, #8
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	ffffefff 	.word	0xffffefff

08003b20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2241      	movs	r2, #65	; 0x41
 8003b2e:	5c9b      	ldrb	r3, [r3, r2]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d139      	bne.n	8003baa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2240      	movs	r2, #64	; 0x40
 8003b3a:	5c9b      	ldrb	r3, [r3, r2]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e033      	b.n	8003bac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2240      	movs	r2, #64	; 0x40
 8003b48:	2101      	movs	r1, #1
 8003b4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2241      	movs	r2, #65	; 0x41
 8003b50:	2124      	movs	r1, #36	; 0x24
 8003b52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2101      	movs	r1, #1
 8003b60:	438a      	bics	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2101      	movs	r1, #1
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2241      	movs	r2, #65	; 0x41
 8003b9a:	2120      	movs	r1, #32
 8003b9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2240      	movs	r2, #64	; 0x40
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
  }
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b004      	add	sp, #16
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	fffff0ff 	.word	0xfffff0ff

08003bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e301      	b.n	80041ce <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d100      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x1e>
 8003bd4:	e08d      	b.n	8003cf2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bd6:	4bc3      	ldr	r3, [pc, #780]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	220c      	movs	r2, #12
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d00e      	beq.n	8003c00 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003be2:	4bc0      	ldr	r3, [pc, #768]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	220c      	movs	r2, #12
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d116      	bne.n	8003c1c <HAL_RCC_OscConfig+0x64>
 8003bee:	4bbd      	ldr	r3, [pc, #756]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	2380      	movs	r3, #128	; 0x80
 8003bf4:	025b      	lsls	r3, r3, #9
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	025b      	lsls	r3, r3, #9
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d10d      	bne.n	8003c1c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	4bb8      	ldr	r3, [pc, #736]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	029b      	lsls	r3, r3, #10
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <HAL_RCC_OscConfig+0x56>
 8003c0c:	e070      	b.n	8003cf0 <HAL_RCC_OscConfig+0x138>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d000      	beq.n	8003c18 <HAL_RCC_OscConfig+0x60>
 8003c16:	e06b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e2d8      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_OscConfig+0x7c>
 8003c24:	4baf      	ldr	r3, [pc, #700]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4bae      	ldr	r3, [pc, #696]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c2a:	2180      	movs	r1, #128	; 0x80
 8003c2c:	0249      	lsls	r1, r1, #9
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	e02f      	b.n	8003c94 <HAL_RCC_OscConfig+0xdc>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10c      	bne.n	8003c56 <HAL_RCC_OscConfig+0x9e>
 8003c3c:	4ba9      	ldr	r3, [pc, #676]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4ba8      	ldr	r3, [pc, #672]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c42:	49a9      	ldr	r1, [pc, #676]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003c44:	400a      	ands	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	4ba6      	ldr	r3, [pc, #664]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4ba5      	ldr	r3, [pc, #660]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c4e:	49a7      	ldr	r1, [pc, #668]	; (8003eec <HAL_RCC_OscConfig+0x334>)
 8003c50:	400a      	ands	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	e01e      	b.n	8003c94 <HAL_RCC_OscConfig+0xdc>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d10e      	bne.n	8003c7c <HAL_RCC_OscConfig+0xc4>
 8003c5e:	4ba1      	ldr	r3, [pc, #644]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4ba0      	ldr	r3, [pc, #640]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c64:	2180      	movs	r1, #128	; 0x80
 8003c66:	02c9      	lsls	r1, r1, #11
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	4b9d      	ldr	r3, [pc, #628]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4b9c      	ldr	r3, [pc, #624]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c72:	2180      	movs	r1, #128	; 0x80
 8003c74:	0249      	lsls	r1, r1, #9
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e00b      	b.n	8003c94 <HAL_RCC_OscConfig+0xdc>
 8003c7c:	4b99      	ldr	r3, [pc, #612]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b98      	ldr	r3, [pc, #608]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c82:	4999      	ldr	r1, [pc, #612]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003c84:	400a      	ands	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	4b96      	ldr	r3, [pc, #600]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b95      	ldr	r3, [pc, #596]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003c8e:	4997      	ldr	r1, [pc, #604]	; (8003eec <HAL_RCC_OscConfig+0x334>)
 8003c90:	400a      	ands	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d014      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fe fb70 	bl	8002380 <HAL_GetTick>
 8003ca0:	0003      	movs	r3, r0
 8003ca2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca6:	f7fe fb6b 	bl	8002380 <HAL_GetTick>
 8003caa:	0002      	movs	r2, r0
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b64      	cmp	r3, #100	; 0x64
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e28a      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb8:	4b8a      	ldr	r3, [pc, #552]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	029b      	lsls	r3, r3, #10
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0xee>
 8003cc4:	e015      	b.n	8003cf2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc6:	f7fe fb5b 	bl	8002380 <HAL_GetTick>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fe fb56 	bl	8002380 <HAL_GetTick>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e275      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce2:	4b80      	ldr	r3, [pc, #512]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	029b      	lsls	r3, r3, #10
 8003cea:	4013      	ands	r3, r2
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x118>
 8003cee:	e000      	b.n	8003cf2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d100      	bne.n	8003cfe <HAL_RCC_OscConfig+0x146>
 8003cfc:	e069      	b.n	8003dd2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003cfe:	4b79      	ldr	r3, [pc, #484]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	220c      	movs	r2, #12
 8003d04:	4013      	ands	r3, r2
 8003d06:	d00b      	beq.n	8003d20 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d08:	4b76      	ldr	r3, [pc, #472]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	220c      	movs	r2, #12
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d11c      	bne.n	8003d4e <HAL_RCC_OscConfig+0x196>
 8003d14:	4b73      	ldr	r3, [pc, #460]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	025b      	lsls	r3, r3, #9
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d116      	bne.n	8003d4e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d20:	4b70      	ldr	r3, [pc, #448]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2202      	movs	r2, #2
 8003d26:	4013      	ands	r3, r2
 8003d28:	d005      	beq.n	8003d36 <HAL_RCC_OscConfig+0x17e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e24b      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d36:	4b6b      	ldr	r3, [pc, #428]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	22f8      	movs	r2, #248	; 0xf8
 8003d3c:	4393      	bics	r3, r2
 8003d3e:	0019      	movs	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	00da      	lsls	r2, r3, #3
 8003d46:	4b67      	ldr	r3, [pc, #412]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4c:	e041      	b.n	8003dd2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d024      	beq.n	8003da0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d56:	4b63      	ldr	r3, [pc, #396]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b62      	ldr	r3, [pc, #392]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fe fb0d 	bl	8002380 <HAL_GetTick>
 8003d66:	0003      	movs	r3, r0
 8003d68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fb08 	bl	8002380 <HAL_GetTick>
 8003d70:	0002      	movs	r2, r0
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e227      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7e:	4b59      	ldr	r3, [pc, #356]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2202      	movs	r2, #2
 8003d84:	4013      	ands	r3, r2
 8003d86:	d0f1      	beq.n	8003d6c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d88:	4b56      	ldr	r3, [pc, #344]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	22f8      	movs	r2, #248	; 0xf8
 8003d8e:	4393      	bics	r3, r2
 8003d90:	0019      	movs	r1, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	00da      	lsls	r2, r3, #3
 8003d98:	4b52      	ldr	r3, [pc, #328]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e018      	b.n	8003dd2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da0:	4b50      	ldr	r3, [pc, #320]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b4f      	ldr	r3, [pc, #316]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003da6:	2101      	movs	r1, #1
 8003da8:	438a      	bics	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dac:	f7fe fae8 	bl	8002380 <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db6:	f7fe fae3 	bl	8002380 <HAL_GetTick>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e202      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc8:	4b46      	ldr	r3, [pc, #280]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d1f1      	bne.n	8003db6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d036      	beq.n	8003e4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d019      	beq.n	8003e18 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de4:	4b3f      	ldr	r3, [pc, #252]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003dea:	2101      	movs	r1, #1
 8003dec:	430a      	orrs	r2, r1
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df0:	f7fe fac6 	bl	8002380 <HAL_GetTick>
 8003df4:	0003      	movs	r3, r0
 8003df6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfa:	f7fe fac1 	bl	8002380 <HAL_GetTick>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e1e0      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0c:	4b35      	ldr	r3, [pc, #212]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	2202      	movs	r2, #2
 8003e12:	4013      	ands	r3, r2
 8003e14:	d0f1      	beq.n	8003dfa <HAL_RCC_OscConfig+0x242>
 8003e16:	e018      	b.n	8003e4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e18:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e1c:	4b31      	ldr	r3, [pc, #196]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003e1e:	2101      	movs	r1, #1
 8003e20:	438a      	bics	r2, r1
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e24:	f7fe faac 	bl	8002380 <HAL_GetTick>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e2e:	f7fe faa7 	bl	8002380 <HAL_GetTick>
 8003e32:	0002      	movs	r2, r0
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e1c6      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e40:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	2202      	movs	r2, #2
 8003e46:	4013      	ands	r3, r2
 8003e48:	d1f1      	bne.n	8003e2e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	4013      	ands	r3, r2
 8003e52:	d100      	bne.n	8003e56 <HAL_RCC_OscConfig+0x29e>
 8003e54:	e0b4      	b.n	8003fc0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e56:	201f      	movs	r0, #31
 8003e58:	183b      	adds	r3, r7, r0
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5e:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	055b      	lsls	r3, r3, #21
 8003e66:	4013      	ands	r3, r2
 8003e68:	d110      	bne.n	8003e8c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003e6c:	69da      	ldr	r2, [r3, #28]
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003e70:	2180      	movs	r1, #128	; 0x80
 8003e72:	0549      	lsls	r1, r1, #21
 8003e74:	430a      	orrs	r2, r1
 8003e76:	61da      	str	r2, [r3, #28]
 8003e78:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	055b      	lsls	r3, r3, #21
 8003e80:	4013      	ands	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e86:	183b      	adds	r3, r7, r0
 8003e88:	2201      	movs	r2, #1
 8003e8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <HAL_RCC_OscConfig+0x338>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4013      	ands	r3, r2
 8003e96:	d11a      	bne.n	8003ece <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e98:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <HAL_RCC_OscConfig+0x338>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <HAL_RCC_OscConfig+0x338>)
 8003e9e:	2180      	movs	r1, #128	; 0x80
 8003ea0:	0049      	lsls	r1, r1, #1
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea6:	f7fe fa6b 	bl	8002380 <HAL_GetTick>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb0:	f7fe fa66 	bl	8002380 <HAL_GetTick>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	; 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e185      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_OscConfig+0x338>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x33c>
 8003ed6:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003ed8:	6a1a      	ldr	r2, [r3, #32]
 8003eda:	4b02      	ldr	r3, [pc, #8]	; (8003ee4 <HAL_RCC_OscConfig+0x32c>)
 8003edc:	2101      	movs	r1, #1
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	621a      	str	r2, [r3, #32]
 8003ee2:	e035      	b.n	8003f50 <HAL_RCC_OscConfig+0x398>
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	fffeffff 	.word	0xfffeffff
 8003eec:	fffbffff 	.word	0xfffbffff
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10c      	bne.n	8003f16 <HAL_RCC_OscConfig+0x35e>
 8003efc:	4bb6      	ldr	r3, [pc, #728]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003efe:	6a1a      	ldr	r2, [r3, #32]
 8003f00:	4bb5      	ldr	r3, [pc, #724]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003f02:	2101      	movs	r1, #1
 8003f04:	438a      	bics	r2, r1
 8003f06:	621a      	str	r2, [r3, #32]
 8003f08:	4bb3      	ldr	r3, [pc, #716]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003f0a:	6a1a      	ldr	r2, [r3, #32]
 8003f0c:	4bb2      	ldr	r3, [pc, #712]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003f0e:	2104      	movs	r1, #4
 8003f10:	438a      	bics	r2, r1
 8003f12:	621a      	str	r2, [r3, #32]
 8003f14:	e01c      	b.n	8003f50 <HAL_RCC_OscConfig+0x398>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x380>
 8003f1e:	4bae      	ldr	r3, [pc, #696]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003f20:	6a1a      	ldr	r2, [r3, #32]
 8003f22:	4bad      	ldr	r3, [pc, #692]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003f24:	2104      	movs	r1, #4
 8003f26:	430a      	orrs	r2, r1
 8003f28:	621a      	str	r2, [r3, #32]
 8003f2a:	4bab      	ldr	r3, [pc, #684]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	4baa      	ldr	r3, [pc, #680]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003f30:	2101      	movs	r1, #1
 8003f32:	430a      	orrs	r2, r1
 8003f34:	621a      	str	r2, [r3, #32]
 8003f36:	e00b      	b.n	8003f50 <HAL_RCC_OscConfig+0x398>
 8003f38:	4ba7      	ldr	r3, [pc, #668]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003f3a:	6a1a      	ldr	r2, [r3, #32]
 8003f3c:	4ba6      	ldr	r3, [pc, #664]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003f3e:	2101      	movs	r1, #1
 8003f40:	438a      	bics	r2, r1
 8003f42:	621a      	str	r2, [r3, #32]
 8003f44:	4ba4      	ldr	r3, [pc, #656]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003f46:	6a1a      	ldr	r2, [r3, #32]
 8003f48:	4ba3      	ldr	r3, [pc, #652]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003f4a:	2104      	movs	r1, #4
 8003f4c:	438a      	bics	r2, r1
 8003f4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d014      	beq.n	8003f82 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f58:	f7fe fa12 	bl	8002380 <HAL_GetTick>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f60:	e009      	b.n	8003f76 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7fe fa0d 	bl	8002380 <HAL_GetTick>
 8003f66:	0002      	movs	r2, r0
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	4a9b      	ldr	r2, [pc, #620]	; (80041dc <HAL_RCC_OscConfig+0x624>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e12b      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f76:	4b98      	ldr	r3, [pc, #608]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x3aa>
 8003f80:	e013      	b.n	8003faa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f82:	f7fe f9fd 	bl	8002380 <HAL_GetTick>
 8003f86:	0003      	movs	r3, r0
 8003f88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8a:	e009      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7fe f9f8 	bl	8002380 <HAL_GetTick>
 8003f90:	0002      	movs	r2, r0
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	4a91      	ldr	r2, [pc, #580]	; (80041dc <HAL_RCC_OscConfig+0x624>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e116      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa0:	4b8d      	ldr	r3, [pc, #564]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003faa:	231f      	movs	r3, #31
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb4:	4b88      	ldr	r3, [pc, #544]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	4b87      	ldr	r3, [pc, #540]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003fba:	4989      	ldr	r1, [pc, #548]	; (80041e0 <HAL_RCC_OscConfig+0x628>)
 8003fbc:	400a      	ands	r2, r1
 8003fbe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d063      	beq.n	8004092 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d12a      	bne.n	8004028 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fd2:	4b81      	ldr	r3, [pc, #516]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd6:	4b80      	ldr	r3, [pc, #512]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003fd8:	2104      	movs	r1, #4
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003fde:	4b7e      	ldr	r3, [pc, #504]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe2:	4b7d      	ldr	r3, [pc, #500]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fea:	f7fe f9c9 	bl	8002380 <HAL_GetTick>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ff4:	f7fe f9c4 	bl	8002380 <HAL_GetTick>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e0e3      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004006:	4b74      	ldr	r3, [pc, #464]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400a:	2202      	movs	r2, #2
 800400c:	4013      	ands	r3, r2
 800400e:	d0f1      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004010:	4b71      	ldr	r3, [pc, #452]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004014:	22f8      	movs	r2, #248	; 0xf8
 8004016:	4393      	bics	r3, r2
 8004018:	0019      	movs	r1, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	00da      	lsls	r2, r3, #3
 8004020:	4b6d      	ldr	r3, [pc, #436]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004022:	430a      	orrs	r2, r1
 8004024:	635a      	str	r2, [r3, #52]	; 0x34
 8004026:	e034      	b.n	8004092 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	3305      	adds	r3, #5
 800402e:	d111      	bne.n	8004054 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004030:	4b69      	ldr	r3, [pc, #420]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004034:	4b68      	ldr	r3, [pc, #416]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004036:	2104      	movs	r1, #4
 8004038:	438a      	bics	r2, r1
 800403a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800403c:	4b66      	ldr	r3, [pc, #408]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 800403e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004040:	22f8      	movs	r2, #248	; 0xf8
 8004042:	4393      	bics	r3, r2
 8004044:	0019      	movs	r1, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	00da      	lsls	r2, r3, #3
 800404c:	4b62      	ldr	r3, [pc, #392]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 800404e:	430a      	orrs	r2, r1
 8004050:	635a      	str	r2, [r3, #52]	; 0x34
 8004052:	e01e      	b.n	8004092 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004054:	4b60      	ldr	r3, [pc, #384]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004058:	4b5f      	ldr	r3, [pc, #380]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 800405a:	2104      	movs	r1, #4
 800405c:	430a      	orrs	r2, r1
 800405e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004060:	4b5d      	ldr	r3, [pc, #372]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004064:	4b5c      	ldr	r3, [pc, #368]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004066:	2101      	movs	r1, #1
 8004068:	438a      	bics	r2, r1
 800406a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406c:	f7fe f988 	bl	8002380 <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004076:	f7fe f983 	bl	8002380 <HAL_GetTick>
 800407a:	0002      	movs	r2, r0
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0a2      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004088:	4b53      	ldr	r3, [pc, #332]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	2202      	movs	r2, #2
 800408e:	4013      	ands	r3, r2
 8004090:	d1f1      	bne.n	8004076 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d100      	bne.n	800409c <HAL_RCC_OscConfig+0x4e4>
 800409a:	e097      	b.n	80041cc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800409c:	4b4e      	ldr	r3, [pc, #312]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	220c      	movs	r2, #12
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d100      	bne.n	80040aa <HAL_RCC_OscConfig+0x4f2>
 80040a8:	e06b      	b.n	8004182 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d14c      	bne.n	800414c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b2:	4b49      	ldr	r3, [pc, #292]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4b48      	ldr	r3, [pc, #288]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 80040b8:	494a      	ldr	r1, [pc, #296]	; (80041e4 <HAL_RCC_OscConfig+0x62c>)
 80040ba:	400a      	ands	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040be:	f7fe f95f 	bl	8002380 <HAL_GetTick>
 80040c2:	0003      	movs	r3, r0
 80040c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fe f95a 	bl	8002380 <HAL_GetTick>
 80040cc:	0002      	movs	r2, r0
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e079      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040da:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	049b      	lsls	r3, r3, #18
 80040e2:	4013      	ands	r3, r2
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e6:	4b3c      	ldr	r3, [pc, #240]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	220f      	movs	r2, #15
 80040ec:	4393      	bics	r3, r2
 80040ee:	0019      	movs	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	4b38      	ldr	r3, [pc, #224]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 80040f6:	430a      	orrs	r2, r1
 80040f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80040fa:	4b37      	ldr	r3, [pc, #220]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4a3a      	ldr	r2, [pc, #232]	; (80041e8 <HAL_RCC_OscConfig+0x630>)
 8004100:	4013      	ands	r3, r2
 8004102:	0019      	movs	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	431a      	orrs	r2, r3
 800410e:	4b32      	ldr	r3, [pc, #200]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004114:	4b30      	ldr	r3, [pc, #192]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 800411a:	2180      	movs	r1, #128	; 0x80
 800411c:	0449      	lsls	r1, r1, #17
 800411e:	430a      	orrs	r2, r1
 8004120:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004122:	f7fe f92d 	bl	8002380 <HAL_GetTick>
 8004126:	0003      	movs	r3, r0
 8004128:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412c:	f7fe f928 	bl	8002380 <HAL_GetTick>
 8004130:	0002      	movs	r2, r0
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e047      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	049b      	lsls	r3, r3, #18
 8004146:	4013      	ands	r3, r2
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x574>
 800414a:	e03f      	b.n	80041cc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414c:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004152:	4924      	ldr	r1, [pc, #144]	; (80041e4 <HAL_RCC_OscConfig+0x62c>)
 8004154:	400a      	ands	r2, r1
 8004156:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fe f912 	bl	8002380 <HAL_GetTick>
 800415c:	0003      	movs	r3, r0
 800415e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004162:	f7fe f90d 	bl	8002380 <HAL_GetTick>
 8004166:	0002      	movs	r2, r0
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e02c      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004174:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	049b      	lsls	r3, r3, #18
 800417c:	4013      	ands	r3, r2
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x5aa>
 8004180:	e024      	b.n	80041cc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e01f      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800418e:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004194:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <HAL_RCC_OscConfig+0x620>)
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	025b      	lsls	r3, r3, #9
 80041a0:	401a      	ands	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d10e      	bne.n	80041c8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	220f      	movs	r2, #15
 80041ae:	401a      	ands	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	23f0      	movs	r3, #240	; 0xf0
 80041bc:	039b      	lsls	r3, r3, #14
 80041be:	401a      	ands	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b008      	add	sp, #32
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	40021000 	.word	0x40021000
 80041dc:	00001388 	.word	0x00001388
 80041e0:	efffffff 	.word	0xefffffff
 80041e4:	feffffff 	.word	0xfeffffff
 80041e8:	ffc2ffff 	.word	0xffc2ffff

080041ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0b3      	b.n	8004368 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4b5b      	ldr	r3, [pc, #364]	; (8004370 <HAL_RCC_ClockConfig+0x184>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2201      	movs	r2, #1
 8004206:	4013      	ands	r3, r2
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d911      	bls.n	8004232 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b58      	ldr	r3, [pc, #352]	; (8004370 <HAL_RCC_ClockConfig+0x184>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2201      	movs	r2, #1
 8004214:	4393      	bics	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	4b55      	ldr	r3, [pc, #340]	; (8004370 <HAL_RCC_ClockConfig+0x184>)
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004220:	4b53      	ldr	r3, [pc, #332]	; (8004370 <HAL_RCC_ClockConfig+0x184>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2201      	movs	r2, #1
 8004226:	4013      	ands	r3, r2
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d001      	beq.n	8004232 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e09a      	b.n	8004368 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2202      	movs	r2, #2
 8004238:	4013      	ands	r3, r2
 800423a:	d015      	beq.n	8004268 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2204      	movs	r2, #4
 8004242:	4013      	ands	r3, r2
 8004244:	d006      	beq.n	8004254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004246:	4b4b      	ldr	r3, [pc, #300]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	4b4a      	ldr	r3, [pc, #296]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 800424c:	21e0      	movs	r1, #224	; 0xe0
 800424e:	00c9      	lsls	r1, r1, #3
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004254:	4b47      	ldr	r3, [pc, #284]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	22f0      	movs	r2, #240	; 0xf0
 800425a:	4393      	bics	r3, r2
 800425c:	0019      	movs	r1, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	4b44      	ldr	r3, [pc, #272]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 8004264:	430a      	orrs	r2, r1
 8004266:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2201      	movs	r2, #1
 800426e:	4013      	ands	r3, r2
 8004270:	d040      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d107      	bne.n	800428a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	4b3e      	ldr	r3, [pc, #248]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	029b      	lsls	r3, r3, #10
 8004282:	4013      	ands	r3, r2
 8004284:	d114      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e06e      	b.n	8004368 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004292:	4b38      	ldr	r3, [pc, #224]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	2380      	movs	r3, #128	; 0x80
 8004298:	049b      	lsls	r3, r3, #18
 800429a:	4013      	ands	r3, r2
 800429c:	d108      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e062      	b.n	8004368 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a2:	4b34      	ldr	r3, [pc, #208]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2202      	movs	r2, #2
 80042a8:	4013      	ands	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e05b      	b.n	8004368 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b0:	4b30      	ldr	r3, [pc, #192]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2203      	movs	r2, #3
 80042b6:	4393      	bics	r3, r2
 80042b8:	0019      	movs	r1, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c4:	f7fe f85c 	bl	8002380 <HAL_GetTick>
 80042c8:	0003      	movs	r3, r0
 80042ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042cc:	e009      	b.n	80042e2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ce:	f7fe f857 	bl	8002380 <HAL_GetTick>
 80042d2:	0002      	movs	r2, r0
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	4a27      	ldr	r2, [pc, #156]	; (8004378 <HAL_RCC_ClockConfig+0x18c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e042      	b.n	8004368 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	4b24      	ldr	r3, [pc, #144]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	220c      	movs	r2, #12
 80042e8:	401a      	ands	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d1ec      	bne.n	80042ce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f4:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <HAL_RCC_ClockConfig+0x184>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2201      	movs	r2, #1
 80042fa:	4013      	ands	r3, r2
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d211      	bcs.n	8004326 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <HAL_RCC_ClockConfig+0x184>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2201      	movs	r2, #1
 8004308:	4393      	bics	r3, r2
 800430a:	0019      	movs	r1, r3
 800430c:	4b18      	ldr	r3, [pc, #96]	; (8004370 <HAL_RCC_ClockConfig+0x184>)
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004314:	4b16      	ldr	r3, [pc, #88]	; (8004370 <HAL_RCC_ClockConfig+0x184>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2201      	movs	r2, #1
 800431a:	4013      	ands	r3, r2
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d001      	beq.n	8004326 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e020      	b.n	8004368 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2204      	movs	r2, #4
 800432c:	4013      	ands	r3, r2
 800432e:	d009      	beq.n	8004344 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4a11      	ldr	r2, [pc, #68]	; (800437c <HAL_RCC_ClockConfig+0x190>)
 8004336:	4013      	ands	r3, r2
 8004338:	0019      	movs	r1, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 8004340:	430a      	orrs	r2, r1
 8004342:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004344:	f000 f820 	bl	8004388 <HAL_RCC_GetSysClockFreq>
 8004348:	0001      	movs	r1, r0
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <HAL_RCC_ClockConfig+0x188>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	220f      	movs	r2, #15
 8004352:	4013      	ands	r3, r2
 8004354:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <HAL_RCC_ClockConfig+0x194>)
 8004356:	5cd3      	ldrb	r3, [r2, r3]
 8004358:	000a      	movs	r2, r1
 800435a:	40da      	lsrs	r2, r3
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <HAL_RCC_ClockConfig+0x198>)
 800435e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004360:	2000      	movs	r0, #0
 8004362:	f7fd ffc7 	bl	80022f4 <HAL_InitTick>
  
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b004      	add	sp, #16
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40022000 	.word	0x40022000
 8004374:	40021000 	.word	0x40021000
 8004378:	00001388 	.word	0x00001388
 800437c:	fffff8ff 	.word	0xfffff8ff
 8004380:	0800479c 	.word	0x0800479c
 8004384:	20000000 	.word	0x20000000

08004388 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b08f      	sub	sp, #60	; 0x3c
 800438c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800438e:	2314      	movs	r3, #20
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004394:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004396:	c313      	stmia	r3!, {r0, r1, r4}
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	4a29      	ldr	r2, [pc, #164]	; (8004444 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043a2:	c313      	stmia	r3!, {r0, r1, r4}
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ac:	2300      	movs	r3, #0
 80043ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b0:	2300      	movs	r3, #0
 80043b2:	637b      	str	r3, [r7, #52]	; 0x34
 80043b4:	2300      	movs	r3, #0
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80043bc:	4b22      	ldr	r3, [pc, #136]	; (8004448 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c4:	220c      	movs	r2, #12
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d002      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x4a>
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d003      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x50>
 80043d0:	e02d      	b.n	800442e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043d2:	4b1e      	ldr	r3, [pc, #120]	; (800444c <HAL_RCC_GetSysClockFreq+0xc4>)
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043d6:	e02d      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	0c9b      	lsrs	r3, r3, #18
 80043dc:	220f      	movs	r2, #15
 80043de:	4013      	ands	r3, r2
 80043e0:	2214      	movs	r2, #20
 80043e2:	18ba      	adds	r2, r7, r2
 80043e4:	5cd3      	ldrb	r3, [r2, r3]
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80043e8:	4b17      	ldr	r3, [pc, #92]	; (8004448 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	220f      	movs	r2, #15
 80043ee:	4013      	ands	r3, r2
 80043f0:	1d3a      	adds	r2, r7, #4
 80043f2:	5cd3      	ldrb	r3, [r2, r3]
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	025b      	lsls	r3, r3, #9
 80043fc:	4013      	ands	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004402:	4812      	ldr	r0, [pc, #72]	; (800444c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004404:	f7fb fe80 	bl	8000108 <__udivsi3>
 8004408:	0003      	movs	r3, r0
 800440a:	001a      	movs	r2, r3
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	4353      	muls	r3, r2
 8004410:	637b      	str	r3, [r7, #52]	; 0x34
 8004412:	e009      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004416:	000a      	movs	r2, r1
 8004418:	0152      	lsls	r2, r2, #5
 800441a:	1a52      	subs	r2, r2, r1
 800441c:	0193      	lsls	r3, r2, #6
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	185b      	adds	r3, r3, r1
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800442c:	e002      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004430:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004432:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b00f      	add	sp, #60	; 0x3c
 800443c:	bd90      	pop	{r4, r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	0800467c 	.word	0x0800467c
 8004444:	0800468c 	.word	0x0800468c
 8004448:	40021000 	.word	0x40021000
 800444c:	007a1200 	.word	0x007a1200

08004450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	025b      	lsls	r3, r3, #9
 8004468:	4013      	ands	r3, r2
 800446a:	d100      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800446c:	e08e      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800446e:	2017      	movs	r0, #23
 8004470:	183b      	adds	r3, r7, r0
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004476:	4b5f      	ldr	r3, [pc, #380]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	055b      	lsls	r3, r3, #21
 800447e:	4013      	ands	r3, r2
 8004480:	d110      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	4b5c      	ldr	r3, [pc, #368]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	4b5b      	ldr	r3, [pc, #364]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	0549      	lsls	r1, r1, #21
 800448c:	430a      	orrs	r2, r1
 800448e:	61da      	str	r2, [r3, #28]
 8004490:	4b58      	ldr	r3, [pc, #352]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	055b      	lsls	r3, r3, #21
 8004498:	4013      	ands	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449e:	183b      	adds	r3, r7, r0
 80044a0:	2201      	movs	r2, #1
 80044a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a4:	4b54      	ldr	r3, [pc, #336]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4013      	ands	r3, r2
 80044ae:	d11a      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b0:	4b51      	ldr	r3, [pc, #324]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4b50      	ldr	r3, [pc, #320]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044b6:	2180      	movs	r1, #128	; 0x80
 80044b8:	0049      	lsls	r1, r1, #1
 80044ba:	430a      	orrs	r2, r1
 80044bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044be:	f7fd ff5f 	bl	8002380 <HAL_GetTick>
 80044c2:	0003      	movs	r3, r0
 80044c4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c6:	e008      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c8:	f7fd ff5a 	bl	8002380 <HAL_GetTick>
 80044cc:	0002      	movs	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	; 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e087      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044da:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4013      	ands	r3, r2
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e6:	4b43      	ldr	r3, [pc, #268]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044e8:	6a1a      	ldr	r2, [r3, #32]
 80044ea:	23c0      	movs	r3, #192	; 0xc0
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4013      	ands	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d034      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	23c0      	movs	r3, #192	; 0xc0
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4013      	ands	r3, r2
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	429a      	cmp	r2, r3
 8004506:	d02c      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004508:	4b3a      	ldr	r3, [pc, #232]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	4a3b      	ldr	r2, [pc, #236]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800450e:	4013      	ands	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004512:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004514:	6a1a      	ldr	r2, [r3, #32]
 8004516:	4b37      	ldr	r3, [pc, #220]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004518:	2180      	movs	r1, #128	; 0x80
 800451a:	0249      	lsls	r1, r1, #9
 800451c:	430a      	orrs	r2, r1
 800451e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004520:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004522:	6a1a      	ldr	r2, [r3, #32]
 8004524:	4b33      	ldr	r3, [pc, #204]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004526:	4936      	ldr	r1, [pc, #216]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004528:	400a      	ands	r2, r1
 800452a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800452c:	4b31      	ldr	r3, [pc, #196]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	4013      	ands	r3, r2
 8004538:	d013      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453a:	f7fd ff21 	bl	8002380 <HAL_GetTick>
 800453e:	0003      	movs	r3, r0
 8004540:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004542:	e009      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004544:	f7fd ff1c 	bl	8002380 <HAL_GetTick>
 8004548:	0002      	movs	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d901      	bls.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e048      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004558:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	2202      	movs	r2, #2
 800455e:	4013      	ands	r3, r2
 8004560:	d0f0      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004562:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	4a25      	ldr	r2, [pc, #148]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004568:	4013      	ands	r3, r2
 800456a:	0019      	movs	r1, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004572:	430a      	orrs	r2, r1
 8004574:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004576:	2317      	movs	r3, #23
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d105      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004580:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004586:	4920      	ldr	r1, [pc, #128]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004588:	400a      	ands	r2, r1
 800458a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2201      	movs	r2, #1
 8004592:	4013      	ands	r3, r2
 8004594:	d009      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004596:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	2203      	movs	r2, #3
 800459c:	4393      	bics	r3, r2
 800459e:	0019      	movs	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045a6:	430a      	orrs	r2, r1
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2220      	movs	r2, #32
 80045b0:	4013      	ands	r3, r2
 80045b2:	d009      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	2210      	movs	r2, #16
 80045ba:	4393      	bics	r3, r2
 80045bc:	0019      	movs	r1, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045c4:	430a      	orrs	r2, r1
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	2380      	movs	r3, #128	; 0x80
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4013      	ands	r3, r2
 80045d2:	d009      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045d4:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	2240      	movs	r2, #64	; 0x40
 80045da:	4393      	bics	r3, r2
 80045dc:	0019      	movs	r1, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045e4:	430a      	orrs	r2, r1
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	0018      	movs	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b006      	add	sp, #24
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40007000 	.word	0x40007000
 80045fc:	fffffcff 	.word	0xfffffcff
 8004600:	fffeffff 	.word	0xfffeffff
 8004604:	00001388 	.word	0x00001388
 8004608:	efffffff 	.word	0xefffffff

0800460c <__libc_init_array>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	2600      	movs	r6, #0
 8004610:	4d0c      	ldr	r5, [pc, #48]	; (8004644 <__libc_init_array+0x38>)
 8004612:	4c0d      	ldr	r4, [pc, #52]	; (8004648 <__libc_init_array+0x3c>)
 8004614:	1b64      	subs	r4, r4, r5
 8004616:	10a4      	asrs	r4, r4, #2
 8004618:	42a6      	cmp	r6, r4
 800461a:	d109      	bne.n	8004630 <__libc_init_array+0x24>
 800461c:	2600      	movs	r6, #0
 800461e:	f000 f821 	bl	8004664 <_init>
 8004622:	4d0a      	ldr	r5, [pc, #40]	; (800464c <__libc_init_array+0x40>)
 8004624:	4c0a      	ldr	r4, [pc, #40]	; (8004650 <__libc_init_array+0x44>)
 8004626:	1b64      	subs	r4, r4, r5
 8004628:	10a4      	asrs	r4, r4, #2
 800462a:	42a6      	cmp	r6, r4
 800462c:	d105      	bne.n	800463a <__libc_init_array+0x2e>
 800462e:	bd70      	pop	{r4, r5, r6, pc}
 8004630:	00b3      	lsls	r3, r6, #2
 8004632:	58eb      	ldr	r3, [r5, r3]
 8004634:	4798      	blx	r3
 8004636:	3601      	adds	r6, #1
 8004638:	e7ee      	b.n	8004618 <__libc_init_array+0xc>
 800463a:	00b3      	lsls	r3, r6, #2
 800463c:	58eb      	ldr	r3, [r5, r3]
 800463e:	4798      	blx	r3
 8004640:	3601      	adds	r6, #1
 8004642:	e7f2      	b.n	800462a <__libc_init_array+0x1e>
 8004644:	080047ac 	.word	0x080047ac
 8004648:	080047ac 	.word	0x080047ac
 800464c:	080047ac 	.word	0x080047ac
 8004650:	080047b0 	.word	0x080047b0

08004654 <memset>:
 8004654:	0003      	movs	r3, r0
 8004656:	1882      	adds	r2, r0, r2
 8004658:	4293      	cmp	r3, r2
 800465a:	d100      	bne.n	800465e <memset+0xa>
 800465c:	4770      	bx	lr
 800465e:	7019      	strb	r1, [r3, #0]
 8004660:	3301      	adds	r3, #1
 8004662:	e7f9      	b.n	8004658 <memset+0x4>

08004664 <_init>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr

08004670 <_fini>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr
